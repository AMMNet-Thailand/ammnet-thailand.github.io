[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "เกี่ยวกับเรา",
    "section": "",
    "text": "เว็บไซต์นี้จัดทำโดย สมภพ ศรลัมพ์ เพื่อให้ข้อมูลและเป็นเอกสารสำหรับการเรียนหลักสูตรระยะสั้นการใช้งาน Shiny ขั้นพื้นฐาน ที่จัดโดยทีมแบบจำลองคณิตศาสตร์ หน่วยวิจัยโรคเขตร้อนมหิดล อ๊อกซ์ฟอร์ด ระหว่างวันที่ 24-25 สิงหาคม 2566 ณ คณะเวชศาสตร์เขตร้อน มหาวิทยาลัยมหิดล\nทีมงานสำหรับจัดงานอบรมครั้งนี้\n\n\n\nชื่อ\nรูป\nตำแหน่ง\n\n\n\n\nพี่อ้น\n\nผู้ประสานงาน\n\n\nสมภพ\n\nวิทยากร\n\n\nนพพล\n\nวิทยากร\n\n\n\nโดยหลักสูตรระยะสั้นนี้ได้รับการสนับสนุนเงินทุนจาก\nThe Applied Malaria Modeling Network (AMMnet)"
  },
  {
    "objectID": "08-deployment.html",
    "href": "08-deployment.html",
    "title": "การนำแอปไปใช้งาน",
    "section": "",
    "text": "ในหัวข้อนี้เราจะเรียนรู้:"
  },
  {
    "objectID": "08-deployment.html#เสรมศกยภาพของแอป",
    "href": "08-deployment.html#เสรมศกยภาพของแอป",
    "title": "การนำแอปไปใช้งาน",
    "section": "เสริมศักยภาพของแอป",
    "text": "เสริมศักยภาพของแอป\n\nก่อนที่จะถึงเวลาที่จะนำแอปไปใช้ควรที่จะตรวจสอบให้แน่ใจว่าแอปของเราผ่านการทดสอบที่ควรจะเป็น\nขึ้นอยู่กับกรณีการใช้งานและกลุ่มเป้าหมาย เมื่อนำแอปออกไปใช้แล้ว แอปควรมีลักษณะดังนี้:\n\nเร็ว: การสื่อสารอาจทำให้แอปของเราช้าลง\nสามารถขยายขนาดได้: การทำงานหนักและเยอะอาจทำให้แอปของเราล่ม\nเสถียร: ข้อผิดพลาดอาจทำให้แอปของเราล่มเช่นกัน"
  },
  {
    "objectID": "08-deployment.html#เครองมอในการเสรมศกยภาพของแอป",
    "href": "08-deployment.html#เครองมอในการเสรมศกยภาพของแอป",
    "title": "การนำแอปไปใช้งาน",
    "section": "เครื่องมือในการเสริมศักยภาพของแอป",
    "text": "เครื่องมือในการเสริมศักยภาพของแอป\n\nมีหลายส่วนขยาย Shiny ที่ช่วยเสริมศักยภาพของแอป Shiny มากมาย บางส่วนในนั้นเราจะกล่าวถึงดังนี้:\n\nprofvis: ทำการสร้างโปรไฟล์สำหรับแอป Shiny และสร้างแสดงผลประสิทธิภาพ\nreactlog: บันทึกความเปลี่ยนแปลงในแอป Shiny และสร้างกราฟการเปลี่ยนแปลงแบบไดนามิก\nshinyloadtest: จำลองการทำงานของผู้ใช้และกำหนดว่าแอปของเราเหมาะสมกับการทำงานเหล่านี้แค่ไหน\nshinytest: สร้างภาพรวมและเปรียบเทียบของแอปในการรัน\nshiny::testServer(): ดำเนินการทดสอบserver"
  },
  {
    "objectID": "08-deployment.html#แหลงขอมลเพมเตม",
    "href": "08-deployment.html#แหลงขอมลเพมเตม",
    "title": "การนำแอปไปใช้งาน",
    "section": "แหล่งข้อมูลเพิ่มเติม",
    "text": "แหล่งข้อมูลเพิ่มเติม\n\nบทที่ 11 และ 13 จากหนังสือ Engineering Production-Grade Shiny Apps ของ Colin Fay\nบทที่ 21 และ 23 จากหนังสือ Mastering Shiny ของ Hadley Wickham"
  },
  {
    "objectID": "08-deployment.html#การใชแพคเกจ-profvis",
    "href": "08-deployment.html#การใชแพคเกจ-profvis",
    "title": "การนำแอปไปใช้งาน",
    "section": "การใช้แพคเกจ profvis",
    "text": "การใช้แพคเกจ profvis\n\nเพียงแค่รันแอปภายในคำสั่ง profvis::profvis():\n\n\nprofvis({runApp()})\n\n\n\n\n\n\n\nNote\n\n\n\nมันจำเป็นต้องใช้คำสั่ง runApp() เพียง shinyApp() มันไม่พอ\n\n\n\nทดลองทำอะไรบางอย่างในแอป\nเปิดแอป จากนั้นจะมีไฟล์ HTMLหนึ่งเที่มีหน้าตาเหมือนด้านล่างนี้ปิดขึ้น:"
  },
  {
    "objectID": "08-deployment.html#การแกไขการโตตอบ",
    "href": "08-deployment.html#การแกไขการโตตอบ",
    "title": "การนำแอปไปใช้งาน",
    "section": "การแก้ไขการโต้ตอบ",
    "text": "การแก้ไขการโต้ตอบ\n\nการแก้ไขการโต้ตอบก็เหมือนกับใน R\nเรียก browser() ไว้ที่ไหนก็ได้ในฟังก์ชันserver\nโค้ดจะรันมาถึงจุดที่ใส่ browser()และหยุดอยู่ในสถานะ “แช่แข็ง” ทำให้เราสามารถสำรวจตรวจสอบฟังก์ชันserverได้\n\n\n\n\nการเข้าถึง input ในการเรียกใช้ browser ใน Shiny"
  },
  {
    "objectID": "08-deployment.html#การบนทกขอมล-logging",
    "href": "08-deployment.html#การบนทกขอมล-logging",
    "title": "การนำแอปไปใช้งาน",
    "section": "การบันทึกข้อมูล (Logging)",
    "text": "การบันทึกข้อมูล (Logging)\n\nใน R การพิมพ์ข้อมูลที่สงสัยเพื่อใช้ในการแก้ไขบั๊กก็อาจจะไม่เพียงพอ\nแต่ใน Shiny การพิมพ์ข้อมูลออกมาดูเพื่อแก้ไขบั๊กอาจเป็นวิธีที่ดีที่จะทำให้เข้าใจข้อผิดพลาดที่เกิดขึ้น"
  },
  {
    "objectID": "08-deployment.html#อยตรงไหนแลวเนย",
    "href": "08-deployment.html#อยตรงไหนแลวเนย",
    "title": "การนำแอปไปใช้งาน",
    "section": "อยู่ตรงไหนแล้วเนี้ย",
    "text": "อยู่ตรงไหนแล้วเนี้ย\n\nเป็นคำถามที่เราอาจเองถามตัวเองเมื่อมีข้อผิดพลาดเกิดขึ้น Shiny\nแพคเกจ whereami สามารถบอกได้ว่าเราอยู่ที่ไหนในโค้ด\nมีแพคเกจ R หลายแพคเกจที่ช่วยบันทึกข้อมูลทั่วไป (logging, logger, log4r) แต่ whereami นี่เหมาะกับ Shiny มาก\n\n\n\n\nบันทึกจาก logger\n\n\n\n\n\nบันทึกจาก whereami"
  },
  {
    "objectID": "08-deployment.html#การบนทกการโตตอบ-reactivity-logging",
    "href": "08-deployment.html#การบนทกการโตตอบ-reactivity-logging",
    "title": "การนำแอปไปใช้งาน",
    "section": "การบันทึกการโต้ตอบ (Reactivity logging)",
    "text": "การบันทึกการโต้ตอบ (Reactivity logging)\n\nReactivity logging หมายถึงการบันทึกและแสดงการโต้ตอบที่เกิดขึ้นในแอป Shiny\nมีประโยชน์ในการตรวจจับการโต้ตอบที่เกิดขึ้นมากเกินไปและความไม่เสถียร\nReactivity logging สามารถทำได้โดยใช้แพคเกจ reactlog\n\n\nการใช้แพคเกจ reactlog\n\nรัน reactlog::reactlog_enable() ก่อนรันแอป Shiny หรือตั้งค่า options(shiny.reactlog = TRUE)\nใช้งานนแอป Shiny (โดยเฉพาะส่วนที่มีการโต้ตอบ)\nรัน shiny::reactlogShow() หรือ reactlog::reactlog_show() หลังจากปิดแอป\nหรือถ้ากำลังรันแอป กด ctrl + F3 แทน"
  },
  {
    "objectID": "08-deployment.html#ตดตงทไหนด",
    "href": "08-deployment.html#ตดตงทไหนด",
    "title": "การนำแอปไปใช้งาน",
    "section": "ติดตั้งที่ไหนดี",
    "text": "ติดตั้งที่ไหนดี\n\nShiny app hosting\n\n\nชื่อ\nการใช้งาน\nความต้องการ\n\n\n\n\nshinyapps.io\nแอปที่ใช้งานเป็นประจำถึงมืออาชีพ\nแพคเกจ rsconnect\n\n\nPosit Connect\nแอปที่ใช้งานในธุรกิจระดับมืออาชีพถึงองค์กร\nแพคเกจ rsconnect\n\n\nShiny Server\nการตั้งค่าเซิร์ฟเวอร์ Shiny ที่ติดตั้งเอง\nShiny Server บนเซิร์ฟเวอร์ Linux\n\n\nShinyProxy / Heroku\nการติดตั้งแอปที่อยู่ในคอนเทนเนอร์\nDocker"
  },
  {
    "objectID": "08-deployment.html#shinyapps.io",
    "href": "08-deployment.html#shinyapps.io",
    "title": "การนำแอปไปใช้งาน",
    "section": "shinyapps.io",
    "text": "shinyapps.io\n\nshinyapps.io เป็นตัวเลือกที่พบบ่อยสำหรับแอป Shiny ที่เหมาะสำหรับการใช้งานทั่วไป\n\nไม่ต้องใช้ความรู้ทางเทคนิคมากนักในการติดตั้ง\nไม่ต้องมีคอมพิวเตอร์พร้อมอยู่ก่อน (เช่นเซิร์ฟเวอร์)\nใช้ได้ฟรี\n\n\n\n\n\nบริการต่างๆของ Shinyapps.io"
  },
  {
    "objectID": "08-deployment.html#rsconnect",
    "href": "08-deployment.html#rsconnect",
    "title": "การนำแอปไปใช้งาน",
    "section": "rsconnect",
    "text": "rsconnect\n\nสำหรับ Posit Connect และ shinyapps.io เราต้องใช้แพคเกจ rsconnect\nrsconnect ช่วยเป็นตัวกลางในการสื่อสารระหว่างบริการของ Posit และ R\n\n\n\nrsconnect ถูกสร้างขึ้นจาก deployApp(), deployAPI() และ deployDoc() ซึ่งเป็นฟังก์ชันที่มีใน rsconnect"
  },
  {
    "objectID": "08-deployment.html#การสราง-account",
    "href": "08-deployment.html#การสราง-account",
    "title": "การนำแอปไปใช้งาน",
    "section": "การสร้าง account",
    "text": "การสร้าง account\n\nเราจำเป็นต้องมีบัญชีก่อนที่จะสามารถติดตั้งแอปไปยัง Shinyapps ได้\nสามารถสมัครได้โดยใช้บัญชี Google, Github หรือ Clever\n\n\n\n\nShinyapps.io sign-up"
  },
  {
    "objectID": "08-deployment.html#เชอมตอ-r-กบ-shinyapps.io",
    "href": "08-deployment.html#เชอมตอ-r-กบ-shinyapps.io",
    "title": "การนำแอปไปใช้งาน",
    "section": "เชื่อมต่อ R กับ shinyapps.io",
    "text": "เชื่อมต่อ R กับ shinyapps.io\n\nการเชื่อมต่อจะใช้ Tokens และ Secrets\nบนแดชบอร์ดของ shinyapps ไปที่ Account -&gt; Tokens ในแถบข้าง\nคลิกที่ “Add Token”\nคลิกที่ “Show” ข้างขวาของTokensที่สร้างใหม่\nนำรหัสมาวางในคอนโซลและรัน\n\n\n\n\nTokens ของ Shinyapps เพื่อเชื่อมต่อกับ rsconnect"
  },
  {
    "objectID": "08-deployment.html#deploy",
    "href": "08-deployment.html#deploy",
    "title": "การนำแอปไปใช้งาน",
    "section": "Deploy!",
    "text": "Deploy!\n\nเพื่อตรวจสอบว่ากระบวนการยืนยันการเชื่อมต่อเสร็จสมบูรณ์เราจะเรียกใช้งาน:\n\n\nrsconnect::accounts()\n\n\nสุดท้ายเพื่อติดตั้งแอป เราเพียงแค่รัน deployApp() เพื่อให้ app.R ในไดเร็กทอรีปัจจุบันไปยังถูกอัพโหลดไปที่ shinyapps.io:\n\n\nrsconnect::deployApp()"
  },
  {
    "objectID": "06-mapping.html",
    "href": "06-mapping.html",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "",
    "text": "เราจะเรียนรู้วิธี:"
  },
  {
    "objectID": "06-mapping.html#สถานะ-app-ตอนน",
    "href": "06-mapping.html#สถานะ-app-ตอนน",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "สถานะ app ตอนนี้",
    "text": "สถานะ app ตอนนี้\n\nสรุปสั้น ๆ:\n\nในหัวข้อที่ 3 เราได้เพิ่ม tab แนะนำซึ่งมีข้อมูลพื้นฐานเกี่ยวกับapp\nในหัวข้อที่ 4 เราเพิ่ม tab ตารางที่ใช้ DT\nในหัวข้อที่ 5 เราเพิ่ม tab แบบจำลองโดยใช้การแสดงผลแบบต่าง ๆ\n\n\n\n\nFull code for the current app state\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # New code goes here :)\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-mapping.html#แหลงขอมลเพมเตม",
    "href": "06-mapping.html#แหลงขอมลเพมเตม",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "แหล่งข้อมูลเพิ่มเติม",
    "text": "แหล่งข้อมูลเพิ่มเติม\n\nChapter 9 ของ “Geocomputation with R” โดย Robin Lovelace\nเอกสาร Leaflet for R"
  },
  {
    "objectID": "06-mapping.html#ประเภทของขอมลเชงพนท",
    "href": "06-mapping.html#ประเภทของขอมลเชงพนท",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ประเภทของข้อมูลเชิงพื้นที่",
    "text": "ประเภทของข้อมูลเชิงพื้นที่\n\nภูมิศาสตร์สามารถอธิบายโลกในสองแบบ:\n\nในรูปแบบของกระบวนการที่ต่อเนื่องทางภูมิศาสตร์ (หรือเรียกว่า raster data)\nในรูปแบบขององค์ประกอบแต่ละตัว (หรือเรียกว่า vector data)\n\nข้อมูลเวกเตอร์ยังเรียกว่าเรขาคณิตทางภูมิศาสตร์และสามารถแบ่งได้เป็น\n\nจุด (เช่น กิจกรรมหรือสถานที่แต่ละแห่ง)\nเส้น (เช่น ถนน แม่น้ำ)\nรูปหลายเหลี่ยม (เช่น อาคาร อำเภอ จังหวัด)\n\n\n\n\n\nโลกจริงที่ถูกอธิบายโดยการเรียงเป็นชั้นๆของข้อมูล raster และ vector(Source)"
  },
  {
    "objectID": "06-mapping.html#ขอมลเชงพนทใน-r",
    "href": "06-mapping.html#ขอมลเชงพนทใน-r",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ข้อมูลเชิงพื้นที่ใน R",
    "text": "ข้อมูลเชิงพื้นที่ใน R\n\nIn R, spatial data can be handled using various packages:\n\nsp (vector data) and raster (raster data) used to be the common packages for spatial analysis\nsf (vector data) and terra (raster data) are their more timely successors\n\nBy default, data_guerry is an sp object, but we converted it to an sf dataframe\nsf dataframes consist of a geometry column (class sfc) and multiple features (i.e. non-spatial columns)\nsfc geometries are list-like objects that consist of individual geometries (class sfg) and spatial metadata (e.g. type or dimension)\nsfg objects are matrices consisting purely of coordinates\nใน R ข้อมูลเชิงพื้นที่สามารถจัดการได้โดยใช้แพ็กเกจต่างๆ:\n\nsp (ข้อมูลเวกเตอร์) และ raster (ข้อมูลราสเตอร์) เป็นแพ็กเกจทั่วไปที่ใช้สำหรับการวิเคราะห์เชิงพื้นที่\nsf (ข้อมูลเวกเตอร์) และ terra (ข้อมูลราสเตอร์) เป็นแพ็กเกจที่มาแทนที่และทันสมัยมากขึ้น\n\nโดยค่าเริ่มต้น data_guerry เป็นoutputประเภท sp แต่เราแปลงมันเป็นข้อมูลประเภท sf dataframe\ndataframes ประเภท sf ประกอบด้วยคอลัมน์ทางเรขาคณิต (คลาส sfc) และคุณลักษณะต่างๆ (เช่น non-spatial columns)\nวัตถุหรือoutputประเภท sfc เป็นวัตถุที่คล้ายกับรายการซึ่งประกอบด้วยเรขาคณิตแต่ละตัว (คลาส sfg) และข้อมูลเชิงพื้นที่ (เช่น ประเภทหรือมิติ)\nวัตถุหรือoutputประเภท sfg เป็นเมตริกซ์ที่ประกอบด้วยพิกัดเท่านั้น\n\n\n1st_sf(\n2    feature = c(1, 2),\n3    geometry =\n4        st_sfc(\n5            st_point(c(1, 1)),\n            st_point(c(1, 2)),\n          st_point(c(2, 2)),\n            st_point(c(2, 1))\n        )\n)\n\n\n1\n\nสร้าง sf dataframe\n\n2\n\nสร้าง feature column – ในทางปฏิบัติคือ regular non-spatial column\n\n3\n\nสร้าง geometry column ที่ประกอบด้วย sfc object\n\n4\n\nsfc = geometry + spatial metadata\n\n5\n\nsfg = raw geometries\n\n\n\n\nSimple feature collection with 4 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 2\nCRS:           NA\n  feature    geometry\n1       1 POINT (1 1)\n2       2 POINT (1 2)\n3       1 POINT (2 2)\n4       2 POINT (2 1)"
  },
  {
    "objectID": "06-mapping.html#ระบบจดอางอง",
    "href": "06-mapping.html#ระบบจดอางอง",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ระบบจุดอ้างอิง",
    "text": "ระบบจุดอ้างอิง\n\nข้อมูลเชิงพื้นที่ทั้งหมดต้องมีระบบการอ้างอิงพิกัด (CRS) เพื่อระบุตำแหน่งพิกัดบนโลก\nรายละเอียดเชิงฐานธรณีส่วนใหญ่ไม่จำเป็น แต่เสมอๆ มันดีที่ควรรู้ความแตกต่างระดับพื้นฐาน\n\nระบบการอ้างอิงพิกัดเชิงฐานธรณี (Geodetic CRS)\n\nใช้หน่วยมุม (องศา) เพราะมีพื้นฐานอยู่บนรูปทรงวงกลม\nส่วนใหญ่ใช้สำหรับการแสดงผลที่มีขนาดระดับโลกหรือระดับประเทศ\nตัวอย่าง: WGS84 (ระบบฐานธรณีโลก)\n\nระบบการอ้างอิงพิกัดที่ถูกฉาย (Projected CRS)\n\nใช้หน่วยเมตร (เมตร) เพราะมีพื้นฐานจากการฉายแบบของโลก\nส่วนใหญ่ใช้สำหรับการวิเคราะห์และการแสดงผลเชิงพื้นที่ที่มีความแม่นยำสูงในระดับภูมิภาคหรือระดับท้องที่\nตัวอย่าง: UTM (Universal Transversal Mercator)\n\n\n\n\n\n\nUTM (Universal Transversal Mercator) - ระบบพิกัดที่ถูกฉาย แต่ละโซนเป็น CRS"
  },
  {
    "objectID": "06-mapping.html#epsg-codes",
    "href": "06-mapping.html#epsg-codes",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "EPSG codes",
    "text": "EPSG codes\n\nCRS สามารถอ้างอิงได้โดยใช้รหัสตัวเลขที่เรียกว่ารหัส EPSG\n\nEPSG database: https://epsg.io/, e.g. EPSG code 4326: https://epsg.io/4326\n\n\n\nSome common CRS\n\n\nName\nEPSG code\nArea\nGeodetic?\nUse\n\n\n\n\nWorld Geodetic System 1984 (WGS84)\n4326\nWorld\nYes\nBasic geographic coordinates, common usage in GPS systems\n\n\nWGS 84 / Pseudo-Mercator\n3857\nWorld\nNo\nGoogle Maps, OpenStreetMap, general web mapping\n\n\nUTM zone 32N\n25832\nCentral Europe\nNo\nSpatial analysis and measuring in Central Europe\n\n\nLAEA Europe\n3035\nEurope\nNo\nMulti-purpose CRS developed by the EU"
  },
  {
    "objectID": "06-mapping.html#crs-ใน-r",
    "href": "06-mapping.html#crs-ใน-r",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "CRS ใน R",
    "text": "CRS ใน R\n\nเราจะทำงานกับ CRS ใน R อย่างไร\n\nแปลงเป็น dataframe แบบ sf: st_as_sf(..., crs = 4326)\nกำหนด CRS ให้กับ dataframe แบบ sf ที่มีอยู่แล้ว: st_crs(...) &lt;- 4326 หรือ st_set_crs(…, 4326)\nเปลี่ยนแปลง CRS ที่มีอยู่แล้วเป็น CRS ใหม่: st_transform(..., 4326)"
  },
  {
    "objectID": "06-mapping.html#การจดการกบชดขอมล-guerry",
    "href": "06-mapping.html#การจดการกบชดขอมล-guerry",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "การจัดการกับชุดข้อมูล Guerry",
    "text": "การจัดการกับชุดข้อมูล Guerry\n\nมาดูกันเรื่อง data_guerry และวิธีจัดการกับมันในรูปแบบ dataframe เชิงพื้นที่\nGuerry::gfrance85 มาในรูปแบบ sp dataframe ซึ่งถือว่าเก่า ดังนั้นเราต้องแปลงมัน\nชุดข้อมูลนี้ยังมี CRS ที่ไม่ถูกต้องด้วย ดังนั้นเราต้องแก้ไขมัน\n\n\n1data_guerry &lt;- Guerry::gfrance85 %&gt;%\n2  st_as_sf() %&gt;%\n3  as_tibble() %&gt;%\n4  st_as_sf(crs = 27572) %&gt;%\n5  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;% # drop columns\n  select(Region:Department, all_of(names(variable_names))) # select columns\n\n\n1\n\nGuerry::gfrance85 มาในรูปแบบวัตถุ sp และไม่มีข้อมูล CRS\n\n2\n\n… ดังนั้นเราแปลงมันเป็น dataframe แบบ sf\n\n3\n\nแปลงมันเป็น tibble เพื่อให้มันดูดีขึ้น(มั้ง)\n\n4\n\nสุดท้าย แปลงมันกลับไปเป็น sf และตั้งค่า CRS เป็น 25572 (ซึ่งเป็น CRS ของชุดข้อมูล Guerry เดิม)\n\n5\n\nที่นี่ เราเปลี่ยนรหัสภูมิภาคที่สามารถใช้สำหรับการรวมข้อมูลเชิงพื้นที่"
  },
  {
    "objectID": "06-mapping.html#การดำเนนการทางพนท",
    "href": "06-mapping.html#การดำเนนการทางพนท",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "การดำเนินการทางพื้นที่",
    "text": "การดำเนินการทางพื้นที่\n\nเพื่อทำการmapข้อมูล Guerry เพิ่มความน่าสนใจคือการดำเนินการรวมข้อมูลทางพื้นที่เพื่อเปรียบเทียบข้อมูลในระดับภูมิภาคทางภูมิศาสตร์\nการดำเนินการทางพื้นที่ เช่น การรวมข้อมูลทางพื้นที่ เป็นหนึ่งในข้อได้เปรียบหลักของข้อมูลทางพื้นที่เมื่อเปรียบเทียบกับข้อมูลปกติ\nใน Guerry เรามี2ระดับ: แผนก (ระดับเล็ก) และภูมิภาค (ระดับใหญ่)\nในช่วงต่อไปเราจะดำเนินการรวมข้อมูลทางพื้นที่ นอก ฟังก์ชันserver\n\n\ndata_guerry_region &lt;- data_guerry %&gt;%\n1    group_by(Region) %&gt;%\n2    summarise(across(\n        .cols = all_of(names(variable_names)),\n        function(x) {\n            if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n                sum(x)\n            } else {\n                mean(x)\n            }\n        }\n    ))\n\n\n1\n\nกำหนดกลุ่มตัวแปร (Region)\n\n2\n\nรวมตัวแปรและเรขาคณิตของ Guerry ตามตัวแปรกลุ่ม Region"
  },
  {
    "objectID": "06-mapping.html#ขอมลเชงพนท-guerry",
    "href": "06-mapping.html#ขอมลเชงพนท-guerry",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ข้อมูลเชิงพื้นที่ Guerry",
    "text": "ข้อมูลเชิงพื้นที่ Guerry\n\nคำถาม: เราสามารถบอกอะไรเกี่ยวกับชุดข้อมูล Guerry ในเรื่องของข้อมูลเชิงพื้นที่ได้บ้าง\n\n\ndata_guerry[\"Literacy\"]\n\nSimple feature collection with 85 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441\nProjected CRS: NTF (Paris) / Lambert zone II\n# A tibble: 85 × 2\n   Literacy                                                             geometry\n      &lt;int&gt;                                                   &lt;MULTIPOLYGON [m]&gt;\n 1       37 (((801150 2092615, 800669 2093190, 800688 2095430, 800780 2095795, …\n 2       51 (((729326 2521619, 729320 2521230, 729280 2518544, 728751 2517520, …\n 3       13 (((710830 2137350, 711746 2136617, 712430 2135212, 712070 2134132, …\n 4       46 (((882701 1920024, 882408 1920733, 881778 1921200, 881526 1922332, …\n 5       69 (((886504 1922890, 885733 1922978, 885479 1923276, 883061 1925266, …\n 6       27 (((747008 1925789, 746630 1925762, 745723 1925138, 744216 1925236, …\n 7       67 (((818893 2514767, 818614 2514515, 817900 2514467, 817327 2514945, …\n 8       18 (((509103 1747787, 508820 1747513, 508154 1747093, 505861 1746627, …\n 9       59 (((775400 2345600, 775068 2345397, 773587 2345177, 772940 2344780, …\n10       34 (((626230 1810121, 626269 1810496, 627494 1811321, 627681 1812424, …\n# ℹ 75 more rows"
  },
  {
    "objectID": "06-mapping.html#แบบฝกหด",
    "href": "06-mapping.html#แบบฝกหด",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "แบบฝึกหัด",
    "text": "แบบฝึกหัด\n\n\n\n\n\n\nแบบฝึกหัด 1\n\n\n\nดึงวัตถุ sfc ออกมาจากชุดข้อมูล Guerry ความแตกต่างระหว่าง sf กับ sfc คืออะไร\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nดูเอกสารคำสั่ง st_geometry()\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nst_geometry(data_guerry)\n\nวัตถุ sf เป็น dataframes ที่ประกอบด้วย non-spatial featureคอลัมน์ และgeometry columnที่มีวัตถุ sfc\nวัตถุ sfc คือการแสดงภาพของรูปทรงเชิงพื้นที่ พวกมันมีข้อมูล metadata เชิงพื้นที่ที่เกี่ยวข้องทั้งหมด\n\n\n\n\n\n\n\n\n\nแบบฝึกหัด 2\n\n\n\nดึงวัตถุ sfg ลำดับที่ห้าออกมาจากวัตถุ sfc จากแบบฝึกหัด 1 ความแตกต่างระหว่างสองวัตถุเหล่านี้คืออะไร\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nวัตถุที่มีคลาสเป็น sfc ทำงานเหมือนกับ listและสามารถแบ่งย่อยได้ในลักษณะเดียวกัน\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngeom &lt;- st_geometry(data_guerry)\ngeom[[1]]\n\nวัตถุ sfg ประกอบด้วยรูปทรงเชิงพื้นที่ขั้นพื้นฐานซึ่งประกอบไปด้วยพิกัดเท่านั้น และทางเรขาคณิต (เช่น วิธีเชื่อมต่อพิกัดเพื่อสร้างรูปหลายเหลี่ยม)\nวัตถุ sfc มีข้อมูล metadata เชิงพื้นที่ ซึ่งรวมถึง CRS ทำให้เราสามารถระบุตำแหน่งของพิกัดบนโลกได้\n\n\n\n\n\n\n\n\n\nแบบฝึกหัด 3\n\n\n\ndata_guerry ประกอบด้วยรูปหลายเหลี่ยมหลายรูปทรง เราจะแปลงรูปเหลี่ยมเหล่านี้เป็นรูปจุดได้อย่างไร ลองดูที่ การอ้างอิงฟังก์ชัน ของแพ็คเกจ sf และค้นหาฟังก์ชัน (มีคำตอบหลายรูปแบบ) ที่สามารถแปลงรูปเหลี่ยมเป็นจุดๆได้\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nการค้นหาด้วยคำว่า “จุด” สามารถให้เห็นฟังก์ชันที่เหมาะที่สุดสำหรับการทำงานนี้ แต่ยังมีเยอะหลายวิธี\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nst_point_on_surface(data_guerry) ส่งคืนจุดที่มั่นใจว่าอยู่บนรูปหลายเหลี่ยม\nst_centroid(data_guerry) ส่งคืนศูนย์กลางทางเรขาคณิตของรูปหลายเหลี่ยม\nst_cast(data_guerry, \"POINT\") หรือ st_cast(data_guerry, \"MULTIPOINT\")\nทั้งหมดมันส่งคืนข้อความเตือน! ทำไมถึงเป็นเช่นนั้น?\nst_sample(data_guerry, size = rep(1, nrow(data_guerry)))\nไม่ส่งคืนข้อความเตือน แต่เป็นแบบสุ่มและตัดทุกคุณสมบัติ\n\n\n\n\n\n\n\n\n\nแบบฝึกหัด 4\n\n\n\nในขณะนี้ dataframe Guerry มี CRS เป็น “NTF (Paris) / Lambert zone II” ซึ่งเป็นการเลือกใช้ที่ดีแล้ว แต่มี CRS อื่น ๆ ที่อาจเป็นตัวเลือกที่ดีสำหรับการทำแผนที่ในฝรั่งเศสที่แม่นยำอีกหรือไม่\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nจำระบบพิกัด UTM ไว้ เลื่อนขึ้นไปดู UTM zones ที่แล้ว\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nแม้ว่าจะมี CRS หลายตัวที่อาจเป็นตัวเลือกที่ดี แต่หนึ่งในการแก้ไขที่เราได้พูดถึงในworkshopนี้คือ UTM zones เมื่อดูที่ภาพของเขต UTM เราสามารถเห็นได้ว่า UTM 31N zones มันครอบคลุมพื้นที่ของฝรั่งเศสเกือบทั้งหมด \n\n\n\n\n\n\n\n\n\nแบบฝึกหัด 5\n\n\n\nแปลง dataframe Guerry ให้เป็น CRS ใหม่จากแบบฝึกหัดที่ 4\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nจำไว้ว่าเราเปิด https://epsg.io/ เพื่อค้นหารหัส EPSG ได้\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nโดยใช้ฟังก์ชันค้นหาจาก epsg.io เราสามารถระบุได้ว่ารหัส EPSG ที่ใช้แปลงชุดข้อมูล Guerry จาก Lambert zone II ไปยัง UTM zone 31N คือ 23031, 25831 หรือ 32631\n\n  st_transform(data_guerry, 23031)"
  },
  {
    "objectID": "06-mapping.html#การผสมผสาน-leaflet-ใน-shiny",
    "href": "06-mapping.html#การผสมผสาน-leaflet-ใน-shiny",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "การผสมผสาน Leaflet ใน Shiny",
    "text": "การผสมผสาน Leaflet ใน Shiny\n\nLeaflet ใน Shiny ทำงานเหมือนกับการแสดงผลประเภทอื่น ๆ เราต้องการ:\n\nผลลัพธ์ของ UI: leaflet::leafletOutput()\nฟังก์ชันการเรนเดอร์: leaflet::renderLeaflet()\n\nในแอพของเรา เราเพิ่มตัวสำรวจเชิงภูมิศาสตร์ของชุดข้อมูล Guerry\n\n\n1tabItem(\n  tabName = \"tab_map\",\n2  fluidRow(\n    column(\n      width = 12,\n      box(\n        id = \"tab_map_box\",\n        status = \"primary\",\n        headerBorder = FALSE,\n        collapsible = FALSE,\n        width = 12,\n3        leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n      ) # end box\n    ) # end column\n  ) # end fluidRow\n) # end tabItem\n\n\n1\n\nสร้างแท็บใหม่ชื่อว่า tab_map\n\n2\n\nเพิ่ม fluid row ที่มีคอลัมน์และกล่องที่ครอบคลุมทั้งหน้า\n\n3\n\nเพิ่มoutput ของ UI ที่จะรองรับแผนที่ของ leaflet ที่ครอบคลุมความกว้างทั้งหมดและมีความสูง 800 พิกเซล"
  },
  {
    "objectID": "06-mapping.html#หวใจของ-leaflet",
    "href": "06-mapping.html#หวใจของ-leaflet",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "หัวใจของ Leaflet",
    "text": "หัวใจของ Leaflet\n\nแพ็กเกจ leaflet ขึ้นกับฟังก์ชันหลัก leaflet() ซึ่งสร้างแผนที่เปล่า\nฟังก์ชันเพิ่มเติมทุกฟังก์ชันสามารถเพิ่มเข้าไปเสริมส่วนการแสดงผลแผนที่เพิ่มเติมได้ (คล้ายกับ ggplot2)\n\naddProviderTiles() เพิ่มแผนที่พื้นฐาน, ในกรณีนี้เราใช้แผนที่พื้นฐานสี่แผนที่ที่สามารถเลือกได้\naddLayersControl() เพิ่มปุ่มที่ช่วยให้เราสามารถสลับระหว่างlayerข้อมูลแผนที่\nsetView() ตั้งค่าศูนย์กลางและระดับซูมของมุมมองแผนที่\n\n\n\n1output$tab_map_map &lt;- leaflet::renderLeaflet({\n2        leaflet() %&gt;%\n3            addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n            addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n            addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n            addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n4            addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                                                            \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n5            setView(lng = 3, lat = 47, zoom = 5)\n})\n\n\n1\n\nเติมผลลัพธ์ tab_map_map ด้วยแผนที่ leaflet โดยใช้ renderLeaflet\n\n2\n\nเพิ่มแผนที่เปล่าโดยใช้ leaflet()\n\n3\n\nเพิ่มแผนที่พื้นฐานหลายแผนที่: OpenStreetMap, OpenTopoMap, Stamen และortho photos จาก geo portal ฝรั่งเศส\n\n4\n\nเพิ่มปุ่มเพื่อควบคุมว่าต้องการแสดงแผนที่พื้นฐานอันไหน\n\n5\n\nตั้งค่าศูนย์กลางของแผนที่และระดับซูมเริ่มต้น"
  },
  {
    "objectID": "06-mapping.html#full-code",
    "href": "06-mapping.html#full-code",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Full code",
    "text": "Full code\n\n\nFull code including an empty map\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    leaflet() %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5)\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-mapping.html#ปรบแตงเฉพาะสำหรบแผนท-leaflet",
    "href": "06-mapping.html#ปรบแตงเฉพาะสำหรบแผนท-leaflet",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ปรับแต่งเฉพาะสำหรับแผนที่ Leaflet",
    "text": "ปรับแต่งเฉพาะสำหรับแผนที่ Leaflet\n\nตัวแปรถูกส่งผ่านโดยใช้สูตร (นั่นคือ แทนที่จะเขียน data_guerry$Literacy เราจะเขียน ~Literacy)\nโดยค่าเริ่มต้น Leaflet รองรับเฉพาะ WGS84 (EPSG:4326) เป็น CRS\nสีของข้อมูลจะถูกตั้งค่าโดยใช้ฟังก์ชันที่กำหนดเองซึ่งถูกสร้างในฟังก์ชัน:\n\ncolorNumeric() สำหรับแผนที่ค่าต่อเนื่อง\ncolorBin() สำหรับแผนที่ค่าต่อเนื่องที่ถูกแบ่งออกเป็นช่วงที่เท่ากัน\ncolorQuantile() สำหรับแผนที่ค่าต่อเนื่องที่ถูกแบ่งออกเป็นช่วงตามควอไทล์\ncolorFactor() สำหรับแผนที่ค่าหมวดหมู่\n\nhighlightOptions() เพิ่มเอฟเฟคเด่นสว่างเมื่อวางเม้าส์เหนือรูปหลายเหลี่ยม\n\n\noutput$tab_map_map &lt;- leaflet::renderLeaflet({\n1    pal &lt;- colorNumeric(palette = \"Reds\", domain = NULL)\n    \n2    leaflet(data = st_transform(data_guerry, 4326)) %&gt;%\n3        addProviderTiles(\"OpenStreetMap.France\") %&gt;%\n4        setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n5        addPolygons(\n6            fillColor = ~params$pal(Literacy),\n7            fillOpacity = 0.7,\n            weight = 1,\n            color = \"black\",\n            opacity = 0.5,\n8            highlightOptions = highlightOptions(\n                weight = 2,\n                color = \"black\",\n                opacity = 0.5,\n                fillOpacity = 1,\n                bringToFront = TRUE,\n                sendToBack = TRUE\n            )\n        ) %&gt;%\n9        addLegend(\n            position = \"bottomright\",\n10            pal = pal,\n            values = ~Literacy,\n            opacity = 0.9,\n            title = \"Literacy\",\n11            labFormat = labelFormat(suffix = \" %\")\n        )\n})\n\n\n1\n\nกำหนดสีสำหรับการสร้างแผนที่ ที่นี่เราต้องการแสดงค่าที่ต่อเนื่องในสีแดง ผลลัพธ์คือฟังก์ชันที่เรียกว่า pal() ซึ่งเราจะใช้ในภายหลัง\n\n2\n\nสร้างแผนที่เปล่า เพิ่มข้อมูลทางภูมิศาสตร์ โปรดทราบว่า Leaflet โดยค่าเริ่มต้นรับเฉพาะข้อมูลทางภูมิศาสตร์ที่มี EPSG:4326 สำหรับข้อมูลอื่นๆ โปรดอ้างอิงถึง leaflet::leafletCRS() แต่ไม่ควรคาดหวังว่าจะเข้าใจทุกอย่างที่เกิดขึ้น 555\n\n3\n\nเพิ่มแผนที่พื้นฐานของ OpenStreetMap ฝรั่งเศส\n\n4\n\nกำหนดศูนย์กลางและระดับการซูมของมุมมองเริ่มต้น\n\n5\n\nฟังก์ชัน addPolygons() เพิ่มรูปหลายเหลี่ยมลงในแผนที่ Leaflet\n\n6\n\nfillColor กำหนดวิธีการระบายสีของรูปหลายเหลี่ยม เราส่งสูตรที่มีการเรียกใช้ฟังก์ชัน pal() ที่เราสร้างขึ้น (ดูข้อ 2) เพื่อแมปสีกับตัวแปร Literacy\n\n7\n\nเราสามารถเพิ่มพารามิเตอร์เพิ่มเติมที่ควบคุมการแสดงผลของแผนที่ เช่น ความทึบแสง, สี หรือความหนาของเส้น (น้ำหนัก)\n\n8\n\nhighlightOptions() ช่วยให้สามารถเพิ่มเอฟเฟ็คเด่นสว่างเมื่อวางเม้าส์เหนือรูปหลายเหลี่ยม\n\n9\n\nโดยใช้ addLegend() เราเพิ่มคำอธิบายลงในแผนที่ Leaflet ที่มุมขวาล่าง\n\n10\n\naddLegend() รับค่าในลักษณะเดียวกับ addPolygons(): pal รับฟังก์ชันเก็บสีที่สร้างขึ้นและ values รับสูตรที่มีชื่อคอลัมน์ในinput dataset\n\n11\n\nสุดท้าย labelFormat() ช่วยให้เราสามารถเปลี่ยนรูปแบบของป้ายคำอธิบาย หากต้องการระบุว่าตัวเลขเป็นเปอร์เซ็นต์ เมตร หรืออื่น"
  },
  {
    "objectID": "06-mapping.html#full-code-1",
    "href": "06-mapping.html#full-code-1",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Full code",
    "text": "Full code\n\n\nFull code including a simple Leaflet map\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    pal &lt;- colorNumeric(palette = \"Reds\", domain = NULL)\n    \n    leaflet(data = st_transform(data_guerry, 4326)) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\", \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = ~pal(Literacy),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = pal,\n        values = ~Literacy,\n        opacity = 0.9,\n        title = \"Literacy\",\n        labFormat = labelFormat(suffix = \" %\")\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-mapping.html#แบบฝกหด-6",
    "href": "06-mapping.html#แบบฝกหด-6",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "แบบฝึกหัด",
    "text": "แบบฝึกหัด\n\n\n\n\n\n\nแบบฝึกหัด 1\n\n\n\nแบ่งค่าที่แสดงบนแผนที่ออกเป็นสิบช่วง (เช่น แบ่งเป็น 10 ช่วงที่มีขนาดเท่ากัน)\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nดูเอกสารของ ?colorNumeric() โดยเฉพาะที่เกี่ยว color* อื่นๆ\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nค่าLegendสามารถแบ่งช่วงได้โดยใช้ฟังก์ชัน colorBin() หรือ colorQuantile() เนื่องจากเราต้องการแสดงแบบ deciles เราต้องใช้ฟังก์ชัน colorQuantile() และเพิ่มจำนวนช่วงเป็น 10 ช่วง\nแทนที่จะใช้ colorNumeric() เพื่อสร้างฟังก์ชันแพลเล็ต\n\npal &lt;- colorNumeric(palette = \"Reds\", domain = NULL)\n\n… เราสามารถเปลี่ยนมันได้ด้วย colorQuantile():\n\npal &lt;- colorQuantile(palette = \"Reds\", domain = NULL, n = 10)\n\n\n\n\n\n\n\n\n\n\nแบบฝึกหัด 2\n\n\n\nให้ค่าความทึบของรูปหลายเหลี่ยมเปลี่ยนตามค่าของตัวแปร Commerce ในชุดข้อมูล Guerry และเพิ่มป้ายกำกับที่แสดงค่าของ Literacy ในรูปแบบ: “value: &lt;literacy value here&gt;”\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nจำไว้ว่า data columns สามารถระบุได้โดยใช้สัญลักษณ์ ~ นี่ยังใช้กับการเรียกฟังก์ชันทั้งหมดด้วย\nหากยังไม่แน่ใจเกี่ยวกับวิธีควบคุมความทึบและป้ายกำกับ(opacity and labels) ดูที่ ?addPolygons().\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nโดยใช้สูตรของ Leaflet เราสามารถปรับขนาดอาร์กิวเมนต์ในฟังก์ชัน add* ตามที่เราต้องการ ในการปรับขนาดความทึบของการเติมสีโดยใช้ตัวแปร Commerce เราสามารถเพิ่ม fillOpacity = ~Commerce / 100 เราหารด้วย 100 เพื่อปรับตัวแปร Commerce ให้เข้ากับขนาดของค่าความทึบ (โดยปกติแล้วคือ 0-1)\nในทางเดียวกัน เราสามารถให้ป้ายกำกับเมื่อวางเมาส์ทับ\n\n  leaflet(data = st_transform(data_guerry, 4326)) %&gt;%\n    addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n    addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n    addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n    addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n    addLayersControl(baseGroups = c(\"OSM\", \"OTM\", \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n    setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n    addPolygons(\n      fillColor = ~pal(Literacy),\n1      fillOpacity = ~Commerce / 100,\n      weight = 1,\n      color = \"black\",\n      opacity = 0.5,\n2      label = ~paste0(\"value: \", Literacy),\n      highlightOptions = highlightOptions(\n        weight = 2,\n        color = \"black\",\n        opacity = 0.5,\n        fillOpacity = 1,\n        bringToFront = TRUE,\n        sendToBack = TRUE\n      )\n    ) %&gt;%\n    addLegend(\n      position = \"bottomright\",\n      pal = pal,\n      values = ~Literacy,\n      opacity = 0.9,\n      title = \"Literacy\",\n      labFormat = labelFormat(suffix = \" %\")\n1    )\n\n\n1\n\nปรับขนาดความทึบของการเติมสีโดยใช้ตัวแปร Commerce เนื่องจากความทึบถูกวัดด้วยเปอร์เซ็นต์และ Commerce ถูกวัดตามค่าที่ประมาณ 1-100 เราต้องปรับขนาดของ Commerce โดยการหารด้วย 100\n\n2\n\nภายในการแสดงผลด้วยสูตร เราสามารถใส่ทุกการแสดงผลของ R ดังนั้น เพื่อรวมค่าและข้อความเราสามารถใช้ paste0() บนตัวแปรได้เลย\n\n\n\n\n\n\n\n\n\n\n\n\n\nแบบฝึกหัด 3\n\n\n\nเราจะทำอย่างไรเพื่อเพิ่มบรรทัดที่สองในป้าย hover (้hover label) ที่แสดงค่าสำหรับตัวแปร Commerce หรือ เราจะเพิ่มป้าย hover ด้วยรูปแบบด้านล่างนี้อย่างไร:\nLiteracy: &lt;literacy value here&gt;\nCommerce: &lt;commerce value here&gt;\n\n\n\n\n\n\n\n\nTip\n\n\n\nการขึ้นบรรทัดใหม่แบบปกติของ R (\\n) ไม่สามารถใช้งานได้ใน Shiny ทำไมเช่นนั้น เราสามารถใช้อะไรแทนได้บ้าง (ลองนึกเกี่ยวกับแท็ก HTML)\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nการขึ้นบรรทัดใหม่แบบปกติของ R ไม่สามารถใช้งานได้เนื่องจาก Shiny apps เป็นเอกสาร HTML หัวข้อที่ 3 เราได้พูดถึงแท็ก HTML รวมถึงฟังก์ชัน br() ซึ่งสร้างแท็ก HTML &lt;br/&gt; โค้ดสำหรับป้ายกำกับที่มีสองบรรทัดอาจดูเป็นแบบนี้:\n\nleaflet() %&gt;%\n  addPolygons(\n    ..., # rest of the arguments\n    label = ~lapply(paste0(\"Literacy: \", Literacy, br(), \"Commerce: \", Commerce), HTML),\n  )\n\nNote: หากเราจัดการกับเวกเตอร์ตัวอักษรที่มี HTML เราต้องห่อด้วยฟังก์ชัน HTML() เพื่อให้ R รู้ว่ากำลังจัดการกับ HTML"
  },
  {
    "objectID": "06-mapping.html#reactive-ui",
    "href": "06-mapping.html#reactive-ui",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Reactive UI",
    "text": "Reactive UI\n\nเราเพิ่มส่วนประกอบที่สามารถตอบสนองต่อการเปลี่ยนแปลงในแอพของเราได้ 3 แบบคือ:\n\nselectInput() เพื่อเลือกตัวแปรที่ต้องการแสดงบนแผนที่\nradioButtons() เพื่อเลือกระดับการรวมข้อมูล สำหรับแผนกหรือภูมิภาคต่างๆ\nselectInput() เพื่อเลือกโทนสีที่ต้องการ\n\nนอกจากนี้ยังเพิ่ม UI output ใหม่ (tab_map_desc) ซึ่งใช้ในการอธิบายตัวแปรที่ถูกเลือก\n\n\n# Define selectable palettes: All sequential palettes + viridis\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n\ntabItem(\n    tabName = \"tab_map\",\n    fluidRow(\n1        column(\n            width = 4,\n            box(\n                title = \"Data selection\",\n                status = \"primary\",\n                width = 12,\n2                selectInput(\n                    \"tab_map_select\",\n                    label = \"Select a variable\",\n                    choices = setNames(variable_names, names(variable_names))\n                )\n            ),\n3            box(\n                title = \"Map configuration\",\n                status = \"primary\",\n                width = 12,\n                radioButtons(\n                    \"tab_map_aggr\",\n                    label = \"Aggregation level\",\n                    choices = c(\"Departments\", \"Regions\"),\n                    selected = \"Departments\"\n                ),\n                selectInput(\n                    \"tab_map_pal\",\n                    label = \"Color palette\",\n                    choices = pals,\n                    selected = \"Reds\"\n                ) # end input\n            ) # end box\n        ), # end column\n        column(\n            width = 8,\n            box(\n                id = \"tab_map_box\",\n                status = \"primary\",\n                headerBorder = FALSE,\n                collapsible = FALSE,\n                width = 12,\n                leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n        ) # end column\n    ) # end fluidRow\n) # end tabItem\n\n\n1\n\nก่อนหน้านี้ แท็บบนแผนที่ประกอบด้วยคอลัมน์เดียวกับกล่อง. ตอนนี้เราเพิ่มคอลัมน์อีกหนึ่งคอลัมน์ซึ่งใช้พื้นที่ 1/3 ของหน้าเพื่อเพิ่มข้อมูลป้อนของ UI\n\n2\n\nเพิ่มเมนูแบบเลื่อนลงที่เลือกตัวแปรที่จะแสดงบนแผนที่\n\n3\n\nเพิ่มกล่องที่สอง เนื่องจากทั้งสองกล่องมีความกว้าง 12"
  },
  {
    "objectID": "06-mapping.html#ในสวนของ-server",
    "href": "06-mapping.html#ในสวนของ-server",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ในส่วนของ server",
    "text": "ในส่วนของ server\n\nในฟังก์ชันเซิร์ฟเวอร์ เราต้องทำหลายอย่าง:\n\nนำที่เลือกไว้ไปใช้งาน\nนำpaletteที่เลือกไปใช้งาน\nเปลี่ยน hard code เป็น adaptive code\n\n\n\n    # Select polygon based on aggregation level\n1    poly &lt;- reactive({\n        if (identical(input$tab_map_aggr, \"Regions\")) {\n            data_guerry_region\n        } else {\n            data_guerry\n        }\n    })\n    \n    # Select palette based on input\n2    palette &lt;- reactive({\n        pal &lt;- input$tab_map_pal\n        if (pal %in% pals$Viridis) {\n            pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n        }\n        pal\n    })\n    \n    # Compile parameters for leaflet rendering\n3    params &lt;- reactive({\n        poly &lt;- st_transform(poly(), 4326)\n        pal &lt;- palette()\n        var &lt;- input$tab_map_select\n\n        values &lt;- as.formula(paste0(\"~\", var))\n        pal &lt;- colorNumeric(palette = pal, domain = NULL)\n\n        list(\n            poly = poly,\n            var = var,\n            pal = pal,\n            values = values\n        )\n    })\n    \n    # Render leaflet for the first time\n    output$tab_map_map &lt;- leaflet::renderLeaflet({\n        # Isolate call to params() to prevent render function to be executed\n        # every time params() is invalidated. No dependency is made.\n4        params &lt;- params()\n        leaflet(data = params$poly) %&gt;%\n            addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n            addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n            addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n            addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n            addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                                                            \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n            setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n            addPolygons(\n                fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n                fillOpacity = 0.7,\n                weight = 1,\n                color = \"black\",\n                opacity = 0.5,\n                highlightOptions = highlightOptions(\n                    weight = 2,\n                    color = \"black\",\n                    opacity = 0.5,\n                    fillOpacity = 1,\n                    bringToFront = TRUE,\n                    sendToBack = TRUE\n                )\n            ) %&gt;%\n            addLegend(\n                position = \"bottomright\",\n                pal = params$pal,\n                values = params$values,\n                opacity = 0.9\n            )\n    })\n\n\n1\n\nในการแสดงผลตอบสนองที่เรียกว่า poly() เราจับระดับการรวมที่เลือกและตัดสินใจว่าจะใช้ data_guerry ต้นฉบับหรือตัวแปรที่ถูกรวมแล้ว data_guerry_region\n\n2\n\nในการแสดงผลตอบสนองที่เรียกว่า palette() เราจับเก็บพาเลตที่เลือกและจับคู่กับชื่อพาเลตที่มีอยู่\n\n3\n\nเรารวมทุกข้อมูลinputsในการแสดงผลตอบสนองที่เรียกว่า params() ที่เราจัดการข้อมูลที่เหลือก่อนนำinput dataสู่การทำแผนที่ leaflet\n\n4\n\nเราทำแผนที่และแทนที่ข้อมูลที่เขียนก่อนหน้าด้วยreactive dataใหม่ของเรา ซึ่งรวมถึงinput dataframeที่ตอนนี้คือ params$poly, สีที่เติมตอนนี้เป็นสูตรที่มาจากฟังก์ชันพาเลตและตัวแปรที่เลือก และในที่สุดพาเลตและค่าที่จำเป็นสำหรับตำแหน่งเส้นสีที่ต้องการในสัญลักษณ์ (legend)"
  },
  {
    "objectID": "06-mapping.html#code-ตวเตม",
    "href": "06-mapping.html#code-ตวเตม",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "code ตัวเต็ม",
    "text": "code ตัวเต็ม\n\n\nFull code including a reactive Leaflet map\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              )\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n\n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    params &lt;- params()\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-mapping.html#exercises",
    "href": "06-mapping.html#exercises",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nแบบฝึกหัด 1\n\n\n\nเพิ่มสไลเดอร์ลงในกล่องการกำหนดค่าแผนที่เพื่อเปลี่ยนความทึบของรูปหลายเหลี่ยมที่แมปไว้.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nคุณสามารถสร้างการป้อนข้อมูลแบบสไลเดอร์โดยใช้ shiny::sliderInput()\nอย่าลืมขั้นตอนการทำงานที่เราใช้มาก่อนเพื่อนำเข้าป้อนข้อมูล UI ใหม่:\n\nสร้างตัว input UI และกำหนด ID ของ inputs\nใช้ ID ของinputsเพื่อเข้าถึงค่าที่เลือกในฝั่งเซิร์ฟเวอร์\nใช้ค่าinputในการคำนวณ ในฝั่งเซิร์ฟเวอร์ เช่นเป็นอาร์กิวเมนต์สำหรับการเรียกใช้ฟังก์ชัน\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nในส่วนของ UI เราเพิ่ม sliderInput() และกำหนดค่า id ให้เป็น tab_map_slider และตั้งชื่อป้ายกำกับ(label)เป็น “Opacity” เราจำกัดค่าให้เป็นค่าระหว่าง 0 และ 1 เพื่อให้สอดคล้องกับค่าที่เป็นไปได้\n\nfluidRow(\n  column(\n    #### Inputs(s) ----\n    width = 4, # must be between 1 and 12\n    box(\n      title = \"Data selection\",\n      status = \"primary\",\n      width = 12,\n      selectInput(\n        \"tab_map_select\",\n        label = \"Select a variable\",\n        choices = setNames(names(variable_names), variable_names)\n      )\n    ),\n    box(\n      title = \"Map configuration\",\n      status = \"primary\",\n      width = 12,\n      radioButtons(\n        \"tab_map_aggr\",\n        label = \"Aggregation level\",\n        choices = c(\"Departments\", \"Regions\"),\n        selected = \"Departments\"\n      ),\n      selectInput(\n        \"tab_map_pal\",\n        label = \"Color palette\",\n        choices = pals,\n        selected = \"Reds\"\n      ),\n      sliderInput(\n        \"tab_map_slider\",\n        label = \"Opacity\",\n        min = 0,\n        max = 1,\n        value = 0.7,\n        step = 0.05\n      )\n    ) # end box\n  ), # end column\n  column(\n    #### Output(s) ----\n    width = 8,\n    box(\n      id = \"tab_map_box\",\n      status = \"primary\",\n      headerBorder = FALSE,\n      collapsible = FALSE,\n      width = 12,\n      leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n    ) # end box\n  ) # end column\n) # end fluidRow\n\n\n1\n\nslider input อันใหม่\n\n\n\n\nในฝั่งเซิร์ฟเวอร์ เราเพียงแค่เพิ่มป้อนข้อมูลใหม่เป็นค่าอาร์กิวเมนต์สำหรับ fillOpacity ใน addPolygons()\n\nleaflet(data = params$poly) %&gt;%\n  addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n  addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n  addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n  addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n  addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                  \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n  setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n  addPolygons(\n    fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n1    fillOpacity = input$tab_map_slider,\n    weight = 1,\n    color = \"black\",\n    opacity = 0.5,\n    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"black\",\n      opacity = 0.5,\n      fillOpacity = 1,\n      bringToFront = TRUE,\n      sendToBack = TRUE\n    )\n  ) %&gt;%\n  addLegend(\n    position = \"bottomright\",\n    pal = params$pal,\n    values = params$values,\n    opacity = 0.9\n  )\n\n\n1\n\ninputใหม่ถูกใช้เป็นอาร์กิวเมนต์เพื่อระบุความทึบของสีที่เติม"
  },
  {
    "objectID": "06-mapping.html#เตรยมขอมลบรบท",
    "href": "06-mapping.html#เตรยมขอมลบรบท",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "เตรียมข้อมูลบริบท",
    "text": "เตรียมข้อมูลบริบท\n\nมันเป็นประโยชน์ที่จะเตรียมข้อมูลก่อนที่เราจะนำมาใช้\nแทนที่จะพึ่งแต่ switch() ที่ซับซ้อน เราสร้าง listก่อนที่จะเริ่มรันเซิร์ฟเวอร์\nlist ประกอบด้วยหัวข้อ คำอธิบาย สัญลักษณ์และหน่วย\nแต่ละองค์ประกอบในlistสามารถเข้าถึงได้โดยใช้ชื่อตัวแปรเพื่อเรียกใช้ในรูปแบบreactive\n\n\n\n\n\n\n\nTip\n\n\n\nสำหรับข้อมูลที่ใหญ่ การวางไว้นอกไฟล์ codeหลักอาจเป็นไอเดียที่ดีเพื่อให้อ่านง่ายขึ้น\n\n\n\n\nCreate a list with context information\nlist(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Insturction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836),De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km^2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)"
  },
  {
    "objectID": "06-mapping.html#เพมคำอธบายตวแปร",
    "href": "06-mapping.html#เพมคำอธบายตวแปร",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "เพิ่มคำอธิบายตัวแปร",
    "text": "เพิ่มคำอธิบายตัวแปร\n\nเราเพิ่ม ouput ใหม่เพื่อให้ได้คำอธิบายสั้น ๆ เกี่ยวกับตัวแปรที่เลือกและแหล่งข้อมูล\noutputของ UI ชื่อ tab_map_desc สามารถรองรับoutputแบบ HTML ได้\n\n\ntabItem(\n    tabName = \"tab_map\",\n    fluidRow(\n        column(                                     \n            width = 4,                                \n            box(                                      \n                title = \"Data selection\",               \n                status = \"primary\",                     \n                width = 12,                             \n                selectInput(                            \n                    \"tab_map_select\",                         \n                    label = \"Select a variable\",          \n                    choices = setNames(variable_names, names(variable_names))\n                ),                                      \n1                uiOutput(\"tab_map_desc\")\n            ),\n            box(                                      \n                title = \"Map configuration\",            \n                status = \"primary\",                     \n                width = 12,                             \n                radioButtons(                           \n                    \"tab_map_aggr\",                           \n                    label = \"Aggregation level\",          \n                    choices = c(\"Departments\", \"Regions\"),\n                    selected = \"Departments\"              \n                ),                                      \n                selectInput(                            \n                    \"tab_map_pal\",                            \n                    label = \"Color palette\",              \n                    choices = pals,                       \n                    selected = \"Reds\"                     \n                ) # end input\n            ) # end box\n        ), # end column\n        column(\n            width = 8,\n            box(\n                id = \"tab_map_box\",\n                status = \"primary\",\n                headerBorder = FALSE,\n                collapsible = FALSE,\n                width = 12,\n                leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n        ) # end column\n    ) # end fluidRow\n) # end tabItem\n\n\n1\n\nเพิ่มoutput UI ด้วย ID tab_map_desc นี่คือส่วนที่คำอธิบายตัวแปรจะถูกแทรกลงไป"
  },
  {
    "objectID": "06-mapping.html#render-context",
    "href": "06-mapping.html#render-context",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Render context",
    "text": "Render context\n\n  # Add a variable description\n1  output$tab_map_desc &lt;- renderUI({\n    HTML(txts[[input$tab_map_select]]$desc)\n  })\n\n    # Select polygon based on aggregation level (B)\n    poly &lt;- reactive({\n        if (identical(input$tab_map_aggr, \"Regions\")) {\n            data_guerry_region\n        } else {\n            data_guerry\n        }\n    })\n    \n    # Select palette based on input (C)\n    palette &lt;- reactive({\n        pal &lt;- input$tab_map_pal\n        if (pal %in% pals$Viridis) {\n            pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n        }\n        pal\n    })\n    \n    # Compile parameters for leaflet rendering (D)\n    params &lt;- reactive({\n        poly &lt;- st_transform(poly(), 4326)\n        pal &lt;- palette()\n        var &lt;- input$tab_map_select\n        \n        values &lt;- as.formula(paste0(\"~\", var))\n        pal &lt;- colorNumeric(palette = pal, domain = NULL)\n        \n        list(\n            poly = poly,\n            var = var,\n            pal = pal,\n            values = values,\n            labels = labels\n        )\n    })\n    \n    # Render leaflet for the first time\n    output$tab_map_map &lt;- leaflet::renderLeaflet({\n        # Isolate call to params() to prevent render function to be executed\n        # every time params() is invalidated. No dependency is made.\n        params &lt;- params()\n        leaflet(data = params$poly) %&gt;%\n            addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n            addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n            addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n            addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n            addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                                                            \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n            setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n            addPolygons(\n                fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n                fillOpacity = 0.7,\n                weight = 1,\n                color = \"black\",\n                opacity = 0.5,\n                highlightOptions = highlightOptions(\n                    weight = 2,\n                    color = \"black\",\n                    opacity = 0.5,\n                    fillOpacity = 1,\n                    bringToFront = TRUE,\n                    sendToBack = TRUE\n                )\n            ) %&gt;%\n            addLegend(\n                position = \"bottomright\",\n                pal = params$pal,\n                values = params$values,\n                opacity = 0.9,\n2                title = txts[[params$var]]$lgd,\n                labFormat = labelFormat(suffix = txts[[params$var]]$unit)\n            )\n    })\n\n\n1\n\nเพื่อสร้าง UI เราเรียกใช้ฟังก์ชัน renderUI() เราสามารถเข้าถึงlistที่เราสร้างไว้ก่อนเพื่อเข้าถึงคำอธิบายของตัวแปรที่เลือก\n\n2\n\nในทางเดียวกันเราสามารถเพิ่มชื่อและหน่วยไปที่legendด้วยอาร์กิวเมนต์ title และ labFormat ใน addLegend()\n\n\n\n\n\noutput ดูสวยงามขึ้นอย่างน่าพอใจ และแน่นอนว่ามีข้อมูลเพิ่มเติมที่ทำให้เข้าใจแผนที่มากขึ้น"
  },
  {
    "objectID": "06-mapping.html#full-code-2",
    "href": "06-mapping.html#full-code-2",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Full code",
    "text": "Full code\n\n\nFull code including a reactive Leaflet map with context descriptions\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    params &lt;- params()\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-mapping.html#วธการเพมปาย-labels",
    "href": "06-mapping.html#วธการเพมปาย-labels",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "วิธีการเพิ่มป้าย labels",
    "text": "วิธีการเพิ่มป้าย labels\n\nเพิ่มป้ายlabelsเองไม่ใช่งานยาก: เราสามารถให้ข้อมูลแบบ vector ได้\nป้ายlabelจะประกอบด้วยค่าเดียวโดยไม่มีข้อมูลอื่น\n\n\nleaflet() %&gt;%\n    addPolygons(\n        ..., # rest of the args\n        label = ~values\n    )"
  },
  {
    "objectID": "06-mapping.html#การจดรปแบบปายlabels-ขนสงโดยใช-html",
    "href": "06-mapping.html#การจดรปแบบปายlabels-ขนสงโดยใช-html",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "การจัดรูปแบบป้ายlabels ขั้นสูงโดยใช้ HTML",
    "text": "การจัดรูปแบบป้ายlabels ขั้นสูงโดยใช้ HTML\n\nที่มีนี้เพียงพอแต่ไม่ค่อยสวยงามและมันไม่ได้ให้ข้อมูลที่สำคัญอย่างชื่อภูมิภาค\nในแอพของเรา เราใช้การจัดวางเป็นตารางที่ประกอบด้วยข้อมูลเกี่ยวกับภูมิภาค แผนก และค่าตัวแปร\nเราสามารถสร้างตาราง HTML ทั่วไปโดยใช้แท็ก table (tags$table) พร้อมกับ tr (แถวของตาราง, tags$tr) และ td (ข้อมูลของตาราง, tags$td)\n\n\n1tags$table(\n2    tags$tr(\n3        tags$td(\"Cell 1\"),\n        tags$td(\"Cell 2\"),\n        tags$td(\"Cell 3\")\n    ),\n    tags$tr(\n        tags$td(\"Cell 4\"),\n        tags$td(\"Cell 5\"),\n        tags$td(\"Cell 6\")\n    ),\n    tags$tr(\n        tags$td(\"Cell 7\"),\n        tags$td(\"Cell 8\"),\n        tags$td(\"Cell 9\")\n    )\n)\n\n\n1\n\nกำหนดตารางแวดล้อม\n\n2\n\nกำหนดแถวของตาราง\n\n3\n\nกำหนดเซลข้อมูล 3เซลล์ \n\n\n\n\n\n\n\nCell 1\nCell 2\nCell 3\n\n\nCell 4\nCell 5\nCell 6\n\n\nCell 7\nCell 8\nCell 9\n\n\n\n\n\n\nในช่วงต่อไปเราใช้ mapply() เพื่อจัดให้ ภูมิภาค แผนก และค่าตัวแปรเข้าสู่ตารางที่จัดรูปแบบเรียบร้อย:\n\n\nparams &lt;- reactive({\n  poly &lt;- st_transform(poly(), 4326)\n  pal &lt;- palette()\n  var &lt;- input$tab_map_select\n\n  values &lt;- as.formula(paste0(\"~\", var))\n  pal &lt;- colorNumeric(palette = pal, domain = NULL)\n  \n1  reg &lt;- poly[[\"Region\"]]\n  dep &lt;- poly[[\"Department\"]]\n  val &lt;- poly[[var]]\n  \n  # If aggregated on region level, department will be NULL\n2  if (is.null(dep)) {\n    dep &lt;- rep(NA, nrow(poly))\n  }\n\n  # Create labels that are nicely aligned in a grid\n  # If aggregated on region level, omit department name (because it is NULL)\n3  labels &lt;- mapply(\n    function(reg, dep, val) {\n4      HTML(as.character(tags$table(\n        # Add region row\n5        tags$tr(\n          style = \"line-height: 10px\", # more compact layout\n6          tags$td(tags$b(\"Region: \")),\n7          tags$td(reg)\n        ),\n        # Add department row if available\n        if (!is.na(dep)) {\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Department: \")),\n            tags$td(dep)\n          )\n        },\n        # Add value row\n        tags$tr(\n          style = \"line-height: 10px\",\n          tags$td(tags$b(paste0(txts[[var]]$lgd, \": \"))),\n          tags$td(round(val, 2))\n        )\n      )))\n    },\n    reg = reg, dep = dep, val = val,\n    SIMPLIFY = FALSE,\n    USE.NAMES = FALSE\n  )\n\n  list(\n    poly = poly,\n    var = var,\n    pal = pal,\n    values = values,\n8    labels = labels\n  )\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    params &lt;- params()\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n9        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = txts[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = txts[[params$var]]$unit)\n      )\n  })\n})\n\n\n1\n\nเก็บข้อมูลที่เกี่ยวข้องทั้งหมด รวมถึง: ชื่อภูมิภาค ชื่อแผนก และค่าตัวแปร\n\n2\n\nในกรณีที่แผนที่ถูกรวมกัน ชื่อแผนกจะเป็น NULL เพื่อป้องกันการเกิดข้อผิดพลาดในขั้นตอนถัดไปเราจะแทนที่ด้วย NA โดยมีความยาวเท่ากับเวกเตอร์อื่น ๆ\n\n3\n\nจากนั้นเราจะใช้ฟังก์ชันบนเวกเตอร์ ทั้ง 3 พร้อมกันเพื่อที่เราจะสามารถทำงานกับค่าป้ายชื่อทั้งหมดในเวลาเดียวกันได้\n\n4\n\nสร้างสภาพแวดล้อมของตาราง\n\n5\n\nสร้างแถว3แถว คือ แถวหนึ่งสำหรับแต่ละเวกเตอร์: regions, departments และค่า\n\n6\n\nเซลแรกเป็นด้านซ้าย (เช่น “Department” หรือ “Region”)\n\n7\n\nเซลที่สองเป็นด้านขวา (เช่น ชื่อdepartment)\n\n8\n\nเพิ่มป้ายชื่อที่สร้างขึ้นใหม่ไปยังรายการ params()\n\n9\n\nอย่าลืมส่งป้ายชื่อไปยังแผนที่ Leaflet โดยใช้พารามิเตอร์ labels"
  },
  {
    "objectID": "06-mapping.html#full-code-3",
    "href": "06-mapping.html#full-code-3",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Full code",
    "text": "Full code\n\n\nFull code including a reactive Leaflet map with pretty hover labels\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    reg &lt;- poly[[\"Region\"]]\n    dep &lt;- poly[[\"Department\"]]\n    val &lt;- poly[[var]]\n    \n    if (is.null(dep)) {\n      dep &lt;- rep(NA, nrow(poly))\n    }\n    \n    # Create labels that are nicely aligned in a grid\n    labels &lt;- mapply(\n      function(reg, dep, val) {\n        HTML(as.character(tags$table(\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Region: \")),\n            tags$td(reg)\n          ),\n          if (!is.na(dep)) {\n            tags$tr(\n              style = \"line-height: 10px\",\n              tags$td(tags$b(\"Department: \")),\n              tags$td(dep)\n            )\n          },\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(paste0(variable_desc[[var]]$lgd, \": \"))),\n            tags$td(round(val, 2))\n          )\n        )))\n      },\n      reg = reg, dep = dep, val = val,\n      SIMPLIFY = FALSE,\n      USE.NAMES = FALSE\n    )\n    \n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values,\n      labels = labels\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    params &lt;- params()\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-mapping.html#proxies-คออะไร",
    "href": "06-mapping.html#proxies-คออะไร",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Proxies คืออะไร?",
    "text": "Proxies คืออะไร?\n\nวิธีแก้: Proxies\nproxies object คือรูปแแบบของ input controls หรือ widgetต่างๆที่มีอยู่"
  },
  {
    "objectID": "06-mapping.html#สวนขยายของ-proxy-ใน-shiny",
    "href": "06-mapping.html#สวนขยายของ-proxy-ใน-shiny",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ส่วนขยายของ proxy ใน Shiny",
    "text": "ส่วนขยายของ proxy ใน Shiny\n\nส่วนขยายของ Shiny มีฟังก์ชัน Proxy:\n\nDT::dataTableProxy()\nplotly::plotlyProxy()\nleaflet::leafletProxy()"
  },
  {
    "objectID": "06-mapping.html#ขนตอนการใช-proxy",
    "href": "06-mapping.html#ขนตอนการใช-proxy",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ขั้นตอนการใช้ Proxy",
    "text": "ขั้นตอนการใช้ Proxy\n\nให้ค่าเริ่มต้น isolated output widget (หมายความว่าพวกมันขึ้นกับอะไร) / output$tab_map_map\nสร้างตัวสังเกตการณ์ (observer) ที่อัพเดตตัวที่ขึ้นกับinput data / observe()\nทำให้ input ไม่ทำงาน\nนำคุณสมบัติที่มีอยู่ออกและเพิ่มอันใหม่เข้าไป\n\n\n\n\nReactive graph for proxies"
  },
  {
    "objectID": "06-mapping.html#แยกพวกตวแปร-reactive",
    "href": "06-mapping.html#แยกพวกตวแปร-reactive",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "แยกพวกตัวแปร reactive",
    "text": "แยกพวกตัวแปร reactive\n\nเพื่อสร้าง output widget ที่แยกออกมา เราใช้ฟังก์ชัน isolate() จาก Shiny\n\nตัวแปร params() จะถูกรันเพียง ครั้งเดียว เท่านั้น แต่ก็ยังมีความขึ้นกันกับตัวอื่น\n\n\n\n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n1    params &lt;- isolate(params())\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n\n\n1\n\ncode ส่วนใหญ่ยังเหมือนเดิม แต่เราได้แยกการเรียกใช้ผ่าน params() เพื่อป้องกันไม่ให้ฟังก์ชันrenderทำงานทุกครั้งที่ params() ไม่ทำงาน"
  },
  {
    "objectID": "06-mapping.html#การปรบใช-proxies",
    "href": "06-mapping.html#การปรบใช-proxies",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "การปรับใช้ proxies",
    "text": "การปรับใช้ proxies\n\nแทนที่นั้นเราจะสร้างตัว observer ที่อัพเดตเลเยอร์แผนที่ ในตำแหน่ง\nก่อนอื่นฟีเจอร์เดิมที่มีที่ต้องการเปลี่ยนจะต้องถูก cleared ก่อน\nจากนั้นก็เพิ่มฟีเจอร์ใหม่โดยการใช้ pipe เช่นเดิม\n\n\n1  observe({\n2    params &lt;- params()\n3    leafletProxy(\"tab_map_map\", data = params$poly) %&gt;%\n4      clearShapes() %&gt;%\n      clearControls() %&gt;%\n5      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        na.label = \"No data\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n\n\n1\n\nproxy ทำงานร่วมกับตัวobserver ไม่จำเป็นต้องใช้ฟังก์ชันrender เนื่องจากพวก widgets ถูก re-rendered แต่ widgetเดิมถูกอัปเดต\n\n2\n\nสามารถเรียกใช้ params() ได้โดยไม่ต้อง isolation\n\n3\n\nสร้างproxyของ leaflet ตัวproxyนี้จะอัปเดตค่าแผนที่โดยไม่ต้องrenderแผนที่ทั้งหมด มันจะช่วยเพิ่มประสิทธิภาพ\n\n4\n\nลบlayer ที่มีอยู่เพราะเราไม่ต้องการให้ layer เรียงกันไปเรื่อย ๆ\n\n5\n\nเพิ่มlayerใหม่เหมือนกับการสร้างแผนที่ leaflet ปกติ"
  },
  {
    "objectID": "06-mapping.html#มอะไรเปลยนแปลง",
    "href": "06-mapping.html#มอะไรเปลยนแปลง",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "มีอะไรเปลี่ยนแปลง",
    "text": "มีอะไรเปลี่ยนแปลง\n\nOutput ตอนนี้:\n\nไม่ re-render ใหม่แต่แรก - ประหยัดเวลาและทรัพยากร\nไม่รีเซ็ตแผนที่ - ทำให้การใช้งานเป็นไปอย่างราบรื่นขึ้น"
  },
  {
    "objectID": "06-mapping.html#full-code-4",
    "href": "06-mapping.html#full-code-4",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Full code",
    "text": "Full code\n\n\nFull code including a reactive Leaflet proxies\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    reg &lt;- poly[[\"Region\"]]\n    dep &lt;- poly[[\"Department\"]]\n    val &lt;- poly[[var]]\n    \n    if (is.null(dep)) {\n      dep &lt;- rep(NA, nrow(poly))\n    }\n    \n    # Create labels that are nicely aligned in a grid\n    labels &lt;- mapply(\n      function(reg, dep, val) {\n        HTML(as.character(tags$table(\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Region: \")),\n            tags$td(reg)\n          ),\n          if (!is.na(dep)) {\n            tags$tr(\n              style = \"line-height: 10px\",\n              tags$td(tags$b(\"Department: \")),\n              tags$td(dep)\n            )\n          },\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(paste0(variable_desc[[var]]$lgd, \": \"))),\n            tags$td(round(val, 2))\n          )\n        )))\n      },\n      reg = reg, dep = dep, val = val,\n      SIMPLIFY = FALSE,\n      USE.NAMES = FALSE\n    )\n    \n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values,\n      labels = labels\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    # Isolate call to params() to prevent render function to be executed\n    # every time params() is invalidated. No dependency is made.\n    params &lt;- isolate(params())\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  # Create a leaflet proxy. Proxies update map values without re-rendering the\n  # entire map, thus increasing performance.\n  observe({\n    params &lt;- params()\n    leafletProxy(\"tab_map_map\", data = params$poly) %&gt;%\n      clearShapes() %&gt;%\n      clearControls() %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        na.label = \"No data\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-mapping.html#เหตการณของ-leaflet",
    "href": "06-mapping.html#เหตการณของ-leaflet",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "เหตุการณ์ของ Leaflet",
    "text": "เหตุการณ์ของ Leaflet\n\nเราสามารถเข้าถึงเหตุการณ์ของ Leaflet ได้ดังนี้:\n\n\ninput$&lt;Map ID&gt;_&lt;Object type&gt;_&lt;Event type&gt;\n\n\nตัวแปร Map ID หมายถึง ID ที่ให้กับ Leaflet ในที่นี้เป็น map_exp"
  },
  {
    "objectID": "06-mapping.html#ประเภทของตวแปร-leaflet",
    "href": "06-mapping.html#ประเภทของตวแปร-leaflet",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ประเภทของตัวแปร Leaflet",
    "text": "ประเภทของตัวแปร Leaflet\n\nประเภทตัวแปรหมายถึงประเภทเรขาคณิตได้ดังนี้:\n\nmarker สำหรับจุด\nshape สำหรับรูปหลายเหลี่ยมและเส้น\ngeojson และ topojson สำหรับข้อมูลที่ถูกส่งผ่านรูปแบบ GeoJSON หรือ TopoJSON"
  },
  {
    "objectID": "06-mapping.html#ประเภทเหตการณของ-leaflet",
    "href": "06-mapping.html#ประเภทเหตการณของ-leaflet",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ประเภทเหตุการณ์ของ Leaflet",
    "text": "ประเภทเหตุการณ์ของ Leaflet\n\nประเภทเหตุการณ์หมายถึงการกระทำที่ดำเนินการได้ดังนี้:\n\nclick (คลิก)\nmouseover (เมาส์วาง)\nmouseout (เมาส์ออก)"
  },
  {
    "objectID": "06-mapping.html#เหตการณอน-ๆ",
    "href": "06-mapping.html#เหตการณอน-ๆ",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "เหตุการณ์อื่น ๆ",
    "text": "เหตุการณ์อื่น ๆ\n\nนอกจากนี้ Leaflet ยังมีเหตุการณ์ทั่วไปเพิ่มเติม:\n\ninput$&lt;Map ID&gt;_click เกิดขึ้นเมื่อคลิกพื้นหลังของแผนที่\ninput$&lt;Map ID&gt;_bounds ให้ขอบเขตสูงสุดของมุมมองปัจจุบัน\ninput$&lt;Map ID&gt;_zoom ให้ระดับการซูมปัจจุบัน\ninput$&lt;Map ID&gt;_center ให้จุดศูนย์กลางของมุมมองปัจจุบัน\n\nคำถาม: เหตุการณ์ input$tab_map_map_marker_click เกิดขึ้นตอนไหน"
  },
  {
    "objectID": "06-mapping.html#เหตการณในการปฏบต",
    "href": "06-mapping.html#เหตการณในการปฏบต",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "เหตุการณ์ในการปฏิบัติ",
    "text": "เหตุการณ์ในการปฏิบัติ\n\nผลลัพธ์ของเหตุการณ์ Leaflet ทั่วไปมักประกอบด้วย ID, ละติจูด และลองจิ\n\n\ninput$tab_map_map_shape_click\n\n$id\nNULL\n\n$.nonce\n[1] 0.05045395\n\n$lat\n[1] 49.0032\n\n$lng\n[1] -1.140568"
  },
  {
    "objectID": "06-mapping.html#ลางตวแปรหรอวตถ",
    "href": "06-mapping.html#ลางตวแปรหรอวตถ",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "ล้างตัวแปรหรือวัตถุ",
    "text": "ล้างตัวแปรหรือวัตถุ\n\nในcodeต่อไปนี้ เราจะเพิ่มเครื่องหมายเมื่อเราคลิกที่รูปหลายเหลี่ยมบนแผนที่ Leaflet\n\nจับการคลิ๊กของผู้ใช้\nลบเครื่องหมายก่อนหน้า\nเพิ่มเครื่องหมายใหม่โดยใช้พิกัดจุดที่คลิก\n\n\n\nobserve({\n1    click &lt;- input$tab_map_map_shape_click\n2    req(click)\n3    leafletProxy(\"tab_map_map\") %&gt;%\n4        clearMarkers() %&gt;%\n5        addMarkers(lng = click$lng, lat = click$lat)\n})\n\n\n1\n\nเก็บเหตุการณ์ ตัวเหตุการณ์ถูกยกเลิกเมื่อผู้ใช้คลิกที่รูปร่างใน leaflet tab_map_map\n\n2\n\nยกเลิกตัว observer เมื่อตัวแปรคลิกไม่ใช่ “ค่าจริง” (ดู ?isTruthy) ถ้าไม่มีการคลิกอะไรเลย ตัวobserverไม่ควรถูกเรียก\n\n3\n\nสร้าง Leaflet proxy\n\n4\n\nล้างเครื่องหมายก่อนหน้า\n\n5\n\nเพิ่มเครื่องหมายใหม่\n\n\n\n\n\nเราลบเครื่องหมายทั้งหมดเพื่อเพิ่มเครื่องหมายใหม่ แต่เราต้องระมัดระวังที่จะลบองค์ประกอบอื่น - ฟังก์ชัน leaflet::clear จะลบองค์ประกอบทั้งหมดของประเภทเรขาคณิต - ฟังก์ชัน leaflet::remove จะลบองค์ประกอบหนึ่งตัวโดยใช้ ID ของlayer\n\n\n\n\n\n\nNote\n\n\n\nฟังก์ชัน leaflet::remove ต้องใช้ layer ID เราสามารถตั้งค่าlayer ID โดยใช้อาร์กิวเมนต์ layerId ในฟังก์ชัน leaflet::add เช่น leaflet::addMarkers(..., layerId = \"marker1\")\n\n\n\n# Add a new marker\nobserve({\n    click &lt;- input$tab_map_map_shape_click\n    req(click)\n1    id &lt;- paste0(click$lng, click$lat)\n    leafletProxy(\"tab_map_map\") %&gt;%\n2        addMarkers(lng = click$lng, lat = click$lat, layerId = id)\n})\n\n# Delete an existing marker\nobserve({\n    click &lt;- input$tab_map_map_marker_click\n    req(click)\n    leafletProxy(\"tab_map_map\") %&gt;%\n3        removeMarker(click$id)\n})\n\n\n1\n\nสร้าง ID จากพิกัดลองจิจูด/ลองจิจูด เพื่อให้เรารู้ว่าเรากำลังพูดถึงองค์ประกอบตัวไหน\n\n2\n\nส่ง ID ที่สร้างไว้ให้กับเครื่องหมายที่เราเพิ่ม\n\n3\n\nเมื่อคลิกที่เครื่องหมายใหม่อีกครั้ง เราสามารถทราบได้อย่างแน่นอนว่าเราควรลบเครื่องหมายอะไรและไม่จำเป็นต้องลบทั้งหมด\n\n\n\n\n\n\n\n\n\n\n\nโบนัสสำหรับคนที่กล้า\n\n\n\n\n\n\nคุณสามารถสร้างเหตุการณ์ของinputของคุณเองได้ด้วย JavaScript\nใน code ด้านล่างนี้เราเพิ่มเหตุการณ์ “mousemove” ซึ่งจะถูกเรียกใช้ทุกครั้งที่เมาส์ถูกเคลื่อนไหวบนแผนที่ Leaflet\nการใช้ htmlwidgets::onRender() เพื่อประมวล JavaScript เมื่อวิดเจ็ต Leaflet ถูกเรนเดอร์\nการใช้ Shiny.onInputChange เพื่อสร้างเหตุการณ์inputs อ่านเพิ่มเติม: Joe Cheng - “การสื่อสารกับ Shiny ผ่าน JavaScript”\n\n\noutput$tab_map_map &lt;- renderLeaflet({\n    leaflet() %&gt;%\n        htmlwidgets::onRender(\"function(el, x) {\n      this.on('mousemove', function(e) {\n        var lng = e.latlng.lng;\n        var lat = e.latlng.lat;\n        var coord = [lng, lat];            // capture long and lat\n        Shiny.onInputChange('tab_map_map', coord)   // send coordinates to Shiny\n      });\n      this.on('mouseout', function(e) {\n        Shiny.onInputChange('tab_map_map', null)    // reset coordinates when mouse leaves map\n      })\n    }\")\n})"
  },
  {
    "objectID": "06-mapping.html#full-code-5",
    "href": "06-mapping.html#full-code-5",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "Full code",
    "text": "Full code\n\n\nFull code including Shiny events\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    reg &lt;- poly[[\"Region\"]]\n    dep &lt;- poly[[\"Department\"]]\n    val &lt;- poly[[var]]\n    \n    if (is.null(dep)) {\n      dep &lt;- rep(NA, nrow(poly))\n    }\n    \n    # Create labels that are nicely aligned in a grid\n    labels &lt;- mapply(\n      function(reg, dep, val) {\n        HTML(as.character(tags$table(\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Region: \")),\n            tags$td(reg)\n          ),\n          if (!is.na(dep)) {\n            tags$tr(\n              style = \"line-height: 10px\",\n              tags$td(tags$b(\"Department: \")),\n              tags$td(dep)\n            )\n          },\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(paste0(variable_desc[[var]]$lgd, \": \"))),\n            tags$td(round(val, 2))\n          )\n        )))\n      },\n      reg = reg, dep = dep, val = val,\n      SIMPLIFY = FALSE,\n      USE.NAMES = FALSE\n    )\n    \n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values,\n      labels = labels\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    # Isolate call to params() to prevent render function to be executed\n    # every time params() is invalidated. No dependency is made.\n    params &lt;- isolate(params())\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  # Create a leaflet proxy. Proxies update map values without re-rendering the\n  # entire map, thus increasing performance.\n  observe({\n    params &lt;- params()\n    leafletProxy(\"tab_map_map\", data = params$poly) %&gt;%\n      clearShapes() %&gt;%\n      clearControls() %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        na.label = \"No data\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  \n  # Add a new marker\n  observe({\n    click &lt;- input$tab_map_map_shape_click\n    req(click)\n    id &lt;- paste0(click$lng, click$lat)\n    leafletProxy(\"tab_map_map\") %&gt;%\n      addMarkers(lng = click$lng, lat = click$lat, layerId = id)\n  })\n  \n  # Delete an existing marker\n  observe({\n    click &lt;- input$tab_map_map_marker_click\n    req(click)\n    leafletProxy(\"tab_map_map\") %&gt;%\n      removeMarker(click$id)\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-mapping.html#แบบฝกหด-7",
    "href": "06-mapping.html#แบบฝกหด-7",
    "title": "การทำข้อมูลแผนที่และการแสดงผลขั้นสูง",
    "section": "แบบฝึกหัด",
    "text": "แบบฝึกหัด\n\n\n\n\n\n\nแบบฝึกหัด 9\n\n\n\nตัว event input$map_shape_mouseout ส่งข้อมูลให้ server ตอนใด\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nตัว Leaflet input event มีขึ้นตอน: input$&lt;mapid&gt;_&lt;geometry type&gt;_&lt;event type&gt;.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmap_exp อ้างถึงแผนที่ Leaflet ที่เป็นเป้าหมาย\nshape อ้างถึงตัวแผนที่เป้าหมาย (ในที่นี้คือรูปร่างหรือเส้น)\nmouseout อ้างถึงประเภทเหตุการณ์\ninput$map_exp_shape_mouseout จะทำให้เกิดการเรียกใช้เหตุการณ์เมื่อเราออกจากขอบเขตของรูปร่างบนแผนที่ Leaflet ที่มี ID map_exp\n\n\n\n\n\n\n\n\n\nแบบฝึกหัด 10\n\n\n\nพิมพ์พิกัดเม้าส์ปัจจุบันลงคอนโซลทุกครั้งที่คลิกบนรูปร่างบนแผนที่\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nเราเข้าถึงตัวแผนที่ ด้วยการใช้ input$tab_map_map_shape_click\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nเพื่อจับตำแหน่งของเม้าส์ เราต้องเข้าถึงเหตุการณ์ Leaflet input$tab_map_map_shape_click การพิมพ์ลงคอนโซลทำด้วยการสร้างตัวobserver เนื่องจากมันกระตุ้นผลข้างเคียงและไม่สร้างวัตถุที่ตอบสนอง\n\nobserve({\n    click &lt;- input$tab_map_map_shape_click\n    cat(paste(\n        \"Click on tab_map_map detected\",\n        paste(\"Lon:\", click$lng),\n        paste(\"Lat:\", click$lat),\n        \"\\n\",\n        sep = \"\\n\"\n    ))\n})"
  },
  {
    "objectID": "04-server-reactive-programming.html",
    "href": "04-server-reactive-programming.html",
    "title": "Server: Reactive programming",
    "section": "",
    "text": "จุดประสงค์:\n\nเข้าใจตรรกะของ reactivity ใน Shiny apps\nเข้าใจความแต่กต่างของ reactive functions อย่างเช่น reactive() หรือ observe()\nดูเรื่อง reactivity ใน Guerry app โดยเฉพาะในส่วนของ Tabulate data tab\nSources: @wickham2021mastering [Ch. 3]"
  },
  {
    "objectID": "04-server-reactive-programming.html#พนฐาน",
    "href": "04-server-reactive-programming.html#พนฐาน",
    "title": "Server: Reactive programming",
    "section": "พื้นฐาน",
    "text": "พื้นฐาน\n\nใน Shiny ตรรกะของ server ถูกเขียนโดยใช้รูปแบบที่เรียกว่า reactive programming\nซึ่งมันจะต่างจากเขียน code ที่รันให้ทำอะไรตั้งแต่ต้นจนจบ\nไอเดียสำคัญ: เมื่อ inputs ของส่วนที่สนใจเปลี่ยน outputs ที่เกี่ยวข้องก็จะเปลี่ยนตามเองอัตโนมัติ\nReactive programming ช่วยให้เขียน code ได้ง่ายขึ้น (เขาว่ามา…ไม่รู้จริงหรือเปล่า)"
  },
  {
    "objectID": "04-server-reactive-programming.html#server-function",
    "href": "04-server-reactive-programming.html#server-function",
    "title": "Server: Reactive programming",
    "section": "server function",
    "text": "server function\n\nหัวใจหลักของทุกๆ shiny app\n\n\nlibrary(shiny)\n\n# front end interface (Html)\n1ui &lt;- fluidPage()\n\n# back end logic\n2server &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n1\n\nUser interface\n\n2\n\nServer\n\n\n\n\n\nui ง่ายเพราะผู้ใช้ทุกคนจะได้ code html เดียวกัน\nserver ค่อนข้างซับซ้อน เพราะแต่ล่ะคนที่ใช้จะไม่เหมือนกัน\n\nเช่น ส้มกำลังใช้งาน slider ก็ไม่ควรจะไปมีผลอะไรกับการใช้งานของสมภพ\n\nserver() จะถูกเรียกทุกครั้งที่เริ่มใช้งาน\n\nตัวแปร 3 ตัวนี้ (input, output, session) ที่จะถูกสร้างอัตโนมัติโดย Shiny app เมื่อเริ่มต้นใช้งาน"
  },
  {
    "objectID": "04-server-reactive-programming.html#input-output-lists",
    "href": "04-server-reactive-programming.html#input-output-lists",
    "title": "Server: Reactive programming",
    "section": "Input & output (lists)",
    "text": "Input & output (lists)\n\ninput: เป็นตัวแปรแบบ list ที่จะรับ input ทุกตัวที่ส่งมาจาก browser โดย input ที่มาจะมีชื่อตาม input ID\n\nเช่น numericInput(\"count\", label = \"Number of values\", value = 100) จะสร้าง input$count\ninput สามารถอ่านค่าได้จากภายใน reactive functions อย่าง renderText() หรือ reactive()\n\nreactive functions ทำให้ค่า outputs เปลี่ยนอัตโนมัติเมื่อ input เปลี่ยน\n\n\noutput: เป็นตัวแปรแบบ list ที่ประกอบด้วย outputs ตามชื่อ output ID\n\nความแต่กต่าง: output ใช้สำหรับส่งค่า output แทนที่จะรับ input (ส่วนใหญ่จะเป็นพวก render function)\nQ: ใน code ด้านล่างนี้มี inputs/outputs/render functions กี่ที่ และมันทำหน้าที่อะไร\n\n\n\n\nSimple input/output example\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n1  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\n\n1\n\nrender functions อย่าง renderText() ทำหน้าที่ convert ผลลัพธ์เป็น HTML ให้ตรงตามที่ต้องการบนหน้า web page"
  },
  {
    "objectID": "04-server-reactive-programming.html#render-functions",
    "href": "04-server-reactive-programming.html#render-functions",
    "title": "Server: Reactive programming",
    "section": "Render functions",
    "text": "Render functions\n\nrender functions จะอยู่ในส่วนของ server ทำหน้าที่สร้างหรือคอยอัพเดท outputs ตามชนิดที่ต้องการ\n\nค่าผลลัพธ์จะถูกเก็บไว้ที่ output$...\n\nQ: render functions พวกนี้ใช้ทำอะไร\n\nrenderImage({...})\nrenderPlot({...})\nrenderPlotly({...}) (!)\nrenderPrint({...})\nrenderTable({...})\nrenderDataTable({...}) (!)\nrenderText({...})\nrenderUI({...}) (!)\nrenderLeaflet({...}) (!)\n\nพวกที่มีเครื่องหมาย(!) คืออันที่เราใช้ใน Guerry app\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrenderImage({...}) สร้าง output แบบ images\nrenderPlot({...}) สร้าง plots\nrenderPlotly({...}) สร้าง interactive plotly กราฟต่างๆ\nrenderPrint({...}) สำหรับ output จากคำสั่ง print\nrenderTable({...}) สำหรับ data frame, matrix, หรือพวกตารางต่างๆ\n\nrenderDataTable({...}) สร้าง interactive datatable\n\nrenderText({...}) สำหรับแสดงข้อความ\nrenderUI({...}) สร้างพวก UI\nrenderLeaflet({...}) สร้างแผนที่ leaflet"
  },
  {
    "objectID": "04-server-reactive-programming.html#reactive-programming",
    "href": "04-server-reactive-programming.html#reactive-programming",
    "title": "Server: Reactive programming",
    "section": "Reactive programming",
    "text": "Reactive programming\n\nreactivity มันทำงานอย่างไร\n\nQ: reactivity มันทำงานอย่างไร และ app ด้านล่างนี้มันทำอะไร\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\nShiny จะทำการแสดงผล renderText() ทุกครั้งที่เราอัพเดทค่า input$name\nreactive หมายถึงตัวมันเองจะเปลี่ยนเองอัตโนมัติ เมื่อค่าที่มันเกี่ยวข้องมีการเปลี่ยนแปลง\nImportant: Code เป็นเพียงตัวบอกว่ามันจะสร้างข้อความอย่างไร แต่มันขึ้นกับตัว Shiny เองว่าจะรัน code เมื่อไหร่ตอนไหน\nRecipe: App เป็นเพียงตัวที่บอก Shiny ว่าจะทำอะไร อย่างไรกับ inputs\n\n\n\nReactive Graph\n\nโดยปกติเราจะอ่าน R code จากบนลงล่าง(= ตามลำดับคำสั่ง)… แต่ไม่ใช่กับ Shiny!\nReactive graph: เป็นตัวอธิบายว่า inputs และ outputs มันเชื่อมต่อกันเพื่อรันคำสั่งตามลำดับอย่างไร\nFigure 1 อธิบาย app ใน Section 5.1\n\noutput$greeting จะมีการคำนวณใหม่ทุกครั้งที่ input$name มีการเปลี่ยน\ngreeting มันจะขึ้นกับname\n\n\n\n\n\n\n\nFigure 1: Reactive graph แสดงให้เห็นว่า inputs และ outputs สัมพันธ์กันอย่างไร (ที่มา: Wickham 2021)\n\n\n\n\n\nการร่างแบบของ reactive graphs จะช่วยให้เข้าในแต่ล่ะส่วนได้ดีขึ้น\n\n\n\nReactive expressions\n\nReactive expressions รับค่า inputs แล้วก็สร้าง outputs\n\nสารถช่วยลดการซ้ำซ้อนของ code ได้ด้วยการใส่ nodes ที่ต้องการใน reactive graph\nFigure 2 ประกอบด้วย reactive expression string ดู code ด้านล่าง\n\n\n\n\n\n\n\nFigure 2: reactive expression จะถูกวาดมีมุมทั้งสองด้านเพราะมันจะเป็นตัวเชื่อมระหว่าง inputs ไปยัง outputs (ที่มา: Wickham 2021)\n\n\n\n\n\nจากด้านล่าง ตัว string ถูกสร้างแบบ reactive() function ใน Section 5.1 อยากให้สังเกตการเรียกค่าไปใช้\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\nหลีกเลี่ยงการทำซ้ำ\n\nQ: code ด้านล่างนี้หลีกเลี่ยงการทำซ้ำได้อย่างไร\n\n\n\n\nShow the code\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n  textOutput(\"greeting2\")\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n  output$greeting2 &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\n\n\nรันหรือทำตามลำดับ\n\nลำดับของ code ใน Shiny มันรันตาม reactive graph\nลองสลับลำดับของ code ใน server\n\nพยายามเขียนตามลำดับให้เข้าใจง่ายเข้าไว้!\n\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText(string())\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n}\nshinyApp(ui, server)\n\n\n\nExercises\n\ncode ด้านล่าง ในส่วนของ server1, server2 และ server3 นี้ผิดตรงไหน\n\n\n# UI\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\n# SERVERS\nserver1 &lt;- function(input, output, server) {\n  input$greeting &lt;- renderText(paste0(\"Hello \", name))\n}\n\n# HOMEWORK!\nserver2 &lt;- function(input, output, server) {\n  greeting &lt;- paste0(\"Hello \", input$name)\n  output$greeting &lt;- renderText(greeting)\n}\n\nserver3 &lt;- function(input, output, server) {\n  output$greting &lt;- paste0(\"Hello\", input$name)\n}\n\n\nเขียน reactive graph สำหรับ server functions (ว่าอะไรคือ inputs, reactives และ ouputs): (Homework: server2 กับ server3!)\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nเริ่มด้วยการดูว่ามี inputs (1), reactives (2) และ ouputs (3) กี่ที่ตรงไหนบ้าง และทำหน้าที่อะไร จากนั้นเริ่มเขียน inputs ใน column แรกทางซ้าย เราอาจจะใช้ อย่างเช่น name&gt; สำหรับ inputs &gt;name&gt; สำหรับ reactives และ &gt;name สำหรับ outputs และใช้ลูกศรเชื่อม\n\n\n\n\nserver1 &lt;- function(input, output, session) {\n  c &lt;- reactive(input$a + input$b)\n  e &lt;- reactive(c() + input$d)\n  output$f &lt;- renderText(e())\n}\n\nserver2 &lt;- function(input, output, session) {\n  x &lt;- reactive(input$x1 + input$x2 + input$x3)\n  y &lt;- reactive(input$y1 + input$y2)\n  output$z &lt;- renderText(x() / y())\n}\n\nserver3 &lt;- function(input, output, session) {\n  d &lt;- reactive(c() ^ input$d)\n  a &lt;- reactive(input$a * 10)\n  c &lt;- reactive(b() / input$c) \n  b &lt;- reactive(a() + input$b)\n}\n\n\n\n\n\n\n\nSolution(s)\n\n\n\n\n\n\ncode ผิดตรงไหน ใน server1, server2 และ server3\n\n\nserver1: ลืม input$\nserver2: input$name อยู่นอก renderText() function\nserver3: พิมพ์ผิด output$greting\n\n\n\nเขียน reactive graph สำหรับ server functions ทั้ง3 (Solution source):\n\nในการสร้าง reactive graph เราต้องพิจารณา inputs, reactive expressions, และ outputs ของ app\nสำหรับ server1 เรามี:\n\ninputs: input$a, input$b, และ input$d\nreactives: c() และ e()\noutputs: output$f\n\nInputs input$a และ input$b ถูกใช้สร้าง c() ซึ่งรวมกับ input$d เพื่อสร้าง e() และ สุดท้าย output จะขึ้นกับ e()\n\n\n\n\nreactive graph - server 1\n\n\n\n\nสำหรับ server2 เรามี:\n\ninputs: input$y1, input$y2, input$x1, input$x2, input$x3\nreactives: y() and x()\noutputs: output$z\n\nInputs input$y1 กับ input$y2 ถูกใช้สร้าง reactive y()และ inputs input$x1, input$x2 กับ input$x3 ถูกใช้สร้าง reactive x() ดังนั้น output ขึ้นกับค่า x() และ y()\n\n\n\n\nreactive graph - server 2\n\n\n\n\nสำหรับ server3 เรามี:\n\ninputs: input$a, input$b, input$c, input$d\nreactives: a(), b(), c(), d()\n\nซึ่งจากด้านล่างเราจะเห็นว่า a() ขึ้นกับค่า input$a และ b() ก็ขึ้นกับ a() และ input$b ส่วน c() ขึ้นกับ b() และ input$c และ output สุดท้ายขึ้นกับทั้ง c() และ input$d\n\n\n\n\nreactive graph - server 3"
  },
  {
    "objectID": "04-server-reactive-programming.html#reactive-expressions-more",
    "href": "04-server-reactive-programming.html#reactive-expressions-more",
    "title": "Server: Reactive programming",
    "section": "Reactive expressions (more!)",
    "text": "Reactive expressions (more!)\n\nแนะนำให้อ่าน Chapter 3.4!\nReactive expressions (เช่น reactive()) มันสำคัญเพราะ…\n\nมันช่วยให้ข้อมูล Shiny ว่าจะต้องรันในส่วนไหนบ้างโดยที่มันไม่ต้องรันทั้งหมดเมื่อ inputs เปลี่ยน\nช่วยให้ apps มีประสิทธิภาพมากขึ้น และ code อ่านเข้าใจได้ง่าย\n\nมันเหมือน inputs ที่เราสามารถใช้ results ของ reacive expression ใน output ได้\nเหมือนกับ outputs ที่มันขึ้นกับ inputs และมันรู้เองอัตโนมัติว่ามันต้องอัพเดทค่าเมื่อไหร่\nตัว Inputs กับ reactive expressions ก็คือ reactive producers (ดู Figure 3)\nReactive expressions กับ outputs คือ reactive consumers (ดู Figure 3)\n\n\n\n\n\n\nFigure 3: Inputs กับ expressions คือ reactive producers (ตัวสร้าง); expressions กับ outputs คือ reactive consumers (ตัวใช้) (ที่มา: Wickham 2021)"
  },
  {
    "objectID": "04-server-reactive-programming.html#reactive-functions-ภาพรวม",
    "href": "04-server-reactive-programming.html#reactive-functions-ภาพรวม",
    "title": "Server: Reactive programming",
    "section": "Reactive functions: ภาพรวม",
    "text": "Reactive functions: ภาพรวม\n\nShiny มี reactive functions หลากหลาย เช่น reactive(), observe(), bindevent() และอื่นๆ`\nอยากเข้าใจเรื่อง reactive นี้มากขึ้นลองดูที่ Chapter 3.5.1.\n\n\nreactive()\n\nreactive(): สำหรับสร้าง reactive expression\n\nในที่นี้ “reactive” มีความหมายในเชิงว่าถ้าค่าของตัวแปรอะไรที่ขึ้นกับมันนี้เปลี่ยน ตัวมันเองจะเปลี่ยนค่าตามอัตโนมัติ\nด้านล่างนี้ตัว reactive string จะเปลี่ยนค่าทุกครั้งที่ input$name เปลี่ยนค่า\nQ: อะไรที่ควรจะเป็นตัว reactive producer และ ตัว reactive consumer\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n  })\n\n\nobserve() vs. reactive()\n\nreactive(): สร้าง reactive expression ที่ค่าจะเปลี่ยนตามinputsจากผู้ใช้\nobserve(): สร้างตัวสังเกตุที่จะรันเฉพาะเมื่อตัว reactive ที่ขึ้นกับมันเปลี่ยน\n\nเช่น code ใน observe() จะรันอีกครั้งถ้าตัว reactive inputs หรือ reactive expressions ที่มันอ้างถึงมีการอัพเดทค่า\nปกติเราจะไม่ให้ค่าผลลัพธ์ observe() กับตัวแปร ดังนั้นเราจะไม่สามารถอ้างถึงมันจาก reactive consumers อันอื่นได้\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nด้านล่างนี้เราใช้ reactive expression กับ reactive() เพื่อสร้าง squared จากนั้นก็เอามันไปใช้อีกใน observe() function ซึ่งถูกห่อใน render function อย่างrenderText() อีกทีเพื่อสร้าง output$text\n\n\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  numericInput(\"num\", \"Enter a number\", value = 1),\n  textOutput(\"text\")\n)\n\nserver &lt;- function(input, output) {\n  # reactive expression\n  squared &lt;- reactive({ \n    input$num^2 \n  })\n  \n  # observer\n  observe({ \n    output$text &lt;- renderText({\n      paste0(\"The square of \", input$num, \" is \", squared())\n    })\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\nจัดการกับเหตุการณ์: bindEvent()\n\nbindEvent(): เป็นคำสั่งที่ช่วยจัดการกับเหตุการณ์อย่างง่าย\nobserveEvent() (ตัวสังเกตเหตุการณ์): ใช้เมื่อเราต้องการจะทำอะไรบ้างอย่างเมื่อมีเหตุการณ์เกิดขึ้น เหตุการณ์ในที่นี้ เช่นมีการกดปุ่ม พิมพ์ตัวอักษร ลากเม้าส์ และอื่นๆ (ดูที่ input$button ด้านล่างนี้) แต่เราไม่ได้จะใช้ผลจากactionต่อเหตุการณ์นี้ใน UI\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nในตัวอย่าง เมื่อปุ่ม “Generate Random Number” ถูกกด จะมีการสุ่มเลขขึ้นมาตัวหนึ่ง แต่จะไม่แสดงผลทันที ตัว output$randomNumber จะถูกเชื่อมไปยังปุ่ม input$dispButton ด้วย bindEvent() และผลลัพธ์เลขสุ่มจะแสดงก็ต่อเมื่อปุ่ม “Display Random Number” ถูกกด ด้วยวิธีนี้เราสามารถที่จะควบคุม UI ได้ว่าจะอัพเดทผลลัพธ์เมื่อใด\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    randNum &lt;- reactiveValues(num = NULL)\n\n    observeEvent(input$genButton, {\n        randNum$num &lt;- runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    output$randomNumber &lt;- renderText({ \n        randNum$num # Generate the reactive expression\n    }) %&gt;% \n    bindEvent(input$dispButton) # Binding the output$randomNumber reactive expression to dispButton\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\neventReactive() (ข้าม!)\n\nอีกวิธีคือใช้ bind_event()\neventReactive(): เหมือนกับ reactive() แต่จะcode ภายในจะถูกรันเมื่อมีเหตุการณ์ที่สนใจเกิดขึ้น สามารถที่จะใช้ร่วมกับ observeEvent()ได้\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nผลลัพธ์จะเหมือนกับ app ก่อนหน้านี้ ตัว eventReactive() function ถูกใช้สร้างตัวแปรแบบ reactive (ตัวเลขสุ่ม) ที่มันจะอัพเดทเฉพาะเมื่อมีการกดปุ่ม “Generate Random Number” เท่านั้น\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    randNum &lt;- eventReactive(input$genButton, {\n        runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    observeEvent(input$dispButton, {\n        output$randomNumber &lt;- renderText({ randNum() }) # Display the random number when dispButton is clicked\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\nisolate() (ข้าม!)\n\nisolate(): ใช้เพื่อเข้าถึงค่าของ reactive expression หรือ input โดยไม่ต้องผ่านค่าอะไรเลย\n\nมีประโยชน์ในการเข้าถึงค่า ณ ปัจจุบันของ inputs หรือ reactive expression\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nใน app เลขสุ่มจะไม่แสดงผลทันทีหลังจากกดปุ่ม “Generate Random Number” เลขสุ่มที่เกิดขึ้นจะยังไม่มีผลเพราะมันถูก แยกออกมาด้วย isolate() function ซึ่งมันจะแสดงค่าก็ต่อเมื่อ ปุ่ม “Display Random Number” ถูกกด การเปลี่ยนค่าของ randNum$num หลังจากปุ่ม “Display Random Number” ถูกกด จะยังไม่มีผลจนกว่า ปุ่ม “Display Random Number” จะถูกกดอีกครั้ง ฉะนั้น isolate() function ช่วยให้เราใช้หรือเข้าถึงค่าแบบ reactive values โดยที่ไม่ต้องมี trigger\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    randNum &lt;- reactiveValues(num = NULL) # Create object to store reactiv values\n\n    observeEvent(input$genButton, {\n        randNum$num &lt;- runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    observeEvent(input$dispButton, {\n        output$randomNumber &lt;- renderText({ \n          isolate(randNum$num) # Display the random number when dispButton is clicked, but do not reactivity link it\n        }) \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\nreactiveTimer() (ข้าม!)\n\nreactiveTimer(): ใช้สำหรับสร้าง reactive expression ที่จะหยุดสักช่วงเวลาหนึ่ง (เป็น milliseconds) มีประโยชน์กรณีทีเราต้องการให้บางส่วนใน app มีการอัพเดทเป็นช่วงเวลาที่ต้องการ\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nในตัวอย่าง autoInvalidate() คือ reactive expression ที่จะทำให้หยุดทุก 1000 milliseconds โดยการใช้autoInvalidate() ข้างใน renderText() เป็นการบอกว่าทุกครั้งที่ autoInvalidate() หยุดทำงาน ก็จะมีการคำนวณและแสดงเวลาใหม่\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n  textOutput(\"currentTime\")\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  # Define a reactive timer with a 1000ms (1s) interval\n  autoInvalidate &lt;- reactiveTimer(1000)\n  \n  output$currentTime &lt;- renderText({\n    autoInvalidate()  # This line causes the reactive expression to be invalidated (and thus re-evaluated) every second\n    format(Sys.time(), \"%a %b %d %Y %X\")  # Display the current time\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "04-server-reactive-programming.html#guerry-app-reactivity-tabulate-data-tab",
    "href": "04-server-reactive-programming.html#guerry-app-reactivity-tabulate-data-tab",
    "title": "Server: Reactive programming",
    "section": "Guerry app (reactivity): Tabulate data tab",
    "text": "Guerry app (reactivity): Tabulate data tab\n\nreactive functions ที่ใช้ใน Guerry app: reactive(), observe(), isolate(), bindEvent().\ncode พื้นฐานสำหรับ Tabulate tab ที่ใช้ใน app\n\nตัว reactive graph เป็นอย่างไรสำหรับ app นี้(มี inputs, reatives, outputs กี่ที่)\nreactive functions อะไรบ้าง\n\n\n\n\nR code underlying tabulate tab\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  )\n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, c(\"Region\", \"Department\",var)]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "04-server-reactive-programming.html#การโหลดสงตางใน-shiny",
    "href": "04-server-reactive-programming.html#การโหลดสงตางใน-shiny",
    "title": "Server: Reactive programming",
    "section": "การโหลดสิ่งต่างใน Shiny",
    "text": "การโหลดสิ่งต่างใน Shiny\n\ncode มันถูกรันตอนไหน?\n\ncode มันถูกรันตอนไหน (ลองดูที่นี่)\nCode ที่อยู่นอก ui กับ server จะถูกรันทันทีที่ app ถูกเริ่มใช้งาน\n\n\n\nCode ในส่วน server function จะถูกรันเพียงครั้งเดียวตอนเริ่มต้นเมื่อผู้ใช้เปิด app\n\n\n\nCode ภายใน render functions จะถูกรันทุกครั้งที่ ผู้ใช้เปลี่ยนค่า inputs (input$...) และ ouput$... ก็เปลี่ยนตาม\n\n\n\nQ: เราควรจะใส่functionสำหรับโหลดข้อมูลตรงไหน\nQ: ปัญหาอาจจะเกิดเมื่อเราใส่ผิดที่ ฉะนั้นเราควรจะใส่พวกการจัดการข้อมูลตรงไหน\n\n\n\n\n\n\n\nInsight\n\n\n\n\n\n\nถ้าเป็นไปได้ไม่ควรใส่ส่วนที่มีการคำนวณเยอะๆ ใน render functions\n\nอาจจะต้องมีการเตรียมข้อมูลให้พร้อมก่อนเรียกใช้งานใน reactive functions\n\n\n\n\n\n\n\nควรจะโหลดอะไรตรงไหน\n\nCode นอก server &lt;- function(input, output) {} จะถูกรันครั้งเดียวตอน app เริ่มทำงาน\nCode ภายใน server &lt;- function(input, output) {} จะรันครั้งเดียวตอนที่ผู้ใช้เปิดapp\nCode ภายใน render* จะมีการรันใหม่ถ้ามีการอัพเดท inputs ( ดูที่ reactivity)\nหมายความว่า…\n\nโหลด scripts, libraries, กับ data นอก server function (ตรงตำแหน่งเริ่มต้น)\n\nเก็บข้อมูลไว้ที่ www/ ของ app\nเข้าถึงข้อมูลด้วย read.table(\"www/swiss.csv\", sep=\",\")\nเข้าถึง ข้อมูล online ด้วยการใส่ url ในคำสั่ง read* function (เช่น read.table())\n\nตัววัตถุจำเพาะ (เช่น วัตถุที่เก็บข้อมูลการใช้งาน) ถูกนิยามภายใน Server function แต่ภายนอก render* ทั้งหลาย\n\nเช่น ผู้ใช้ลงทะเบียนข้อมูลตัวเองเป็น input data\n\nCode/objects ที่ถูกผลกระทบจาก widgets ควรจะใส่ภายใน render* function\n\nShiny จะรัน code ใน render* ทุกครั้งที่ input widgets มีการเปลี่ยนค่า\n\n\nAvoid พยายามอย่าใส่ code ที่ไม่จำเป็นหรือคำนวณนาน ใน render function มันเป็นเรื่องของประสิทธิภาพ!"
  },
  {
    "objectID": "04-server-reactive-programming.html#ทเกบ-data",
    "href": "04-server-reactive-programming.html#ทเกบ-data",
    "title": "Server: Reactive programming",
    "section": "ที่เก็บ Data",
    "text": "ที่เก็บ Data\n\nรูปแบบการจัดเก็บข้อมูลมีความสำคัญ\n\nMemory allocation: R จะเก็บค่าต่าง ๆ ไว้ที่ working memory\nPerformance: “R ทำหลายอย่างแล้ว” - Colin Fay\nReadability: ใส่ทุกอย่างไปในไฟล์เดียวมันจะอ่านยาก\n\nสำหรับการทำงานกับฐานข้อมูล : databases (เช่น SQLite, PostgreSQL, MongoDB)\nR สามารถทำงานกับ database (R Packages: DBI, dbplyr, sf) (ดูภาพรวมที่)\n\nSQLite ก็ทำงานได้ดี (ดูภาพรวม)"
  },
  {
    "objectID": "04-server-reactive-programming.html#สรป",
    "href": "04-server-reactive-programming.html#สรป",
    "title": "Server: Reactive programming",
    "section": "สรุป",
    "text": "สรุป\nในการสร้าง reactive shiny apps…\n\nใช้ *Output เพื่อวาง reactive objects บน UI (webpage)\nใช้ render* เพื่อให้ R สร้าง output objects (บน server)\n\nRender functions ใส่ใน server &lt;- function(input, output) {...})\nR expressions จะถูกล้อมด้วยปีกกา {} ใน render* functions\nผลลัพธ์จาก render* จะถูกเก็บไว้ที่ output list\nReactivity ด้วยการใส่ input ใน render* expression\n\nถ้าอยากจะสร้าง ปรับปรุง เปลี่ยนแปลง app ที่มีอยู่ ลองดูตัวอย่างนี้เป็นแนวทางได้ ตัวอย่าง"
  },
  {
    "objectID": "04-server-reactive-programming.html#appendix-แสดง-reactivity-ดวย-reactlog",
    "href": "04-server-reactive-programming.html#appendix-แสดง-reactivity-ดวย-reactlog",
    "title": "Server: Reactive programming",
    "section": "Appendix: แสดง reactivity ด้วย reactlog",
    "text": "Appendix: แสดง reactivity ด้วย reactlog\n\nreactlog สามารถใช้เพื่อแสดงผลและสำรวจ reactivity ของ Shiny app\nลองดูตัวอย่างนี้\n\n\n# Restart R to delete log\n.rs.restartR()\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n# reactlog_disable()\n\n# run a shiny app\nrunApp(\"shinyapps/guerry/states_paul/app_tab_tabulate.R\")\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()"
  },
  {
    "objectID": "04-server-reactive-programming.html#appendix-imperative-กบ-declarative-programming-และ-laziness",
    "href": "04-server-reactive-programming.html#appendix-imperative-กบ-declarative-programming-และ-laziness",
    "title": "Server: Reactive programming",
    "section": "Appendix: Imperative กับ Declarative programming และ laziness",
    "text": "Appendix: Imperative กับ Declarative programming และ laziness\n\nImperative vs. declarative programming (Chapter 3.3.1)\n\nImperative code: “ทำแซนวิชให้หน่อย”\nDeclarative code: “แน่ใจว่ามีแซนวิชทุกครั้งที่เปิดตู้เย็น”\nShiny จะเป็นแบบ Declarative\n\nLaziness เป็นจุดแข็งของ declarative programming (Chapter 3.3.2)\n\napp มันจะทำงานให้น้อยที่สุดที่จะอัพเดทตัวควบคุมผลลัพธ์"
  },
  {
    "objectID": "02-introduction.html",
    "href": "02-introduction.html",
    "title": "เริ่มต้น",
    "section": "",
    "text": "จุดประสงค์ของการทำ data visualisation คืออะไร\n\nแรงบันดาลใจ กระตุ้นความสนใจ\nอธิบายข้อมูล\nวิเคราะห์\n\nการวิเคราะห์ข้อมูลช่วยให้เราเข้าใจปัญหา สถานะการณ์ที่มันซับซ้อนได้ดียิ่งขึ้น\n\nยิ่งเราเข้าใจปัญหาดีขึ้น ก็ยิ่งเพิ่มโอกาสที่เราจะหาทางออกหรือแก้ปัญหาได้มากขึ้น \n\n\n\n\n\n\n\n\nกระบวนการวิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์\n\n\n\n\n\n\nนิยามปัญหา: ปัญหาหรือเป้าหมายที่เราต้องการจะแก้ด้วยการวิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์คืออะไร\nตั้งคำถาม: ตั้งชุดคำถามจากปัญหาที่สนใจ\nรวบรวม เปลี่ยนแปลง ทำความคุ้นเคยกับข้อมูล: เตรียมข้อมูลให้พร้อมสำหรับการวิเคราะห์ที่ต้องการ\nสร้างแบบจำลอง: พยายามใช้สถิติหรือเทคนิคทางmachine learning สร้างแบบจำลอง สรุป หรือวิเคราะห์ข้อมูล\nนำเสนอข้อมูลหรือแบบจำลอง: สรุปผลที่ได้และนำเสนอในรูปแแบที่เข้าใจได้ง่าย\nแปลผล: ทำความเข้าใจกับผลที่ได้ ขั้นตอนนี้สำคัญ\nสรุปผลและตั้งคำถามกับผลที่ได้: ตั้งคำถามและถามกลับจากผลที่ได้เพื่อให้ได้ข้อสรุปหรือเข้าใจปัญหามากขึ้น\n\n\n\n\n\nกระบวนการนี้ไม่เป็นลำดับ แต่เป็นกระบวนการที่วนกลับมาซ้ำอยู่เสมอ (กระโดดไปมาระหว่างขั้นตอน)\nบางกิจกรรมเป็นเอกลักษณ์ของมนุษย์เท่านั้น เช่น กำหนดปัญหา สร้างคำถาม เป็นต้น\nการแสดงผลเป็นส่วนเล็กน้อยของกระบวนการและประสิทธิภาพขึ้นอยู่กับขั้นตอนอื่น ๆ\nปฏิสัมพันธ์: ทุกครั้งที่คุณบอกให้คอมพิวเตอร์ทำอะไร (และส่งข้อมูลกลับมา)\n\nรวบรวมและแปลงข้อมูล\nระบุโมเดลและ/หรือคำค้นจากข้อมูล\nระบุวิธีการแสดงผล (และโมเดล)\nเรียกดูผลลัพธ์\nสังเคราะห์และสื่อสารข้อมูลที่รวบรวมได้\n\nปฏิสัมพันธ์โดยตรงกับการจัดการเชิงตรงกับการป้อนคำสั่ง: อินเตอร์เฟซ WIMP (การจัดการโดยตรงผ่านการคลิก หน้าต่างของโปรแกรม ไอคอน เมนู ฯลฯ) เป็นการปฏิสัมพันธ์ แต่เช่นเดียวกับการป้อนคำสั่งผ่านบรรทัดคำสั่ง\n\nคุณสามารถให้ผู้ใช้พิมพ์ได้!\n\nกลุ่มเป้าหมาย: ทักษะและความรู้พื้นฐานของพวกเขาคืออะไร? (ความรู้ด้านโดเมน สถิติ กราฟ)\n\n\n\n\n\nการกำหนดรายละเอียด (ความคิด → ข้อมูล/โมเดล): จำเป็นต้องแปลงคำถามและความคิดของเราให้สามารถอ่านได้เป็นข้อมูลที่คอมพิวเตอร์สามารถอ่านได้\n\nShiny ช่วยให้ผู้ที่ไม่ใช่โปรแกรมเมอร์สามารถทำการวิเคราะห์ข้อมูลได้ แต่ต้องมีความรู้ด้าน R เพื่อสร้างแอป\nแต่ยังมีเครื่องมือที่ง่ายกว่านี้อีกเช่นกัน\n\nการแสดงผล (ข้อมูล/โมเดล → สายตา)\n\nขั้นตอนถัดไปคือการค้นหาการแสดงผล (แสดงผลแบบสายตา) เพื่อให้ผู้ใช้สามารถตรวจสอบและเข้าใจได้\n“การตัดสินใจว่าจะแสดงผลอะไรเป็นเรื่องที่สำคัญเช่นเดียวกับการตัดสินใจว่าจะแสดงผลอย่างไร”\n“ความสวยงามของการแสดงผลจำเป็นต้องมีในระดับใดเพื่อที่จะเป็นประโยชน์สำหรับการวิเคราะห์ข้อมูล?”\n\n“ปัญหาการแสดงผลส่วนใหญ่สามารถแก้ไขได้ด้วยกราฟเพียงไม่กี่รูป”\n\nมีความยากที่จะใช้งาน ปรับแต่ง และผสมผสานกราฟอย่างชาญฉลาด/มีประสิทธิภาพ/นวัตกรรม\n\nการตีความ (สายตา → ความคิด)\n\n“สิ่งที่คนต้องรู้ในการคิดอย่างมีประสิทธิภาพเกี่ยวกับผลลัพธ์ของการสร้างโมเดลและการแสดงผล”\n“คนสามารถตีความและเชื่อใจในแอป shiny ของคุณได้หรือไม่?”"
  },
  {
    "objectID": "02-introduction.html#วเคราะหขอมลแบบมปฏสมพนธ-interactive-data-analysis",
    "href": "02-introduction.html#วเคราะหขอมลแบบมปฏสมพนธ-interactive-data-analysis",
    "title": "เริ่มต้น",
    "section": "",
    "text": "จุดประสงค์ของการทำ data visualisation คืออะไร\n\nแรงบันดาลใจ กระตุ้นความสนใจ\nอธิบายข้อมูล\nวิเคราะห์\n\nการวิเคราะห์ข้อมูลช่วยให้เราเข้าใจปัญหา สถานะการณ์ที่มันซับซ้อนได้ดียิ่งขึ้น\n\nยิ่งเราเข้าใจปัญหาดีขึ้น ก็ยิ่งเพิ่มโอกาสที่เราจะหาทางออกหรือแก้ปัญหาได้มากขึ้น \n\n\n\n\n\n\n\n\nกระบวนการวิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์\n\n\n\n\n\n\nนิยามปัญหา: ปัญหาหรือเป้าหมายที่เราต้องการจะแก้ด้วยการวิเคราะห์ข้อมูลแบบมีปฏิสัมพันธ์คืออะไร\nตั้งคำถาม: ตั้งชุดคำถามจากปัญหาที่สนใจ\nรวบรวม เปลี่ยนแปลง ทำความคุ้นเคยกับข้อมูล: เตรียมข้อมูลให้พร้อมสำหรับการวิเคราะห์ที่ต้องการ\nสร้างแบบจำลอง: พยายามใช้สถิติหรือเทคนิคทางmachine learning สร้างแบบจำลอง สรุป หรือวิเคราะห์ข้อมูล\nนำเสนอข้อมูลหรือแบบจำลอง: สรุปผลที่ได้และนำเสนอในรูปแแบที่เข้าใจได้ง่าย\nแปลผล: ทำความเข้าใจกับผลที่ได้ ขั้นตอนนี้สำคัญ\nสรุปผลและตั้งคำถามกับผลที่ได้: ตั้งคำถามและถามกลับจากผลที่ได้เพื่อให้ได้ข้อสรุปหรือเข้าใจปัญหามากขึ้น\n\n\n\n\n\nกระบวนการนี้ไม่เป็นลำดับ แต่เป็นกระบวนการที่วนกลับมาซ้ำอยู่เสมอ (กระโดดไปมาระหว่างขั้นตอน)\nบางกิจกรรมเป็นเอกลักษณ์ของมนุษย์เท่านั้น เช่น กำหนดปัญหา สร้างคำถาม เป็นต้น\nการแสดงผลเป็นส่วนเล็กน้อยของกระบวนการและประสิทธิภาพขึ้นอยู่กับขั้นตอนอื่น ๆ\nปฏิสัมพันธ์: ทุกครั้งที่คุณบอกให้คอมพิวเตอร์ทำอะไร (และส่งข้อมูลกลับมา)\n\nรวบรวมและแปลงข้อมูล\nระบุโมเดลและ/หรือคำค้นจากข้อมูล\nระบุวิธีการแสดงผล (และโมเดล)\nเรียกดูผลลัพธ์\nสังเคราะห์และสื่อสารข้อมูลที่รวบรวมได้\n\nปฏิสัมพันธ์โดยตรงกับการจัดการเชิงตรงกับการป้อนคำสั่ง: อินเตอร์เฟซ WIMP (การจัดการโดยตรงผ่านการคลิก หน้าต่างของโปรแกรม ไอคอน เมนู ฯลฯ) เป็นการปฏิสัมพันธ์ แต่เช่นเดียวกับการป้อนคำสั่งผ่านบรรทัดคำสั่ง\n\nคุณสามารถให้ผู้ใช้พิมพ์ได้!\n\nกลุ่มเป้าหมาย: ทักษะและความรู้พื้นฐานของพวกเขาคืออะไร? (ความรู้ด้านโดเมน สถิติ กราฟ)\n\n\n\n\n\nการกำหนดรายละเอียด (ความคิด → ข้อมูล/โมเดล): จำเป็นต้องแปลงคำถามและความคิดของเราให้สามารถอ่านได้เป็นข้อมูลที่คอมพิวเตอร์สามารถอ่านได้\n\nShiny ช่วยให้ผู้ที่ไม่ใช่โปรแกรมเมอร์สามารถทำการวิเคราะห์ข้อมูลได้ แต่ต้องมีความรู้ด้าน R เพื่อสร้างแอป\nแต่ยังมีเครื่องมือที่ง่ายกว่านี้อีกเช่นกัน\n\nการแสดงผล (ข้อมูล/โมเดล → สายตา)\n\nขั้นตอนถัดไปคือการค้นหาการแสดงผล (แสดงผลแบบสายตา) เพื่อให้ผู้ใช้สามารถตรวจสอบและเข้าใจได้\n“การตัดสินใจว่าจะแสดงผลอะไรเป็นเรื่องที่สำคัญเช่นเดียวกับการตัดสินใจว่าจะแสดงผลอย่างไร”\n“ความสวยงามของการแสดงผลจำเป็นต้องมีในระดับใดเพื่อที่จะเป็นประโยชน์สำหรับการวิเคราะห์ข้อมูล?”\n\n“ปัญหาการแสดงผลส่วนใหญ่สามารถแก้ไขได้ด้วยกราฟเพียงไม่กี่รูป”\n\nมีความยากที่จะใช้งาน ปรับแต่ง และผสมผสานกราฟอย่างชาญฉลาด/มีประสิทธิภาพ/นวัตกรรม\n\nการตีความ (สายตา → ความคิด)\n\n“สิ่งที่คนต้องรู้ในการคิดอย่างมีประสิทธิภาพเกี่ยวกับผลลัพธ์ของการสร้างโมเดลและการแสดงผล”\n“คนสามารถตีความและเชื่อใจในแอป shiny ของคุณได้หรือไม่?”"
  },
  {
    "objectID": "02-introduction.html#ทำไมตองแสดงผล",
    "href": "02-introduction.html#ทำไมตองแสดงผล",
    "title": "เริ่มต้น",
    "section": "ทำไมต้องแสดงผล",
    "text": "ทำไมต้องแสดงผล\n\nกราฟทั้งสี่ของอันสคอมบี\nอันสคอมบ์(F. J. Anscombe) ได้เขียนบทหนึ่งความลงในวารนักสถิติอเมริกัน(https://www.jstor.org/stable/2682899) ที่แสดงให้เห็นความสัมคัญของการวาดกราฟหรือการแสดงผลข้อมูลในการวิเคราะห์เชิงสถิติ\n\nTable 1 ผลลัพธ์จากการทำ linear regression กับข้อมูลของอันสคอมบ์\n\nคำถาม: เราพบอะไร\n\n\n\n#BlackLivesMatter\n\n\n\n\n\nTable 1:  โมเดลเชิงเส้นจากกราฟทั้งสี่ของอันสคอมบ์ \n  \n    \n    \n       \n      y1 (Set 1)\n      y2 (Set 2)\n      y3 (Set 3)\n      y4 (Set 4)\n    \n  \n  \n    (Intercept)\n3.000\n3.001\n3.002\n3.002\n    \n(1.125)\n(1.125)\n(1.124)\n(1.124)\n    x1\n0.500\n\n\n\n    \n(0.118)\n\n\n\n    x2\n\n0.500\n\n\n    \n\n(0.118)\n\n\n    x3\n\n\n0.500\n\n    \n\n\n(0.118)\n\n    x4\n\n\n\n0.500\n    \n\n\n\n(0.118)\n  \n  \n    \n      Notes: ...\n    \n  \n  \n\n\n\n\n\n\n\n### กราฟทั้งสี่ของอันสคอมบ์ (2)\n\nTable 2 ข้อมูลทั้ง 4 ของอันสคอมบ์ [@Anscombe1973-xv]\n\nQ: ข้อมูลแสดงอะไร อ่านเข้าใจง่ายหรือไม่\n\n\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\n\nTable 2: ?(caption)\n\n\n\n\n(a) Anscombe's quartet data\n\n\nx1\ny1\nx2\ny2\nx3\ny3\nx4\ny4\n\n\n\n\n10\n8.04\n10\n9.14\n10\n7.46\n8\n6.58\n\n\n8\n6.95\n8\n8.14\n8\n6.77\n8\n5.76\n\n\n13\n7.58\n13\n8.74\n13\n12.74\n8\n7.71\n\n\n9\n8.81\n9\n8.77\n9\n7.11\n8\n8.84\n\n\n11\n8.33\n11\n9.26\n11\n7.81\n8\n8.47\n\n\n14\n9.96\n14\n8.10\n14\n8.84\n8\n7.04\n\n\n6\n7.24\n6\n6.13\n6\n6.08\n8\n5.25\n\n\n4\n4.26\n4\n3.10\n4\n5.39\n19\n12.50\n\n\n12\n10.84\n12\n9.13\n12\n8.15\n8\n5.56\n\n\n7\n4.82\n7\n7.26\n7\n6.42\n8\n7.91\n\n\n5\n5.68\n5\n4.74\n5\n5.73\n8\n6.89\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nกราฟทั้ง 4 ของอันสคอมบ์ (3)\n\nFigure 1 นำเสนอข้อมูลในรูปแบบกราฟ\n\nQ: เราเห็นอะไรจากการนำเสนอนี้\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFigure 1: Anscombe’s quartet: Visualization\n\n\n\n\n\n\nThe Datasaurus Dozen\n\nFigure 2 ภาพเคลื่อนไหวของ the datasaurus dozen โดย Tom Westlake (see here, ต้นแบบมาจาก Alberto Cairo)\n\nQ: เราเห็นอะไรจากการนำเสนอนี้\n\n\n\n\n\n\n\nFigure 2: The Datasaurus Dozen โดย Tom Westlake\n\n\n\n\n\n\nการนำเสนอข้อมูลแบบมีปฏิสัมพันธ์\n\n“การนำเสนอข้อมูลแบบมีปฏิสัมพันธ์(interactive data visualization) ทำให้เราสามารถปรับเปลี่ยนรูปแบบหรือองค์ประกอบของกราฟหรือเชื่อมโยงกับการนำอื่นๆได้โดยตรง” [@Swayne1999-wf] (Wikipedia)\nการมีปฏิสัมพันธ์กับข้อมูลนี้ทำให้เราเข้าใจข้อมูลได้มากขึ้น [cf. @Cleveland1984-fy]\nระบบการนำเสนอข้อมูลเราพัฒนากันมาไกล อยากให้ลองดูโปรแกรมยุคแรกอย่าง PRIM-9 (1974) ดูครับ [@Friendly2006-aq, 23, see also Cleveland and McGill, 1988, Young et al. 2006]\n\nเราพัฒนากันมาไกล… John Tukey on prim9\n\nการมีปฏิสัมพันธ์กับข้อมูลทำให้เรา…\n\n…เข้าใจข้อมูลได้มากขึ้น (ในหลายมิติ)\n…หาความสัมพันธ์ของข้อมูลได้ง่าย\n…เข้าถึงข้อมูลได้ง่ายขึ้น โดยไม่จำเป็นต้องมีพื้นฐาน\n…สร้าง’เอกสาร’ที่มีปฏิสัมพันธ์กับคนอ่านได้"
  },
  {
    "objectID": "02-introduction.html#shiny",
    "href": "02-introduction.html#shiny",
    "title": "เริ่มต้น",
    "section": "Shiny",
    "text": "Shiny\n\nShiny คืออะไร?\nShiny คือ web application framework อันหนึ่งสำหรับภาษา R ที่เราสามารถเปลี่ยนรูปแบบการวิเคราะห์ไปอยู่ในรูปแบบ interactive web applications อืมมมม มันหมายความว่ายังไง?\n\nตัวหน้าตาของมันก็คือ webpage\nใน webpage นี้เราสามารถมีปฏิสัมพันธ์กับกับส่วนต่างๆที่ปรากฏหน้านั้นได้ (เราเรียกหน้าwebpageนี้ user interface)\nโดยข้างหลังของ webpage นี้ก็คือคอมพิวเตอร์ของเรานี่เอง (หรือที่บางทีเรียกว่า server)\nตัวserver นี้จะทำการรัน code R ที่เราเขียนสำหรับ webapp นี้\nเมื่อเราเปลี่ยนค่าinputsอะไรบางอย่างบน webapp ข้อมูลการปรับเปลี่ยนนี้จะถูกส่งไปที่คอมพิวเตอร์หรือserver\nคอมพิวเตอร์ก็จะทำการรัน code R ของเราใหม่โดยใช้ค่าที่เรา inputs ใหม่ (input functions)\nหลังจากนั้นคอมพิวเตอร์ก็จะส่ง outputs ใหม่กลับมาที่หน้า webpage (output functions)\nประวัติของ Shiny: Joe Cheng: The Past and Future of Shiny1\nPopularity: Shiny \n\nComparison: Ggplot2 , dplyr \n\n\n\n\nข้อดีและข้อเสียของ Shiny\n\nข้อดี R Shiny:\n\nสร้างตัวต้นแบบได้เร็ว: Shiny เป็นรูปแบบคำสั่งที่ใช้ง่ายและทำให้สามารถเปลี่ยนจากต้นแบบเป็นweb application ได้รวดเร็ว\nการมีปฏิสัมพันธ์: Shiny ช่วยให้เราสร้าง interactive web apps ได้สะดวก\nเป็นส่วนหนึ่งของ R Ecosystem: Shiny ถูกรวมเป็นส่วนหนึ่งของ R’s vast open-source ecosystem (มี package R สำหรับงานด้านต่าง ๆ เยอะมาก สำหรับภาษา python ก็มี shiny for python)\nแบบจำลองทางสถิติ และการนำเสนอ: เราสามารถที่จะประยุกต์ใช้แบบจำลองสถิติและนำเสนอผลลัพธ์ได้ใน webapp ได้ผ่าน Shiny\nไม่จำเป็นต้องมีทักษะด้านการพัฒนาweb application: With Shiny, you can create web apps using R code alone. Knowledge of HTML, CSS, or JavaScript is not necessary but can help\nReactivity: Shiny มีระบบโต้ตอบที่ยอดเยี่ยม\nการเผยแพร่และตีพิมพ์: เราสามารถที่จะเผยแพร่ apps ที่สร้างด้วย Shiny ได้สะดวก ไม่ว่าจะเป็นผ่านหลายช่องทางไม่ว่าจะเป็น RStudio’s Shiny server, Shinyapps.io, หรือใส่ไว้ในเอกสาร R Markdown documents หรือ websites\n\n\n\nข้อเสีบของ Shiny:\n\nประสิทธิภาพ: Shiny apps รันโดยอาศัยภาษา R ซึ่งเป็นภาษาแบบ interpreted language ฉะนั้นจะมีปัญหาเรื่องความรวดเร็วให้การประมวณผลข้อมูลหรือคำสั่งที่มีปริมาณมาก\nSingle-threaded: ภาษา R (และส่วนขยายอย่าง Shiny) เป็นการประมวณผลแบบ single-threaded จะมีปัญหากับการประมวณผลที่ต้องรับ inputs มากจากหลายผู้ใช้ในเวลาเดียวกัน (ดูเพิ่มเติมที่ here).\nความซับซ้อน: ถึงแม้ Shiny จะง่ายที่จะเรียนรู้แต่ก็เป็นอะไรที่ท้าทายในส่วนของการออกแบบในส่วนของการโต้ตอบ\nข้อจำกัดการดัดแปลง: มันง่ายที่จะสร้าง apps ด้วย Shiny แต่การปรับปรุงเปลี่ยนแปลงในส่วนของ user interface ก็ยังเป็นส่วนที่ท้าทายเพราะต้องอาศัยภาษาอื่น ๆ อย่าง JavaScript,CSS หรือแม้ package อื่น ๆ ช่วย\nการบันทึกและเก็บรวบรวมข้อมูล: การบันทึกและเก็บรวบรวมข้อมูลในรูปแบบฐานข้อมูลยังดูยุ่งยากสำหรับ Shiny\nค่าบำรุงรักษา: ค่าบำรุงรักษา Shiny apps ในระยะยาวยังดูสูงเพราะต้องอาศัยผู้เชี่ยวชาญเฉพาะด้าน\nSoftware Dependencies: Certain Shiny applications may have many software dependencies, which can be challenging to manage and could potentially lead to issues down the line."
  },
  {
    "objectID": "02-introduction.html#the-guerry-dashboard-the-app-we-will-build",
    "href": "02-introduction.html#the-guerry-dashboard-the-app-we-will-build",
    "title": "เริ่มต้น",
    "section": "The Guerry Dashboard: The app we will build",
    "text": "The Guerry Dashboard: The app we will build\n\nใน workshop นี้เราจะมาสร้าง Shiny app Figure 3 ด้วยกัน ลองดุ app นี้ (5-10 นาที) และตอบคำถาม:\n\nคำถามอะไรที่เราสามารถตอบได้โดยอาศัย app นี้\napp นี้ช่วยให้เราเข้าใจและวิเคราะห์ข้อมูลในappได้อย่างไร\nใน app นี้มีองค์ประกอบสำหรับการมีปฏิสัมพันธ์อะไรบ้าง\n\n\n\n\n\nFigure 3: (Source: Original image)\n\n\n\nData\n\nในappนี้เราจะวิเคราะห์ “Guerry data”\n?Guerry: ข้อมูลจาก A.-M. Guerry, “Essay on the Moral Statistics of France”\n\nGuerry::gfrance85 ประกอบด้วยแผนที่ฝรั่งเศสในปี ค.ศ. 1830 + Guerry data, ไม่รวม Corsica (Table 3 แสดงส่วนย่อย)\n\n\n\n\nData preparation code of the app\noptions(warn = -1)\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\n\n\n\nAttaching package: 'bs4Dash'\n\n\nThe following objects are masked from 'package:shiny':\n\n    actionButton, column, insertTab, navbarMenu, tabsetPanel\n\n\nThe following object is masked from 'package:graphics':\n\n    box\n\n\nData preparation code of the app\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\n\n\n\nAttaching package: 'shinyWidgets'\n\n\nThe following object is masked from 'package:bs4Dash':\n\n    progressBar\n\n\nData preparation code of the app\nlibrary(Guerry)\nlibrary(sf)\n\n\nLinking to GEOS 3.11.2, GDAL 3.6.2, PROJ 9.2.0; sf_use_s2() is TRUE\n\n\nData preparation code of the app\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\n\nData preparation code of the app\nlibrary(leaflet)\nlibrary(plotly)\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nData preparation code of the app\nlibrary(jsonlite)\n\n\n\nAttaching package: 'jsonlite'\n\n\nThe following object is masked from 'package:shiny':\n\n    validate\n\n\nData preparation code of the app\nlibrary(ggplot2)\nlibrary(GGally)\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\nData preparation code of the app\nlibrary(datawizard)\nlibrary(parameters)\n\n\n\nAttaching package: 'parameters'\n\n\nThe following object is masked from 'package:modelsummary':\n\n    supported_models\n\n\nData preparation code of the app\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\n\n# Import the 'gfrance85' data from the 'Guerry' package\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;% # Convert to a Simple Features (sf) object\n  as_tibble() %&gt;%  # Convert to a 'tibble'\n  st_as_sf(crs = 27572) %&gt;% # set the Coordinate Reference to 27572 System (CRS)\n  mutate(Region = case_match( # Create new region column\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;% # drop columns\n  select(Region:Department, where(is.numeric)) # select columns\n\n\nLoading required package: sp\n\n\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n\n\nData preparation code of the app\nkable(head(data_guerry[c(1,2,3,4,21,22)]))\n\n\n\n\nTable 3: Guerry dataset (subset of columns)\n\n\nRegion\nDepartment\nCrime_pers\nCrime_prop\nPop1831\ngeometry\n\n\n\n\nEast\nAin\n28870\n15890\n346.03\nMULTIPOLYGON (((801150 2092...\n\n\nNorth\nAisne\n26226\n5521\n513.00\nMULTIPOLYGON (((729326 2521...\n\n\nCentral\nAllier\n26747\n7925\n298.26\nMULTIPOLYGON (((710830 2137...\n\n\nEast\nBasses-Alpes\n12935\n7289\n155.90\nMULTIPOLYGON (((882701 1920...\n\n\nEast\nHautes-Alpes\n17488\n8174\n129.10\nMULTIPOLYGON (((886504 1922...\n\n\nSouth\nArdeche\n9474\n10263\n340.73\nMULTIPOLYGON (((747008 1925...\n\n\n\n\n\n\n\n\n\nข้อมูลจะแบ่งเป็น 85 departments (N = 85)\n\nซึ่งตอนหลังเรารวมเป็นพื้นที่\n\ngeometry: ตัวแปรที่อธิบายรูปร่างของพื้นที่ regions (บางที่เราก็ออกตัวแปรนี้ออก)\nAdvantages: ข้อมูลนี้น่าสนใจ เพราะมันมีแผนที่และข้อมูลซึ่งพร้อมใช้งานใน R\n\n\n\nส่วนประกอบของ Shiny app\n\nจากภาพ Figure 4, Shiny app ประกอบด้วย 2 ส่วน, คือ user interface (UI) กับ server, ที่ส่งผ่านเป็นตัวแปรหนึ่งใน shinyApp() ซึ่งเป็นตัวสร้าง Shiny app จากคู่ ui/server\n\n\n\n\nFigure 4: Source: https://hosting.analythium.io/the-anatomy-of-a-shiny-application/ (c) Analythium\n\n\n\n\nShiny app อันแรก\n\nด้านล่างนี้เราจะสร้าง app อันแรกกัน และจะอาศัยโอกาสนี้อธิบายส่วนประกอบพื้นฐานของ Shiny app (ตัวอย่าง here).\n\n\nติดตั้ง packages ที่เกี่ยวข้อง:\n\n\ninstall.packages(\"shiny\")\ninstall.packages(\"tidyverse\")\n# Guerry package is already installed\n\n\nสร้าง folder ชื่อ “myfirstapp” ใน working directory.\nสร้าง script file ใน Rstudio และ save ใน working directory ด้วยชื่อ app.R.\nCopy code ด้านล่างนี้และวางใน app.R\n\n\n\nCode of the tabulate tab subset of the app\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  )\n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, c(\"Region\", \"Department\",var)]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n\n}\n\nshinyApp(ui, server)\n\n\n\nเราสามารถที่จะรันหรือหยุด app โดยการคลิ็กปุ่ม Run App (Figure 5)\n\n\n\n\n\n\nFigure 5: The Run App button can be found at the top-right of the source pane."
  },
  {
    "objectID": "02-introduction.html#minimum-viable-product-mvp",
    "href": "02-introduction.html#minimum-viable-product-mvp",
    "title": "เริ่มต้น",
    "section": "Minimum viable product (MVP)",
    "text": "Minimum viable product (MVP)\n\n…คอนเซ็ปการสร้าง app แบบ MVP (Figure 6)!\n\n\n\n\n\n\nFigure 6: Illustration of MVP (Source: Fay et al. 2021 - read description)\n\n\n\n\n\n“version […] เพียงพอที่จะใช้งาน โดยลูกค้า” แล้วเก็บรวบรวมคำติชม (Wikipedia)\n“ทำให้มันทำงานได้ในระดับเล็กก่อน ซึ่งมันทำให้ง่ายในการปรับปรุงเปลี่ยนแปลงต่อไป” (Fay et al. 2021)\nทำหน้าตาก่อน (UI)“: ทางปลอดภัยที่สุด (Fay et al. 2021)\n\nเห็นพร้องกันในส่วนประกอบ: ช่วยให่ทุกคนที่เกี่ยวข้องเห็นด้วยกับคุณสมบัติต่างๆของ app ที่ควรมีหลังจากที่ UI เริ่มทำขึ้นมาแล้ว\nทำงานให้เป็นระเบียบ: “มันง่ายที่เราจะทำในส่วนเล็กๆและรู้ว่ามันทำงานยังไงก่อนที่จะรวมเข้ากับระบบใหญ่”\nและ…\n\n..เราก็ทำตามแนวทางนี้ คือค่อยสร้างความซับสน ซับซ้อนอย่างเป็นระบบ"
  },
  {
    "objectID": "02-introduction.html#ขนตอนการทำงาน-พฒนา-แกปญหา-และหาความชวยเหลอ",
    "href": "02-introduction.html#ขนตอนการทำงาน-พฒนา-แกปญหา-และหาความชวยเหลอ",
    "title": "เริ่มต้น",
    "section": "ขั้นตอนการทำงาน: พัฒนา, แก้ปัญหา และหาความช่วยเหลือ",
    "text": "ขั้นตอนการทำงาน: พัฒนา, แก้ปัญหา และหาความช่วยเหลือ\n\nดูขั้นตอนใน @wickham2021mastering [Ch. 5, 20.2.1]\nสามขั้นตอนสำหรับ Shiny :\n\nพัฒนาพื้นฐาน วงรอบของการสร้างapp เปลี่ยนแปลง และทดสอบผลลัพธ์\nแก้ปัญหา, หาว่า code หรือวิธีการของเราผิดตรงไหน อย่างไร\nเขียนอธิบาย, พยายามเขียนอธิบายว่าเราคิดหรือทำอะไรใน code เพื่อที่คนอื่นจะได้มาช่วยเหลือแก้ไข codeได้\n\n\n\nขั้นตอนในการพัฒนา\n\nการสร้างapp: เริ่มเขียน app โดยอาศัย code R ด้านล่างนี้ (Shift + Tab หรือเลือก New Project -&gt; Shiny Web Application)\nดูที่เราเปลี่ยน:\nเขียน code2\nรันapp Cmd/Ctrl + Shift + Enter.\nทดลอง app ด้วยการเปลี่ยนค่าต่างๆ\nปิดapp\nเริ่มข้อ 1 ใหม่\n\n\nlibrary(shiny)\nui &lt;- fluidPage(\n  \n)\nserver &lt;- function(input, output, session) {\n  \n}\nshinyApp(ui, server)\n\n\nListening on http://127.0.0.1:4827\n\n\n\n\n\n\ntips\n\nควบคุมการแสดงผล: โดยเริ่มต้นทุกครั้งที่รันapp ในRstudio มันจะ pop-out เป็นอีกหน้าต่างใหม่ แต่เราก็สามารถที่จะให้มันแสดง Run in Viewer Pane กับ Run Externalได้\noutline เอกสารหรือcode: Cntrl + Shift + O\nลองดูว่าcodeทำงานยังไง: ด้วยการลบที่ไม่ต้องการทิ้งช้าๆ\n\nรันappดูว่ามันจะยังทำงานอยู่ไหม\nถ้าสนใจเฉพาะส่วน UI ก็เหลือส่วนserverไว้แค่ server &lt;- function(input, output, session) {}\n\n\n\n\n\nขั้นตอนแก้ปัญหา\n\nส่วนใหญ่มีสาเหตุมาจากที่ Shiny ไม่เข้าใจว่าเราต้องการอะไรและเราไม่รู้ว่าเขียนยัง\nเราต้องพัฒนาขั้นตอนเพื่อที่จะแก้ปัญหานี้อย่างมีปะสิธิภาพ\nแนะนำให้ดูที่ @wickham2021mastering [Ch. 5.2, [link](https://mastering-shiny.org/action-workflow.html#debugging)]"
  },
  {
    "objectID": "02-introduction.html#footnotes",
    "href": "02-introduction.html#footnotes",
    "title": "เริ่มต้น",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nJoe Cheng is the Chief Technology Officer at RStudio and was the original creator of the Shiny web framework, and continues to work on packages at the intersection of R and the web.↩︎\nทดสอบอัตโนมัติ↩︎"
  },
  {
    "objectID": "01-workshop.html",
    "href": "01-workshop.html",
    "title": "Shiny เบื้องต้น",
    "section": "",
    "text": "สำหรับผู้ที่มีความรู้ภาษา R และต้องการที่จะสร้างเอกสารหรือเว็บแอปพลิเคชั่นที่มีปฏิสัมพันธ์กับผู้ใช้งาน\nผู้สอน\nดร. สมภพ ศรลัมพ์ (sompob@tropmedres.ac) ดร. นพพล ชูศรี (noppon.c@cmu.ac.th)\n\n\n\n\nช่วงที่ 1: เวลา 9:30 น. - 12:00 น. - แนะนำเรื่องรูปแบบการใช้งาน (UX/UI)\n\nเข้าใจประสบการณ์ผู้ใช้ (UX) และอินเตอร์เฟซผู้ใช้ (UI)\n\nอธิบายเกี่ยวกับ UX/UI\nความแตกต่างระหว่าง UX และ UI\n\nหลักการออกแบบ UX/UI\n\nความสำคัญของความใช้งานและความสามารถ\nความต้องการในเรื่องความสอดคล้อง ความง่าย และการตอบสนอง\n\nการวิจัย UX และการออกแบบที่ให้มุมมองจากผู้ใช้\n\nเข้าใจความต้องการและเป้าหมายของผู้ใช้\nการสร้างบุคคลิกภาพผู้ใช้และสถานการณ์การใช้งาน\nแนะนำการสร้างร่างและโปรโตไทป์\n\nแนะนำการทดสอบความสามารถในการใช้งาน\n\nเข้าใจความสำคัญและประโยชน์ของการทดสอบความสามารถในการใช้งาน\nประเภททดสอบความสามารถที่แตกต่างกัน\nการดำเนินการทดสอบความสามารถในการใช้งาน\n\nการบริบททางปฏิบัติ: การสร้างและทดสอบโปรโตไทป์\n\nพักกลางวัน: เวลา 12:00 น. - 1:00 น.\nช่วงที่ 2: เวลา 1:00 น. - 4:30 น. - แนะนำ Shiny และ R\n\nแนะนำ R\n\nประวัติย่อและการใช้งาน\nไวยากรณ์พื้นฐานของ R และชนิดข้อมูลพื้นฐาน\nการนำเข้า/ส่งออกข้อมูลใน R\n\nแนะนำ Shiny\n\nShiny คืออะไร?\nเข้าใจแอป Shiny - UI.R และ Server.R\nการสร้างแอป Shiny “Hello World”\n\nการพัฒนาแอป Shiny พื้นฐาน\n\nเข้าใจข้อมูลผู้ใช้งานพื้นฐาน (ข้อความ เลือก, เช็คบ็อกซ์, ฯลฯ)\nการสร้างผลลัพธ์ที่ตอบสนอง (ตาราง, แผนภูมิ)\nสำรวจเค้าโครงและพาเนล\n\nการบริบททางปฏิบัติ: การสร้างแอป Shiny พื้นฐาน\n\n\n\n\nช่วงที่ 3: เวลา 9:30 น. - 12:00 น. - Shiny ระดับกลาง\n\nปรับแต่งรูปลักษณ์\n\nแนะนำธีม Shiny\nการใช้งานแท็ก HTML ใน Shiny\nการใช้ CSS ใน Shiny\n\nแนวคิดขั้นสูงของ Shiny\n\nเข้าใจการโปรแกรมตอบสนองและแนวคิดเกี่ยวกับความตอบสนอง\nเรียนรู้เกี่ยวกับฟังก์ชันการแสดงผลและสมการที่ตอบสนอง\n\nการจัดการข้อมูลใน Shiny\n\nการใช้งานกรอบข้อมูลใน Shiny\nการเชื่อมต่อ Shiny กับฐานข้อมูล\n\nการบริบททางปฏิบัติ: พัฒนาแอป Shiny พร้อมคุณสมบัติขั้นสูง\n\nพักกลางวัน: เวลา 12:00 น. - 1:00 น.\nช่วงที่ 4: เวลา 1:00 น. - 4:30 น. - Shiny สำหรับงานวิจัยมาลาเรีย\n\nเข้าใจบริบท\n\nอภิปรายความท้าทายและความต้องการเฉพาะในงานวิจัยมาลาเรีย\nShiny จะมีประโยชน์อย่างไร?\n\nกรณีศึกษา\n\nนำเสนอแอป Shiny ในงานวิจัยทางสุขภาพหรืองานวิจัยที่เกี่ยวข้อง\nอภิปรายทฤษฎีและบทเรียนจากประสบการณ์\n\nการพัฒนาแอป Shiny สำหรับงานวิจัยมาลาเรีย\n\nกำหนดปัญหา\nร่างของการแก้ไขปัญหา\nการพัฒนาแอปขั้นต่อไปตามขั้นตอน\n\nสรุปและสอบถามคำถาม\n\nอภิปรายแหล่งข้อมูลการเรียนรู้ในอนาคต\nการตอบคำถามที่เหลืออยู่\nสรุปหลักสูตร"
  },
  {
    "objectID": "01-workshop.html#อบรมระยะสน-หลกสตร-shiny-ขนพนฐาน",
    "href": "01-workshop.html#อบรมระยะสน-หลกสตร-shiny-ขนพนฐาน",
    "title": "Shiny เบื้องต้น",
    "section": "",
    "text": "สำหรับผู้ที่มีความรู้ภาษา R และต้องการที่จะสร้างเอกสารหรือเว็บแอปพลิเคชั่นที่มีปฏิสัมพันธ์กับผู้ใช้งาน\nผู้สอน\nดร. สมภพ ศรลัมพ์ (sompob@tropmedres.ac) ดร. นพพล ชูศรี (noppon.c@cmu.ac.th)\n\n\n\n\nช่วงที่ 1: เวลา 9:30 น. - 12:00 น. - แนะนำเรื่องรูปแบบการใช้งาน (UX/UI)\n\nเข้าใจประสบการณ์ผู้ใช้ (UX) และอินเตอร์เฟซผู้ใช้ (UI)\n\nอธิบายเกี่ยวกับ UX/UI\nความแตกต่างระหว่าง UX และ UI\n\nหลักการออกแบบ UX/UI\n\nความสำคัญของความใช้งานและความสามารถ\nความต้องการในเรื่องความสอดคล้อง ความง่าย และการตอบสนอง\n\nการวิจัย UX และการออกแบบที่ให้มุมมองจากผู้ใช้\n\nเข้าใจความต้องการและเป้าหมายของผู้ใช้\nการสร้างบุคคลิกภาพผู้ใช้และสถานการณ์การใช้งาน\nแนะนำการสร้างร่างและโปรโตไทป์\n\nแนะนำการทดสอบความสามารถในการใช้งาน\n\nเข้าใจความสำคัญและประโยชน์ของการทดสอบความสามารถในการใช้งาน\nประเภททดสอบความสามารถที่แตกต่างกัน\nการดำเนินการทดสอบความสามารถในการใช้งาน\n\nการบริบททางปฏิบัติ: การสร้างและทดสอบโปรโตไทป์\n\nพักกลางวัน: เวลา 12:00 น. - 1:00 น.\nช่วงที่ 2: เวลา 1:00 น. - 4:30 น. - แนะนำ Shiny และ R\n\nแนะนำ R\n\nประวัติย่อและการใช้งาน\nไวยากรณ์พื้นฐานของ R และชนิดข้อมูลพื้นฐาน\nการนำเข้า/ส่งออกข้อมูลใน R\n\nแนะนำ Shiny\n\nShiny คืออะไร?\nเข้าใจแอป Shiny - UI.R และ Server.R\nการสร้างแอป Shiny “Hello World”\n\nการพัฒนาแอป Shiny พื้นฐาน\n\nเข้าใจข้อมูลผู้ใช้งานพื้นฐาน (ข้อความ เลือก, เช็คบ็อกซ์, ฯลฯ)\nการสร้างผลลัพธ์ที่ตอบสนอง (ตาราง, แผนภูมิ)\nสำรวจเค้าโครงและพาเนล\n\nการบริบททางปฏิบัติ: การสร้างแอป Shiny พื้นฐาน\n\n\n\n\nช่วงที่ 3: เวลา 9:30 น. - 12:00 น. - Shiny ระดับกลาง\n\nปรับแต่งรูปลักษณ์\n\nแนะนำธีม Shiny\nการใช้งานแท็ก HTML ใน Shiny\nการใช้ CSS ใน Shiny\n\nแนวคิดขั้นสูงของ Shiny\n\nเข้าใจการโปรแกรมตอบสนองและแนวคิดเกี่ยวกับความตอบสนอง\nเรียนรู้เกี่ยวกับฟังก์ชันการแสดงผลและสมการที่ตอบสนอง\n\nการจัดการข้อมูลใน Shiny\n\nการใช้งานกรอบข้อมูลใน Shiny\nการเชื่อมต่อ Shiny กับฐานข้อมูล\n\nการบริบททางปฏิบัติ: พัฒนาแอป Shiny พร้อมคุณสมบัติขั้นสูง\n\nพักกลางวัน: เวลา 12:00 น. - 1:00 น.\nช่วงที่ 4: เวลา 1:00 น. - 4:30 น. - Shiny สำหรับงานวิจัยมาลาเรีย\n\nเข้าใจบริบท\n\nอภิปรายความท้าทายและความต้องการเฉพาะในงานวิจัยมาลาเรีย\nShiny จะมีประโยชน์อย่างไร?\n\nกรณีศึกษา\n\nนำเสนอแอป Shiny ในงานวิจัยทางสุขภาพหรืองานวิจัยที่เกี่ยวข้อง\nอภิปรายทฤษฎีและบทเรียนจากประสบการณ์\n\nการพัฒนาแอป Shiny สำหรับงานวิจัยมาลาเรีย\n\nกำหนดปัญหา\nร่างของการแก้ไขปัญหา\nการพัฒนาแอปขั้นต่อไปตามขั้นตอน\n\nสรุปและสอบถามคำถาม\n\nอภิปรายแหล่งข้อมูลการเรียนรู้ในอนาคต\nการตอบคำถามที่เหลืออยู่\nสรุปหลักสูตร"
  },
  {
    "objectID": "01-workshop.html#แนะนำตว",
    "href": "01-workshop.html#แนะนำตว",
    "title": "Shiny เบื้องต้น",
    "section": "แนะนำตัว",
    "text": "แนะนำตัว\n\nนพพล\n\nศิษย์เก่ามหิดลวิทยานุสรณ์\nPhD Computing Science\nปัจจุบันเป็นอาจารย์สอนที่ วิทยาลัยศิลปะ สื่อและเทคโนโลยี มหาวิทยาลัยเชียงใหม่\n\nสมภพ\n\nศิษย์เก่ามหิดลวิทยานุสรณ์\nPhD BioMolecular Sciences\nปัจจุบันเป็นักวิจัยที่หน่วยวิจัยโรคเขตร้อนมหิดล อ๊อกซ์ฟอร์ด\n\nผู้เข้าร่วมฝึกอบรมแนะนำตัวเอง\n\nชื่อ-สกุล ชื่อเล่น\nหน่วยงาน\nทำไมถึงอยากเรียน Shiny หรือทำวิจัยเรื่องอะไร"
  },
  {
    "objectID": "01-workshop.html#เอกสารอางองหนงสอ-และ-codes",
    "href": "01-workshop.html#เอกสารอางองหนงสอ-และ-codes",
    "title": "Shiny เบื้องต้น",
    "section": "เอกสารอ้างอิง/หนังสือ และ codes",
    "text": "เอกสารอ้างอิง/หนังสือ และ codes\nหนังสือที่อยากแนะนำสำหรับการใช้งาน Shiny\n1. Mastering Shiny by Hadley Wickham\n2. Outstanding User Interfaces With Shiny by David Granjon\n3. Engineering Production-Grade Shiny Apps by Colin Fay\n4. The Shiny AWS Book by Matt Dancho\n\nสำหรับการอบรมนี้ code บางส่วนถูกเก็บไว้ที่ https://github.com/AMMNet-Thailand/ShinyWorkshop"
  },
  {
    "objectID": "03-user-interface.html",
    "href": "03-user-interface.html",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "",
    "text": "จุดประสงค์:\n\nเข้าใจตรรกะการทำงานของ user interfaces ใน Shiny\nเรียนรู้ที่จะสร้าง UIs โดยใช้ layouts, inputs และ outputs ต่าง ๆ\nคุ้นเคยกับ UI functions อย่างเช่น fluidPage(), dashboardPage(), menuItem(), tabItems(), tabsetPanel() และ tabPanel()\nเข้าใจ UI ของ Guerry app\nSources: @wickham2021mastering [Ch. 2]"
  },
  {
    "objectID": "03-user-interface.html#พนฐาน",
    "href": "03-user-interface.html#พนฐาน",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "พื้นฐาน",
    "text": "พื้นฐาน\n\nพยามยามแยกส่วน Shiny code ที่สร้าง UI (front end) กับส่วนการทำงานหลังบ้าน (server/back end).\nตอนนี้เราโฟกัสไปที่ตัวหน้าตาหรือ front end และก็ดูพวก inputs และ outputs\n\nอย่าเพิ่งรวมตัวหรือต่อ inputs กับ outputs เข้าด้วยกัน\n\nให้โฟกัสกับตัวองค์ประกอบหรือ components พื้นฐาน (ที่มากับตัว Shiny package) ส่วน components อิ่นๆ สามารถดูได้ที่ awesome shiny extenstions"
  },
  {
    "objectID": "03-user-interface.html#ui-layout",
    "href": "03-user-interface.html#ui-layout",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "UI: Layout",
    "text": "UI: Layout\n\nShiny app โดยทั่วไปจะประกอบด้วย ui, server และ shinyApp(ui=ui, server = server)\n\nui &lt;- function(): เป็น function ที่ใช้สำหรับสร้าง UI\n\nUI แสดง inputs และ outputs ต่างๆ\n\nShiny provides different functions that can be used to create basic layouts\n\nfluidPage() ใช้สำหรับสร้าง classic fluid layout\ndashboardPage() สำหรับสร้าง dashboard layout (ซึ่ง Guerry dashboard ก็ใช้ function นึ้)\n\n\nfluidPage\n\nfluidPage(): เป็น layout พื้นฐาน\n\nสามารถที่จะแสดงผลโดยปรับเปลี่ยนขนาดอัตโนมัติตามขนาดของ web browser (อย่างเช่น smartphone)\nlayout ประกอบด้วยแถวที่แบ่งเป็น columns\n\nrows เป็นตัวที่ทำให้ตัวองค์ประกอบต่างๆมันแสดงผลในบรรทัดเดียวกัน\ncolumns เป็นตัวกำหนดว่าในแนวขวางเจ้าองค์ประกอบนั้นๆมันจะกว้างเท่าไหร่ (ภายในตารางกว้าง 12 หน่วย)\n\n\nด้านล่างเป็น UI กับ title panel และ sidebar panel\n\ntitlePanel() และ sidebarLayout() สำหรับสร้าง Shiny app/layout พื้นฐานที่มี sidebar\nsidebarLayout() จะมี 2 functions\n\nsidebarPanel(): เพื่อแสดงเนื้อหาใน sidebar\nmainPanel(): เพื่อแสดงเนื้อหา main panel\n\n\n\nfluidRow() และ column(): เพือแบ่ง ui เป็น rows/columns\n\nทดลอง code ด้านล่างนี้\n\n\n\nCode: Creating a simple UI\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"Title: Sidebar panel\"),\n    \n    mainPanel(\"Title: Main panel\",\n              fluidRow(\n                column(width = 4,\"Column 1: Description here\"),\n                column(width = 4, \"Column 2: Model summary\")\n                ,\n                column(width = 3, \n                       offset = 1, \n                       \"Column 3: Model visualization\")\n              )\n  )))\n\nserver &lt;- function(input, output){}\n\nshinyApp(ui=ui, server = server)\n\n\n\nเปลี่ยน sidebarLayout(position = \"right\",...) เพื่อขยับ sidebar อยู่ด้านขวา\nnavbarPage(): สำหรับสร้าง UI multi-page user-interface ที่มี navigation bar\nบางคริั้งใส่ขอบก็ช่วย..\n\n\n\nCode: Adding borders for better understanding of UI\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"Title: Sidebar panel\"),\n    \n    mainPanel(\"Title: Main panel\",\n              fluidRow(\n                column(style='border: 1px solid black',\n                       width = 4,\"\n                       Column 1: Description here\"),\n                column(style='border: 1px solid black',\n                       width = 4, \"Column 2: Model summary\")\n                ,\n                column(style='border: 1px solid black',\n                       width = 3, \n                       offset = 1, \n                       \"Column 3: Model visualization\")\n              )\n    )))\n\nserver &lt;- function(input, output){}\n\nshinyApp(ui=ui, server = server)\n\n\n\nการสร้าง panels และ tabs\n\ntabsetPanel() + tabPanel()\n\nสำหรับ sidebar layout แต่แบ่ง main panel เป็น tabs\nผู้ใช้สามารถที่จะสลับไปมาระหว่าง tabs ได้\n\n\n\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"This is the sidebar panel\"),\n    \n    mainPanel(\n      tabsetPanel(type = \"tabs\",\n                  tabPanel(\"3d Frequency Plot\", \n                           \"Tab 1: plot here\"),\n                  tabPanel(\"Histogram\", \n                           \"Tab 2: another plot here\"),\n                  tabPanel(\"Model Summary\", \n                           h4(\"Tab 3: estimation results here\")),\n                  tabPanel(\"Data Summary\", \n                           h4(\"Tab 4: Variable summaries\"))\n      ))))\n  \n  server &lt;- function(input, output){}\n  \n  shinyApp(ui=ui, server = server)\n\n\n\n\ndashboardPage\n\ndashboardPage(): สำหรับสร้าง dashboard interface\n\nfunction นี้จะมีอยู่ใน packages shinydashboard และ bs4Dash (ใช้ bs4Dash1!)\ndashboardHeader(): สร้างส่วนหัว (header) ของ dashboard\ndashboardSidebar(): สร้าง dashboard sidebar\n\nsidebar โดยปกติจะประกอบด้วย sidebarMenu, หรืออาจเป็น sidebarSearchForm, หรือ Shiny inputs อื่นๆ\n\ndashboardBody(): สำหรับสร้าง main body ที่อาจประกอบด้วย boxes หรือ tabItems\n\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"The Guerry Dashboard\",\n\n  ### Header ----\n  header = dashboardHeader(),\n\n  ### Sidebar ----\n  sidebar = dashboardSidebar(),\n\n  ### Body ----\n  body = dashboardBody()\n)\n\n# Server ----\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\nใส่พวก items และ tabs\n\n?sidebarMenu(): สร้าง sidebarMenu ภายใน dashboardSidebar\n\nmenuItem(tabName = \"...\", text = \"...\", icon = icon(\"table\")): ใส่หนึ่ง item ใน sidebarMenu\n\ntabItems(): สร้างตัว container สำหรับ tab items\n\ntabItem(tabName = \"insp\", ...): สร้าง tab ใส่ใน tab items container\nสามารถใช้ร่วมกับ fluidRow() และ column()\nเชื่อมต่อกับผ่านชื่อ tabName\n\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"The Guerry Dashboard\",\n\n  ### Header ----\n  header = dashboardHeader(\n    title = \"Title here\"\n  ),\n\n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_table\", \n               text = \"Table data\", \n               icon = icon(\"table\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( # start tabItems\n\n      tabItem(\n        tabName = \"tab_table\",\n        hr(), # add separation line\n        \"Here we will put a table\"\n      )\n      \n    ) # end tabItems\n  )\n) # End UI\n\n\n# Server ----\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n\nรูปภาพ\n\nimg() function สำหรับใส่ image\n\nimg(src = \"http://.../img-2.jpg\", height = 35, width = 35): Load image จาก website หรือ folder\n\nเก็บ image(s) ไว้ที่เครื่อง\n\nwww subfolder สำหรับเก็บข้อมูล(images, data etc.) ไว้ใช้กับapp\nถ้า working directory = app directory กก็สามารถสร้างได้ด้วยคำสั่ง: dir.create(\"www\")\nภาพที่เก็บไว้ที่ www สามรถเรียกใช้ได้เลยโดยไม่ต้องพิมพ์ชื่อwwwนำหน้าชื่อไฟล์\n\ne.g., img(src = \"guerry.jpg\", width = \"100%\")\n\n\n\n\n\nCode: Adding images\n1ui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  \n  ### Header ----\n2  header = dashboardHeader(\n3    span(style = \"display: inline-block; width: 100%;\"),\n4    a(\n      class = \"logo\",\n      href = \"https://ammnet.org/\",\n      img(src = \"ammnet.png\", style = \"height: 1.8em;\")\n    ),\n5    title = tagList(\n      img(src = \"ammnet.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  \n  ### Sidebar ----\n6  sidebar = dashboardSidebar(\n    sidebarMenu(\n7      menuItem(tabName = \"tab_image\",\n               text = \"Image section\", \n               icon = icon(\"image\"))\n    )\n  ),\n  ### Body ----\n8  body = dashboardBody(\n9    tabItems(\n10      tabItem(\"tab_image\",\n              img(src = \"https://journals.openedition.org/belgeo/docannexe/image/11893/img-1.jpg\", width = 358, height = 476)\n      )\n    ) # end tabItems\n  )\n) # End UI\n\n# Server ----\n\n11server &lt;- function(input, output, session) {}\n\n12shinyApp(ui, server)\n\n\n\n1\n\ndashboardPage(): function หลักสำหรับสร้าง dashboard page layout ใน Shiny.\n\n2\n\ndashboardHeader(): Function สำหรับ header ของ dashboard.\n\n3\n\nspan(): Function เพื่อทำ HTML span กับตัว element โดยใช้ style attribute ที่ควบคุมการแสดงผลของตัว element นั้นๆ\n\n4\n\na(): Function สำหรับทำ hyperlink element (“a” HTML tag) กับ specified class, href attribute (URL), และ nested img (image) element\n\n5\n\ntagList(): Function สำหรับทำ HTML list ในที่นี้มันถูกใช้เพื่อรวม title เข้าด้วยกัน\n\n6\n\ndashboardSidebar(): Function สำหรับสร้าง sidebar ของ dashboard.\n\n7\n\nmenuItem(): Function เพื่อเพิ่ม item เข้าไปใน sidebar menu\n\n8\n\ndashboardBody(): Function เพื่อสร้างตัว body ของ dashboard.\n\n9\n\ntabItems(): Function สร้างส่วน tabbed content ตัว arguments คือคู่ของ tab names กับตัวเนื้อหา\n\n10\n\ntabItem(): Function สำหรับสร้าง tab item ตัว arguments คือคู่ของ tab names กับตัวเนื้อหา\n\n11\n\nserver: สำหรับใส่การทำงานส่วนของ server ในกรณีนี้ว่างไว้ก่อน\n\n12\n\nshinyApp(ui, server): function หลักสำหรับสร้าง Shiny app ซึ่งมันต้องการส่วน UI กับส่วน server ตามที่ได้เขียนcodeไว้\n\n\n\n\n\nใส่ images\n\nตัวอย่างสำหรับใส่ภาพ\n\n\n\nCode: Adding images\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  \n  ### Header ----\n  header = dashboardHeader(\n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://ammnet.org/\",\n      img(src = \"ammnet.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"ammnet.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  \n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_image\",\n               text = \"Image section\", \n               icon = icon(\"image\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( \n      tabItem(\"tab_image\",\n              img(src = \"https://journals.openedition.org/belgeo/docannexe/image/11893/img-1.jpg\", width = 358, height = 476),\n                            img(src = \"https://journals.openedition.org/belgeo/docannexe/image/11893/img-1.jpg\", width = 358, height = 476)\n      )\n    ) # end tabItems\n  )\n) # End UI\n\n# Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n\n\nExercise: UI layout\n\nพยายามทำความเข้าใจ code Section 2.3.\nเปลี่ยน website title เป็น “A big name in politics” หรืออะไรก็ได้ตามต้องการ\nเปลี่ยน sidebar menu title เป็น “The Arni dashboard” หรืออะไรก็ได้ตามต้องการ\nเปลี่ยนภาพของ Guerry เป็นภาพอื่น เช่นภาพของ Arnold Schwarzenegger จาก web เช่น here.\n\n\nหรือจะทดลองเรียกภาพที่เก็บไว้ใน www มาใช้ดู\n\n\n\n\n\n\n\nSolution: ใช้ภาพจาก link\n\n\n\n\n\n\n# UI ----\nui &lt;- dashboardPage(\n  title = \"A big name in politics\",\n  \n  ### Header ----\n  header = dashboardHeader(\n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://ammnet.org/\",\n      img(src = \"ammnet.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"ammnet.png\", width = 35, height = 35),\n      span(\"The Arni Dashboard\", class = \"brand-text\")\n    )\n  ),\n  \n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_image\", \n               text = \"Image section\", \n               icon = icon(\"image\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( # start tabItems\n      tabItem(\"tab_image\",\n              img(src = \"http://assets.schwarzenegger.com/images/img-2.jpg\", \n                  width = 729, height = 423)\n      )\n    ) # end tabItems\n  )\n) # End UI\n\n# Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\nSolution: ใช้ภาพจาก www folder\n\n\n\n\n\n\nตรวจดูว่าเราอยู่ในdirectoryอะไร getwd().\nเช็คดูอีกครั้งว่าไฟล์ app.R อยู่ใน directory เดียวกันนี้\nใช้คำสั่ง dir.create(\"www\") หรือปุ่มใน RStudio เพื่อสร้าง www folder\nเก็บภาพจาก link ไว้ใน www folder นี้\nหลังจากนั้นก็เพิ่มภาพโดยใช้คำสั่ง img(src = \"img-2.jpg\", width = 729, height = 423)\n\n\nภาพที่เก็บใน www สามารถเรียกใช้ได้เลยโดยไม่ต้องพิมพ์path\n\n\nรัน app\n\n\n# UI ----\nui &lt;- dashboardPage(\n  title = \"A big name in politics\",\n  \n  ### Header ----\n  header = dashboardHeader(\n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://ammnet.org/\",\n      img(src = \"ammnet.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Arni Dashboard\", class = \"brand-text\")\n    )\n  ),\n  \n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_image\", \n               text = \"Image section\", \n               icon = icon(\"image\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( # start tabItems\n      tabItem(\"tab_image\",\n              img(src = \"img-2.jpg\", \n                  width = 729, height = 423)\n      )\n    ) # end tabItems\n  )\n) # End UI\n\n# Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "03-user-interface.html#ui-inputs",
    "href": "03-user-interface.html#ui-inputs",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "UI: Inputs",
    "text": "UI: Inputs\n\nUI Inputs: โครงสร้างทั่วไป\n\ninputId argument:\n\ninputId ทำหน้าที่เป็นตัวเชื่อม front end กับ back end โดยที่ถ้า UI มี input ที่มีชื่อ ID name ฝั่งของ server function สามารถเข้าถึงค่าผ่าน input$name\nname` = ตัวอักษรง่ายๆ (ตัวหนังสือ, เลข และ underscores) และ จำเพาะ ไม่ซ้ำ\nInputs จะถูกเก็บใน list ซึ่งเรียกผ่าน input$...\n\nlabel argument: สำหรับ label ที่อ่านเข้าใจง่าย\nvalue argument: ค่า default value\nส่วนที่เหลือ อีก 4 ตัว ก็เป็นค่าเฉพาะอื่นๆสำหรับตัวแปรนั้นๆ\nแนะนำ: ให้ใช้ตำแหน่งกับ inputId และ label และส่วนอื่นๆใช้ชื่อ\n\nQ: เราอ่านคำสั่งนี้ว่าอย่างไร\n\nsliderInput(\"min\", \"Limit (minimum)\", value = 50, min = 0, max = 100)\n\n\n\n\n\nUI Inputs: Logic\n\nWidget = Web element ที่ผู้ใช้สามารถมีปฏิสัมพันธ์ด้วยได้ (Shiny widget gallery)\n\nผู้ใช้สามารถส่งข้อความไปยัง serverได้ (เช่น “ผมต้องการเลือกตัวแปรนี้”)\n\nเบื้องหลังมันจะเหมือนกันหมดสำหรับ logic ของ widgets\n\nผู้ใช้ใช้ widget เพื่อให้ค่า inputs\nInput ก็จะถูกแทรกเข้าไปใน functions ในส่วน SERVER\n\nserver &lt;- function(input, output) {}\n\n\nใน shiny จะมีหลาย widgets\n\nจะมีเพิ่มเติมอีกใน shinyWidgets package (เช่น pickerInput())\n\n\n\n\nUI Inputs: ตัวอย่าง\n\nลองรัน code ด้านล่างนี้ใน R\n\n\nlibrary(shinyWidgets) # Install!\n\nanimals &lt;- c(\"dog\", \"cat\", \"mouse\") # Predefining some categories\n\nui &lt;- fluidPage(\n  \n  # Free text\n  textInput(\"name\", \"What's your name?\"),\n  passwordInput(\"password\", \"What's your password?\"),\n  textAreaInput(\"story\", \"Tell me about yourself\", rows = 3),\n  \n  # Numeric inputs\n  numericInput(\"num\", \"Number one\", value = 0, min = 0, max = 100),\n  sliderInput(\"num2\", \"Number two\", value = 50, min = 0, max = 100),\n  sliderInput(\"rng\", \"Range\", value = c(10, 20), min = 0, max = 100),\n  \n  # Dates\n  dateInput(\"dob\", \"When were you born?\"),\n  dateRangeInput(\"holiday\", \"When do you want to go on vacation next?\"),\n  \n  # Limited choices\n  selectInput(\"state\", \"What's your favourite animal?\", animals),\n  radioButtons(\"animal\", \"What's your favourite animal?\", animals),\n  selectInput( \"state\", \"What's your favourite animal?\", animals, multiple = TRUE),\n  checkboxGroupInput(\"animal2\", \"What animals do you like?\", animals),\n  pickerInput(\n    inputId = \"animal3\",\n    label = \"What animals do you like?\",\n    choices = animals\n  ),\n  \n  # Single checkbox\n  checkboxInput(\"cleanup\", \"Clean up?\", value = TRUE),\n  checkboxInput(\"shutdown\", \"Shutdown?\"),\n  \n  # File uploads\n  fileInput(\"upload\", NULL),\n  \n  # Action buttons\n  actionButton(\"click\", \"Click me!\"),\n  actionButton(\"drink\", \"Drink me!\", icon = icon(\"cocktail\"))\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\nExercise(s)\n\nดู Exercises 2.2.8.\n\n\nเราจะใส่ข้อความหรือที่เรียกว่า placeholder ให้ปรากฏ ภายใน ช่องใส่ข้อความได้อย่างไร ด้วยคำสั่ง textInput() Figure 1 ตามด้านล่างนี้ (ดู ?textInput)?\n\n\n\n\nFigure 1: Text input (Source: Wickham 2021)\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntextInput(\"text\", \"\", placeholder = \"Your name\")\n\n\n\n\n\nอ่านเอกสารของคำสั่ง sliderInput() เพื่อดูว่าเราจะสร้าง date slider อย่างตัวอย่างนี้ได้อย่างไร Figure 2.\n\n\n\n\nFigure 2: Date slider (Source: Wickham 2021)\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsliderInput(\n  \"dates\",\n  \"When should we deliver?\",\n  min = as.Date(\"2019-08-09\"),\n  max = as.Date(\"2019-08-16\"),\n  value = as.Date(\"2019-08-10\")\n)\n\n\n\n\n\nสร้าง slider สำหรับเลือกค่าระหว่าง 0 ถึง 100 โดยมี stepของค่าที่เลือกได้คือ 5 พร้อมกับเพิ่มปุ่ม play เพื่อให้ผู้ใช้สามารถเปลี่ยนค่าได้เองอัตโนมัติ\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n  sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE)\n\n\n\n\n\nถ้าเรามีลิสต์ที่จะใช้กับ selectInput() ที่ค่อนข้างยาว เราควรที่จะแบ่งเป็นกลุ่มย่อย ๆ ลองอ่านเอกสารของ selectInput() นี่ดูว่าเราจะทำแบบนั้นได้อย่างไร (Hint: ลองดูในส่วน HTML ที่เรียกว่า &lt;optgroup&gt;.)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nselectInput(\n  \"breed\",\n  \"Select your favorite animal breed:\",\n  choices =\n    list(`dogs` = list('German Shepherd', 'Bulldog', \n                       'Labrador Retriever'),\n         `cats` = list('Persian cat', 'Bengal cat', \n                       'Siamese Cat'))\n)\n\n\n\n\n\n\n\n\n\n\nSolution: ตัวอย่าง app ที่ใช้ widgets หรือชนิดตัวควบคุมแบบอื่นๆ\n\n\n\n\n\n\nui &lt;- fluidPage(\n  textInput(\"text\", \"\", placeholder = \"Your name\"),\n  \n  sliderInput(\n  \"dates\",\n  \"When should we deliver?\",\n  min = as.Date(\"2019-08-09\"),\n  max = as.Date(\"2019-08-16\"),\n  value = as.Date(\"2019-08-10\")\n  ),\n \n    sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE),\n  \n  selectInput(\n  \"breed\",\n  \"Select your favorite animal breed:\",\n  choices =\n    list(`dogs` = list('German Shepherd', 'Bulldog', \n                       'Labrador Retriever'),\n         `cats` = list('Persian cat', 'Bengal cat', \n                       'Siamese Cat'))\n)\n  \n)\nserver &lt;- function(input, output, session) {\n  \n  \n}\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\nSolution: App ที่แสดงค่า inputs ด้วย\n\n\n\n\n\n\nลอกและเรียบเรียงมาจาก stackoverflow.\n\n\n#rm(list=ls())\nlibrary(shiny)\n\nui &lt;- basicPage(\n  textInput(\"text\", \"\", placeholder = \"Your name\"),\n  \n  sliderInput(\n    \"dates\",\n    \"When should we deliver?\",\n    min = as.Date(\"2019-08-09\"),\n    max = as.Date(\"2019-08-16\"),\n    value = as.Date(\"2019-08-10\")\n  ),\n  \n  sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE),\n  \n  selectInput(\n    \"breed\",\n    \"Select your favorite animal breed:\",\n    choices =\n      list(`dogs` = list('German Shepherd', 'Bulldog', \n                         'Labrador Retriever'),\n           `cats` = list('Persian cat', 'Bengal cat', \n                         'Siamese Cat'))),\n  tableOutput('show_inputs')\n)\nserver &lt;- shinyServer(function(input, output, session){\n  \n  AllInputs &lt;- reactive({\n    myvalues &lt;- NULL\n    for(i in 1:length(names(input))){\n      myvalues &lt;- as.data.frame(rbind(myvalues,(cbind(names(input)[i],input[[names(input)[i]]]))))\n    }\n    names(myvalues) &lt;- c(\"User Input\",\"Last Value\")\n    myvalues\n  })\n  \n  output$show_inputs &lt;- renderTable({\n    AllInputs()\n  })\n})\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "03-user-interface.html#ui-outputs",
    "href": "03-user-interface.html#ui-outputs",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "UI: Outputs",
    "text": "UI: Outputs\n\nOutputs ใน UI คอส่วนที่สร้างพื้นที่ที่จะแสดงผลจาก server function\nซึ่งมันจะมีชื่อ ID เฉพาะของใครของมันเหมือน inputs\n\nเช่น textOutput(\"text\") ชื่อ ID คือtext ที่จะถูกเติมค่าจาก server\n\nถ้า UI ที่สร้างใช้ชื่อ output ID คือtext เราสามารถที่จะเข้าถึงค่าของมันภายใน server function ได้ด้วยการเรียกผ่าน output$text (ดูด้านล่าง)\nแต่ล่ะ output function ในหน้าfront end มันจะผูกติดกับ render function ที่ back end (server)\noutput มี 3 ประเภทหลัก: text ข้อความ, tables ตาราง และ plots กราฟต่างๆ\n\n\noutput แบบข้อความหรือText\n\nui &lt;- fluidPage(\n  textOutput(\"text\"),\n  verbatimTextOutput(\"code\")\n)\nserver &lt;- function(input, output, session) {\n  output$text &lt;- renderText({ \n    \"Hello friend!\" \n  })\n  output$code &lt;- renderPrint({ \n    summary(1:10) \n  })\n}\nshinyApp(ui, server)\n\n\n\noutput แบบตาราง\n\nui &lt;- fluidPage(\n  tableOutput(\"static\"),\n  dataTableOutput(\"dynamic\")\n)\nserver &lt;- function(input, output, session) {\n  output$static &lt;- renderTable(head(mtcars))\n  output$dynamic &lt;- renderDataTable(mtcars, options = list(pageLength = 5))\n}\nshinyApp(ui, server)\n\n\n\noutput แบบกราฟต่างๆ\n\nui &lt;- fluidPage(\n  plotOutput(\"plot\", width = \"400px\")\n)\nserver &lt;- function(input, output, session) {\n  output$plot &lt;- renderPlot(plot(1:5), res = 96)\n}\nshinyApp(ui, server)\n\n\n\nExercise(s)\n\nเอามาจาก Exercises 2.3.5.\n\n\noutputs จากคำสั่ง textOutput() กับ verbatimTextOutput() ควรจะคู่กับ render อะไร\n\n\nrenderPrint(summary(mtcars))\nrenderText(\"Good morning!\")\nrenderPrint(t.test(1:5, 2:6))\nrenderText(str(lm(mpg ~ wt, data = mtcars)))\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nui &lt;- fluidPage(\n  verbatimTextOutput(\"mtcarsout1\"),\n  br(), hr(),\n  textOutput(\"mtcarsout2\"),\n  br(), hr(),\n  verbatimTextOutput(\"mtcarsout3\"),\n  br(), hr(),\n  verbatimTextOutput(\"mtcarsout4\")  \n)\nserver &lt;- function(input, output, session) {\n  output$mtcarsout1 &lt;- renderPrint(summary(mtcars))\n  output$mtcarsout2 &lt;- renderText(\"Good morning!\")\n  output$mtcarsout3 &lt;- renderPrint(t.test(1:5, 2:6))\n  output$mtcarsout4 &lt;- renderPrint(str(lm(mpg ~ wt, data = mtcars)))\n}\nshinyApp(ui, server)\n\n\n\n\n\nปรับเปลี่ยน options ใน renderDataTable() เพื่อแสดงข้อมูลอย่างเดียว โดยที่ให้ตัว controls อื่นๆอย่าง การเรียงลำดับ การค้นหา หรือการกรองข้อมูลไม่ทำงาน หาข้อมูลได้ที่ ?renderDataTable หรือ https://datatables.net/reference/option/ หรือ https://shiny.posit.co/r/gallery/widgets/datatables-options/\n\n\nui &lt;- fluidPage(\n      dataTableOutput(\"table\")\n    )\n    server &lt;- function(input, output, session) {\n      output$table &lt;- renderDataTable(mtcars, options = list(pageLength = 5))\n    }\nshinyApp(ui, server)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nui &lt;- fluidPage(\n  dataTableOutput(\"table\")\n)\nserver &lt;- function(input, output, session) {\n  output$table &lt;- renderDataTable(mtcars, \n                                  options = list(pageLength = 5,\n                                                 searching = FALSE,\n                                                 paging = FALSE,\n                                                 ordering = FALSE,\n                                                 filtering = FALSE))\n}\nshinyApp(ui, server)\n\n\n\n\n\n\nภาพรวมของ Output functions\n\nOutput functions\n\nhtmlOutput()… ใช้เพื่อแสดงผลจาก HTML (!)\nimageOutput()… แสดง image\nplotOutput()… สร้าง plot\nplotlyOutput … สร้าง plotly graph (!)\ntableOutput()… สร้าง table\ntextOutput()… สร้าง text\nuiOutput()… แสดงผลจาก HTML (!)\nverbatimTextOutput()… สร้าง text\ndataTableOutput()… สร้างตาราง data table (!)\nleafletOutput() … สร้างแผนที่ leaflet\n\nใน Guerry app ก็ใช้ outputs ที่มีเครื่องหมาย (!)."
  },
  {
    "objectID": "03-user-interface.html#html-tag-functions",
    "href": "03-user-interface.html#html-tag-functions",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "HTML tag functions",
    "text": "HTML tag functions\n\nHTML tag functions ทำหน้าที่แปลง input เป็น html\n\nทดลองพิมพ์ h2(\"A NEW HOPE\", align = \"center\") ใน console\nh2() function จะสร้างhtml &lt;h2&gt;&lt;/h2&gt;\n\nตัวHTML tags ทั่วไป (เช่น ⁠&lt;div&gt;⁠) สามารถเรียกใช้จากชื่อได้เลยเช่น div()\nตัวtagsที่ไม่ค่อยถูกใช้บ่อย ๆ อย่าง ⁠&lt;article&gt;⁠ อาจจะะต้องเรียกผ่าน list collection ที่ชื่อ tags เช่นtags$article()\n\nลองพิมพ์ tags$ ใน console\n\n.noWS = ... argument สำหรับลบ whitespace\n\n\nดู full reference for HTML tags\n\nดู tutorial นี้อีกนะครับ\nExercise: รันตัวอย่างappด้านล่างนี้แล้วสังเกตผลลัพธ์ที่ได้จาการใช้ tagsต่างๆ\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"My Shiny App\",\n\n  ### Header ----\n  header = dashboardHeader(),\n\n  ### Sidebar ----\n  sidebar = dashboardSidebar(),\n\n  ### Body ----\n  body = dashboardBody(\n      h2(\"A NEW HOPE\", align = \"center\"),\n              h5(\"It is a period of civil war.\", align = \"center\"),\n      p(\"p creates a paragraph of text.\"),\n      tags$p(\"A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.\", style = \"font-family: 'times'; font-si16pt\"),\n      strong(\"strong() makes bold text.\"),\n      em(\"em() creates italicized (i.e, emphasized) text.\"),\n      tags$hr(style=\"border-color:black;\"),\n      tags$br(),\n      tags$line(),\n      br(),\n      code(\"code displays your text similar to computer code\"),\n      div(\"div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div\", style = \"color:blue\"),\n      br(),\n      p(\"span does the same thing as div, but it works with\",\n        span(\"groups of words\", style = \"color:blue\"),\n        \"that appear inside a paragraph.\"))\n)\n\n\n# Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "03-user-interface.html#guerry-app-แนะนำ-tab",
    "href": "03-user-interface.html#guerry-app-แนะนำ-tab",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "Guerry app: แนะนำ tab",
    "text": "Guerry app: แนะนำ tab\n\nด้านล่างเป็นตัวอย่าง code จาก Guerry app ที่เกี่ยวกับการใช้ tab\n\nอาจจะต้องลบบางส่วนออกเพื่อให้มันรันได้\n\nเช่น includeCSS(\"www/styles.css\")\n\nรูปที่ไม่ขึ้นแสดงว่ามันหาไม่เจอ\nหลายส่วนใน UI function ใช้ html tags เช่น h1() หรือ jumbotron()\n\n\n\n\nFull R code including Shiny events\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    \n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://gesis.org/\",\n      img(src = \"gesis-logo.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    ),\n    skin = \"light\",\n    sidebarIcon = tags$i(class = \"fa fa-bars\", style = \"color: black;\")\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n            title = \"The Guerry Dashboard\",\n            lead = \"A Shiny app to explore the classic Guerry dataset.\",\n            status = \"info\",\n            btnName = NULL\n        ),\n        fluidRow(\n            column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                                 color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                    title = \"References\",\n                    status = \"primary\",\n                    solidHeader = FALSE,\n                    \"The following sources are referenced in this app:\",\n                    tags$ul(\n                        class = \"list-style: none\",\n                        style = \"margin-left: -30px;\",\n                        p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                        p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                        p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                        p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                    )\n                ),\n                accordionItem(\n                    title = \"Details\",\n                    status = \"primary\",\n                    solidHeader = FALSE,\n                    p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                    p(\"Last update: June 2023\"),\n                    p(\"Further information about the data can be found\",\n                        a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n\n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n        \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n        a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n        \"It is based on data from the\",\n        a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "03-user-interface.html#สรป",
    "href": "03-user-interface.html#สรป",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "สรุป",
    "text": "สรุป\n\nUI Layout: fluidPage() และ dashBoardPage() จะถูกใช้บ่อย\nเราใส่รูป Image ด้วยคำสั่ง img(src = \"...\", , width = ..., height = ...)\n*Input() functions: Used to generate input UI widgets\n\nค่าของ input ต่างจะถูกเก็บเป็นlistไว้ที่ input$... ซึ่งตามด้วยชื่อ name เช่น input$tab_tabulate_select\n\n*Output() functions: Used to display output, dataTableOutput()\n\noutput จะถูกส่งมาจากส่วนของ server\n\nทั้ง input/output functions จะต้องมี IDs ที่เชื่อมกันกับ server\nHTML tags สามารถใช้ผ่าน tags$name() function ได้ เช่น tags$br()\nที่ยังไม่พูดถึง:\n\nDynamic UI เราสามารถที่เปลี่ยน UI ได้เหมือนเป็น function ของ inputs เลย"
  },
  {
    "objectID": "03-user-interface.html#footnotes",
    "href": "03-user-interface.html#footnotes",
    "title": "User Interface (UI): การออกแบบ front end",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBootstrap 4 shinydashboard using AdminLTE3: Website↩︎"
  },
  {
    "objectID": "05-visualization.html",
    "href": "05-visualization.html",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "",
    "text": "ในหัวข้อนี้เราจะเรียนรู้:"
  },
  {
    "objectID": "05-visualization.html#ตวอยาง",
    "href": "05-visualization.html#ตวอยาง",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "ตัวอย่าง",
    "text": "ตัวอย่าง\n\nตัวอย่าง app เกี่ยวกับเรื่อง COVID-19 ของ Edward Parker COVID-19 tracker\n\n\n\n\n\n\n\nExercise\n\n\n\nให้ทดลองเล่น app COVID-19 tracker คืดว่า app นี้เป็นตัวอย่างที่ดีหรือไม่ เพราะอะไร\n\n\n\n\n\nCOVID-19 Tracker"
  },
  {
    "objectID": "05-visualization.html#สถานะของ-app",
    "href": "05-visualization.html#สถานะของ-app",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "สถานะของ app",
    "text": "สถานะของ app\n\nในหัวข้อนี้เราจะค่อย ๆ ปรับปรุง app ของเรากัน\ncode ด้านล่างนี้คือ app ที่เรามี มันจะมีตัวอย่างการใช้ table tabs\nทบทวน:\n\nในหัวข้อที่ 3 เราใส่ tab ที่มีคำอธิบาย app\nในหัวข้อที่ 4 เราเพิ่ม table tab โดยใช้ DT package\nในหัวข้อนี้เราจะเพิ่ม tab ที่เกี่ยวกับการวิเคราะห์ข้อมูลของ Guerry\n\n\n\n\nFull code for the current app state\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n\n  # New code goes here :)\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "05-visualization.html#แหลงขอมลเพมเตม",
    "href": "05-visualization.html#แหลงขอมลเพมเตม",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "แหล่งข้อมูลเพิ่มเติม",
    "text": "แหล่งข้อมูลเพิ่มเติม\n\nChapter “Graphics” Hadley Wickham’s Mastering Shiny\n“Server-side linking with shiny” หนังสือ Plotly ของ Carson Sievert"
  },
  {
    "objectID": "05-visualization.html#เพม-section-ใหมใน-guerry-app",
    "href": "05-visualization.html#เพม-section-ใหมใน-guerry-app",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "เพิ่ม section ใหม่ใน Guerry app",
    "text": "เพิ่ม section ใหม่ใน Guerry app\n\nเพิ่ม tab ใหม่ใน app และเรียกมันว่า “Model data”\nจุดประสงค์เพื่อดูความสัมพันธ์ของตัวแปรต่างๆ\nคำถาม: ถ้าเราจะดูเรื่องความสัมพันธ์ระหว่างตัวแปร ความจะนำเสนอในรูปแบบอะไร"
  },
  {
    "objectID": "05-visualization.html#ใสสวนประกอบใน-ui",
    "href": "05-visualization.html#ใสสวนประกอบใน-ui",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "ใส่ส่วนประกอบใน UI",
    "text": "ใส่ส่วนประกอบใน UI\n\nลองดูที่ code ว่าเราใส่ tab เพิ่มอย่างไร:\n\n\n1model &lt;- tabItem(\n    \"tab_model\",\n2    fluidRow(\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n3                plotOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nสร้าง tab item เรียก “tab_model”\n\n2\n\nสร้างรูปแบบ layout เริ่มต้นที่ใช้ fluid row กับ 1 column และ 1 กล่อง box\n\n3\n\nใส่ที่สำหรับกราฟ\n\n\n\n\n\ntab Item ที่ใส่ใหม่ชื่อ tab_model\nเรามี tabs item อยู่แล้วที่ชื่อ tab_intro กับ tab_tabulate:\n\n\ndashboardPage(\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n1  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = \"chart-line\")\n    )\n  ),\n2  body = dashboardBody(\n    # Note: Tab contents omitted to maintain readability!\n    tabItems(\n      tabItem(tabName = \"tab_intro\"),\n      tabItem(tabname = \"tab_tabulate\"),\n      model\n    )\n  )\n)\n\n\n1\n\nใส่ menu items ที่ sidebar อย่าลืมใส่ชื่อให้ตรงกับ tab\n\n2\n\nใส่ tab items ในตัว body ซึ่งtabItems() จะมีตัวรวบรวมtabทั้งหมด ตัว tab_model ใส่ต่อจากintroduction และชื่อของtabItem()ต้องตรงตามลำดับกับชื่อใน menuItem()"
  },
  {
    "objectID": "05-visualization.html#ใสเนอหา",
    "href": "05-visualization.html#ใสเนอหา",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "ใส่เนื้อหา",
    "text": "ใส่เนื้อหา\n\nใส่อะไรก็ได้ที่อยากใส่\nเราใส่พวกทำ plotting ต่าง ๆที่ server\nในที่นี้เราใช้ ggpairs จาก GGally package จริงๆ จะใช้อะไรก็ได้ที่เกี่ยวข้องกับการทำกราฟ\n\n\n1output$pairplot &lt;- renderPlot({\n2    dt &lt;- st_drop_geometry(guerry[c(\"Literacy\", \"Commerce\")])\n3    GGally::ggpairs(dt, axisLabels = \"none\")\n})\n\n\n1\n\nrenderPlot() จะรับชุดคำสั่งที่มีการสร้างกราฟ\n\n2\n\nเตรียมข้อมูลให้พร้อมสำหรับการplot\n\n3\n\nggpairs() เป็นคำสั่งสำหรับสร้างกราฟอันหนึ่งจาก ggplot2"
  },
  {
    "objectID": "05-visualization.html#code-ตวเตม",
    "href": "05-visualization.html#code-ตวเตม",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "code ตัวเต็ม",
    "text": "code ตัวเต็ม\n\n\nFull code for basic plotting\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotOutput(\"pairplot\")\n            )\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Pair diagram ----\n  output$pairplot &lt;- renderPlot({\n    dt &lt;- st_drop_geometry(data_guerry[c(\"Literacy\", \"Commerce\")])\n    GGally::ggpairs(dt, axisLabels = \"none\") \n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "05-visualization.html#ขอจำกด",
    "href": "05-visualization.html#ขอจำกด",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "ข้อจำกัด",
    "text": "ข้อจำกัด\n\ncode ที่ใช้ในการplotนี้เป็นแบบอย่างง่าย ที่ดูไม่ค่อยจะต่างจากคำสั่งplot ต่างๆที่มาด้วยกับ R\nถ้าอยากเห็นที่มันแตกต่าง ต้องดูในคุณสมบัติทั้ง 3 นี้:\n\nReactivity ปฏิกิริยา\nInteractivity โต้ดอบ\nContextuality บริบท"
  },
  {
    "objectID": "05-visualization.html#การใส-input-ตาง-ๆ-ใน-ui",
    "href": "05-visualization.html#การใส-input-ตาง-ๆ-ใน-ui",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "การใส่ input ต่าง ๆ ใน UI",
    "text": "การใส่ input ต่าง ๆ ใน UI\n\nตอนนี้เราใช้ Inputsอยู่ 3 แบบ\n\nselectInput() เพื่อเลือกตัวแปร x (ค่าเริ่มต้นคือ Literacy)\nselectizeInput() เพื่อเลือกตัวแปร y (ค่าเริ่มต้นคือ Commerce)\ncheckboxInput() เพื่อเป็นทางเลือกว่าจะทำ standardize หรือไม่\n\n\n\n\n\n\n\n\nNote\n\n\n\nเราใส่ปุ่ม actionButton() เพื่อให้ผู้ใช้กดเพื่อดูผลหลังจากเหลือ Inputs ต่างๆ\n\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n1    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n2                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n3                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n4                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n5                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n                plotOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nสร้าง column กับ box ใหม่สำหรับใส่ Inputs ต่างๆ\n\n2\n\nสร้าง selectInput() สำหรับเลือกตัวแปร x โดยใส่รายชื่อตัวแปรที่จะเลือกทั้งหมดใน choices\n\n3\n\nสร้าง selectizeInput() สำหรับเลือกตัวแปร y\n\n4\n\nใส่ checkboxInput() ให้ผู้ใช้เลือกว่าจะ standardize ตัวแปรหรือไม่\n\n5\n\nสร้างปุ่ม actionButton() เพื่อส่งให้ทำการคำนวณตามค่า Inputs ต่างๆที่เลือกไป"
  },
  {
    "objectID": "05-visualization.html#การเขาถง-ui-inputs-ทใสเขาไปใหม",
    "href": "05-visualization.html#การเขาถง-ui-inputs-ทใสเขาไปใหม",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "การเข้าถึง UI inputs ที่ใส่เข้าไปใหม่",
    "text": "การเข้าถึง UI inputs ที่ใส่เข้าไปใหม่\n\nคำถาม: UI inputs อันไหนที่เราเพิ่งใส่เข้าไป แล้วเราจะเข้าถึงค่าของมันจากฝั่ง server ได้อย่างไร\nเราใส่ตัว reactive ใหม่สำหรับ clean ข้อมูล\n\n\n\n\n\n\n\nNote\n\n\n\nbindEvent เพื่อให้มั่นใจว่าจะคำนวณใหม่โดยใช้ค่า inputที่ใส่เข้ามาหลังจากกดปุ่ม actionButton() เท่านั้น ลองเอาออก แล้วดูว่าเกิดอะไรขึ้น\n\n\n\n1dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    dt\n}) %&gt;%\n2    bindEvent(input$refresh, ignoreNULL = FALSE)\n\noutput$pairplot &lt;- renderPlot({\n3    GGally::ggpairs(dat(), axisLabels = \"none\")\n})\n\n\n1\n\nสร้าง reactive expression ที่คอยดูเรื่อง cleaning และจัดเก็บข้อมูลในตัวแปร reactive object ชื่อ dat\n\n2\n\nซึ่ง reactive expression ที่อยู่ใน reactive จะถูกรันใหม่(หรืออัพเดทค่า dat) ก็ต่อเมื่อปุ่มrefresh ถูกกด\n\n3\n\nสร้าง pairs plot โดยใช้ค่าจาก dat() เช่นเดียวกันกับ dt dataframe ที่เราใช้ก่อนหน้านี้ เพียงแต่ว่า ตัวdat() จะมีการอัพเดทค่าทุกครั้งที่ค่าของ input$model_x input$model_y หรือ input$model_std มีการเปลี่ยนแปลง\n\n\n\n\n\n\nตัวกราฟจะมีผลเปลี่ยนแปลงทันทีที่ผู้ใช้เลือกหรือเปลี่ยน Inputs"
  },
  {
    "objectID": "05-visualization.html#code-ตวเตม-1",
    "href": "05-visualization.html#code-ตวเตม-1",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "code ตัวเต็ม",
    "text": "code ตัวเต็ม\n\n\nFull code for reactive plotting\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    \n    dt\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- renderPlot({\n    GGally::ggpairs(dat(), axisLabels = \"none\")\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "05-visualization.html#plotly",
    "href": "05-visualization.html#plotly",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "Plotly",
    "text": "Plotly\n\nPlotly เป็นlibrary สำหรับสร้างกราฟที่มีการโต้ตอบกับผู้ใช้\nPlotly สามารถใช้ได้กับหลายภาษา ซึ่งรวมถึง R และ Shiny ด้วย\n\n\n\nCode to re-produce the Plotly figure\nmtcars$am[which(mtcars$am == 0)] &lt;- 'Automatic'\nmtcars$am[which(mtcars$am == 1)] &lt;- 'Manual'\nmtcars$am &lt;- as.factor(mtcars$am)\n\n\nplot_ly(\n  mtcars,\n  x = ~wt,\n  y = ~hp,\n  z = ~qsec,\n  color = ~am,\n  colors = c('#BF382A', '#0C4B8E')) %&gt;%\n  add_markers() %&gt;%\n  layout(scene = list(\n    xaxis = list(title = 'Weight'),\n    yaxis = list(title = 'Gross horsepower'),\n    zaxis = list(title = '1/4 mile time')\n  ))"
  },
  {
    "objectID": "05-visualization.html#plotly-กบ-shiny",
    "href": "05-visualization.html#plotly-กบ-shiny",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "Plotly กับ Shiny",
    "text": "Plotly กับ Shiny\n\nคำสั่งสำหรับการแสดงผลกราฟจาก Plotly ก็เหมือนกันกับก่อนหน้านี้:\n\nplotlyOutput() สำหรับสร้าง UI เพื่อแสดงผล\nrenderPlotly() สำหรับสร้างกราฟเพื่อไปแสดงผลบน UI ที่เตรียมไว้\n\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n1                plotly::plotlyOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nสิ่งที่เปลี่ยนเข้าไปคือการใช้ Plotly ซึ่งต้องการ Ouput เฉพาะของตัวเอง (plotlyOutput)"
  },
  {
    "objectID": "05-visualization.html#ggplotly-ในฝงของ-server",
    "href": "05-visualization.html#ggplotly-ในฝงของ-server",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "ggplotly ในฝั่งของ server",
    "text": "ggplotly ในฝั่งของ server\n\nPlotly มีระบบการplotหรือสร้างกราฟต่างๆของตัวเองที่ดีมาก plot_ly()\nซึ่งก็เป็นโชคของเราที่เราเพียงเรียกใช้ ggplotly() กับตัวกราฟที่สร้างจาก ggplot มันก็จะถูกเปลี่ยนเป็นไปใช้ plotly แทน\n\n\ndat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    dt\n}) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n\n1output$pairplot &lt;- plotly::renderPlotly({\n    p &lt;- GGally::ggpairs(dat(), axisLabels = \"none\")\n2    plotly::ggplotly(p)\n})\n\n\n1\n\nตัวplot จาก Plotly ไม่ใช่แบบกราฟนิ่งๆแล้ว เราก็ต้องการสร้างกราฟเฉพาะคือ plotly::renderPlotly()\n\n2\n\nในขณะเดียวกันเราก็ต้องเปลี่ยนกราฟของเราจาก ggplot ให้เป็นแบบ plotly ด้วย plotly::ggplotly()"
  },
  {
    "objectID": "05-visualization.html#ขยายการใชงาน-plotly",
    "href": "05-visualization.html#ขยายการใชงาน-plotly",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "ขยายการใช้งาน Plotly",
    "text": "ขยายการใช้งาน Plotly\n\nตอนนี้เราสามารถเป็นกราฟจาก ggplot ให้เป็น plotly ได้ด้วยคำสั่งเดียว\nแต่หลายๆส่วนของ plot ก็ยังใช้ไม่ได้เพราะเราไม่ได้สร้างกราฟจากคำสั่ง plot_ly() โดยตรง\n\n\nการแก้ไขปรับแต่ง Plotly\n\nเราสามารถปรับแต่งกราฟจาก Plotly ได้โดยอาศัย 3 คำสั่งนี้:\n\nlayout() สำหรับปรับเปลี่ยนหน้าตาของกราฟ อย่างเช่น สี ฟ้อนท์ ขนาด ตำแหน่ง สัดส่วน และอื่นๆ (เช่นเดียวกันกับ ggplot2::theme())\n\nupdatemenus ใส่ปุ่มหรือเมนูสำหรับเปลี่ยน layout ( ดูที่นี่ สำหรับตัวอย่าง)\nsliders ใส่ sliders (ดูที่นี่ สำหรับตัวอย่าง)\n\nconfig() เปลี่ยนการตั้งค่าการโต้ตอบ:\n\nmodeBarButtons กับ displaylogo ควบคุมปุ่มใน mode bar\ntoImageButtonOptions ควบคุมรูปแบบ downloads\nscrollZoom ควบคุมว่าให้มีการซูมด้วยการ scroll หรือไม่\n\nstyle() เปลี่ยนพวกสไตล์ (คล้ายๆกับ ggplot2::scale_) เช่น:\n\nhoverinfo ควบคุมว่าจะให้โชว์ tooptip หรือไม่เวลาวางลูกศรชี้ไว้\nmode ความคุมว่าจให้โชว์ จุด เส้น หรือ ข้อความใน scatter plot หรือไม่\nhovertext แก้ไขข้อความใน tooltips\n\n\n\n\n\nSchema ผังการปรับแต่ง\n\noptions มันเยอะมาก\nถ้าอยากดูทั้งหมด ลองพิมพ์เรียก plotly::schema()\n\n\nplotly::schema()\n\n\n\n\n\n\n\n\n\nตัวอย่าง\n\nเราสามารถปรับเปลี่ยนในส่วน mode bar กับ การ download ได้\n\n\nggplotly(p) %&gt;%\n  config(\n1    modeBarButtonsToRemove = c(\n        \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n            \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n        ),\n2    displaylogo = FALSE,\n3        toImageButtonOptions = list(\n            format = \"svg\",\n            filename = \"guerry_plot\",\n            height = NULL,\n            width = NULL\n        ),\n4        scrollZoom = TRUE\n    )\n\n\n1\n\nเลือกเอาปุ่มออกจาก modebar\n\n2\n\nเอา logo ออก\n\n3\n\nเซ็ตค่า height กับ width เป็น NULL เพื่อที่จะให้สัดส่นของกราฟหรือภาพเป็นตามที่โชว์ในapp\n\n4\n\nให้ใช้ zooming ได้"
  },
  {
    "objectID": "05-visualization.html#full-ตวเตม",
    "href": "05-visualization.html#full-ตวเตม",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "Full ตัวเต็ม",
    "text": "Full ตัวเต็ม\n\n\nFull code for interactive visualization\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(GGally)\nlibrary(datawizard)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    \n    dt\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    p &lt;- GGally::ggpairs(dat(), axisLabels = \"none\")\n    \n    ggplotly(p) %&gt;%\n      config(\n        modeBarButtonsToRemove = plotly_buttons,\n        displaylogo = FALSE,\n        toImageButtonOptions = list(\n          format = \"svg\",\n          filename = \"guerry_plot\",\n          height = NULL,\n          width = NULL\n        ),\n        scrollZoom = TRUE\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "05-visualization.html#แนวปฏบตทด",
    "href": "05-visualization.html#แนวปฏบตทด",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "แนวปฏิบัติที่ดี",
    "text": "แนวปฏิบัติที่ดี\n\nตัวติดตามรังผึ้งของ US จาก Appsilon ให้ความสะดวกในการเปรียบเทียบตัวเลขที่รวมกัน ระหว่างรัฐและภายในรัฐด้วยกัน\nด้วยความคิดสร้างสรรค์เล็ก ๆ น้อย ๆ, Shiny สามารถเป็นผู้บรรยายเรื่องราวที่มีความสามารถอย่างมาก (สำหรับตัวอย่างที่น่าประทับใจ, ลองดูที่แอป Shiny ของ John Coene Freedom of Press Shiny app)"
  },
  {
    "objectID": "05-visualization.html#การขยายรปแบบการแสดงผล",
    "href": "05-visualization.html#การขยายรปแบบการแสดงผล",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "การขยายรูปแบบการแสดงผล",
    "text": "การขยายรูปแบบการแสดงผล\n\nเราจะขยายการแสดงผลที่เรามีอยู่ด้วยการวิเคราะห์การถดถอยเพื่ออธิบายเกี่ยวกับการเชื่อมโยงของตัวแปรตัวบ่งชี้ของ Guerry\nเราเพิ่มสามแบบของการแสดงผลภาพ: แผนภูมิแสดงค่าสัมประสิทธิ์, แผนภูมิกระจาย และตารางการถดถอย\nทั้งสามแบบของการแสดงผลถูกใส่ไว้ใน tabBox bs4Dash::box ซึ่งรองรับ tab panels\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            ),\n      #### Box: Coefficient/Scatterplot ----\n1            tabBox(\n              status = \"primary\",\n              width = 12,\n2              type = \"tabs\",\n              ##### Tab: Coefficient plot ----\n3              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tab: Scatterplot ----\n4              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tab: Table: Regression ----\n5              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n                plotly::plotlyOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nเพิ่ม tabBox() ใหม่ซึ่งสามารถรองรับ tabPanel() หลายๆแท็บ\n\n2\n\nระบุลักษณะการแสดงผลของแท็บ pills จะเติมสีให้กับทั้งหมดของแท็บแผงตามสถานะ ในขณะที่ tabs มีการเติมสีอย่างอ่อนโยนมากขึ้น\n\n3\n\nเพิ่มแท็บที่มีแผนภูมิแสดงค่าสัมประสิทธิ์จาก Plotly\n\n4\n\nเพิ่มแท็บที่มีแผนภูมิกระจายจาก Plotly\n\n5\n\nเพิ่มแท็บที่มีตารางการถดถอยแบบ HTML"
  },
  {
    "objectID": "05-visualization.html#การทำความเขาใจรปแบบใหม",
    "href": "05-visualization.html#การทำความเขาใจรปแบบใหม",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "การทำความเข้าใจรูปแบบใหม่",
    "text": "การทำความเข้าใจรูปแบบใหม่\n\nคำถาม: เราได้เพิ่มอะไรบ้างในที่นี่ ผลลัพธ์ใดที่ต้องการเนื้อหาเพื่อแสดงผล\nที่ฝั่งของserver เราขยาย reactive object ด้วยโมเดลการถดถอยแบบเชิงเส้น\n\n\n1mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n2    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n\n3    list(x = x, y = y, data = dt,   model = mod)\n}) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n\n\n1\n\nเราเปลี่ยนชื่อ dat() เป็น mparams() เนื่องจากตอนนี้มันเก็บอาร์กิวเมนต์หลายตัว แทนที่จะเป็น dataframe เดียว\n\n2\n\nสร้างสูตรและสร้างผลลัพธ์จาก linear regression\n\n3\n\nส่งคืนlistของอาร์กิวเมนต์เพื่อใช้สำหรับoutput"
  },
  {
    "objectID": "05-visualization.html#การสรางผลลพธ-output",
    "href": "05-visualization.html#การสรางผลลพธ-output",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "การสร้างผลลัพธ์ output",
    "text": "การสร้างผลลัพธ์ output\n\nากขั้นตอนนี้เราสามารถนำmparamsซึ่งเป็น reactive object เข้าไปในฟังก์ชันการแสดงผลทั้งหมด\n\n\n### Pair diagram ----\n1output$pairplot &lt;- renderPlotly({\n    p &lt;- GGally::ggpairs(mparams()$data, axisLabels = \"none\")\n    ggplotly(p)\n})\n\n### Plot: Coefficientplot ----\n2output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n\n    p &lt;- plot(parameters::model_parameters(params$model))\n\n    ggplotly(p)\n})\n\n### Plot: Scatterplot ----\n3output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x\n    y &lt;- params$y\n\n\n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data,\n                  aes(x = .data[[params$x]],\n                      y = .data[[params$y]])) +\n        geom_point() +\n        geom_smooth() +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\",\n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\",\n                 x = 0, y = 0,\n                 size = 5,\n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n      xlab(NULL)\n\n    }\n\n    ggplotly(p)\n})\n\n### Table: Regression ----\n4output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n        dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n})\n\n\n1\n\nเราต้องเปลี่ยน input สำหรับ ggpairs() เนื่องจากชื่อและโครงสร้างของreactive objectมีการเปลี่ยนแปลง\n\n2\n\nสร้างแผนภูมิแสดงค่าสัมประสิทธิ์ของ Plotly โดยใช้แพ็คเกจ parameters\n\n3\n\nสร้างแผนภูมิกระจายของ Plotly สำหรับการถดถอยแบบสองตัวแปร หากเลือกตัวแปร y มากกว่าหนึ่งตัว จะสร้างแผนภูมิที่ว่างเปล่าและแสดงข้อความเตือน\n\n4\n\nสร้างตารางของโมเดลโดยใช้แพ็คเกจ modelsummary และเตรียมสำหรับการแสดงผลแบบ HTML"
  },
  {
    "objectID": "05-visualization.html#code-ตวเตม-2",
    "href": "05-visualization.html#code-ตวเตม-2",
    "title": "การทำโมเดลและนำเสนอข้อมูล",
    "section": "code ตัวเต็ม",
    "text": "code ตัวเต็ม\n\n\nFull code for contextual visualization\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(params$data, axisLabels = \"none\")\n\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method = \"lm\") +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "07-theming.html",
    "href": "07-theming.html",
    "title": "Theming & styling",
    "section": "",
    "text": "จุดประสงค์:"
  },
  {
    "objectID": "07-theming.html#bootstrap",
    "href": "07-theming.html#bootstrap",
    "title": "Theming & styling",
    "section": "Bootstrap",
    "text": "Bootstrap\n\nBootstrap เป็นเฟรมเวิร์กที่ประกอบด้วยเทมเพลตดีไซน์ที่มีพื้นฐานจาก CSS, HTML และ JavaScript\n\nใช้กับเว็บไซต์ทั่วไปประมาณ 20%\nเป็นหนึ่งในโครงการ GitHub ที่ได้รับความนิยมมากที่สุด\nบางครั้งอาจจะน่าเบื่อเพราะคนใช้กันเยอะ\n\nShiny รุ่นคลาสสิกใช้ Bootstrap 3\nbs4Dash แพคเกจที่เราใช้สำหรับแดชบอร์ด Guerry ใช้ Bootstrap 4 (โดยเฉพาะ AdminLTE 3)"
  },
  {
    "objectID": "07-theming.html#สวนขยายใน-shiny-สำหรบการตกแตงสไตล",
    "href": "07-theming.html#สวนขยายใน-shiny-สำหรบการตกแตงสไตล",
    "title": "Theming & styling",
    "section": "ส่วนขยายใน Shiny สำหรับการตกแต่งสไตล์",
    "text": "ส่วนขยายใน Shiny สำหรับการตกแต่งสไตล์\n\nShiny มีส่วนขยายที่น่าสนใจมากสำหรับการเพิ่มความน่าสนใจให้กับ UI เราจะพูดถึงบางส่วนได้แก่:\n\nbslib - ปรับแต่งธีมของ bootstrap\nfresh - ปรับแต่งธีมแดชบอร์ด\nwaiter - สร้างสปินเนอร์ที่สวยงาม\nshinyWidgets - ประดิษฐ์วิดเจ็ตอินพุตอย่างงดงาม\nshinyjs - ใช่ JavaScript โดยไม่ต้องรู้จัก JavaScript (แต่รู้ไว้บ้างก็ดี)"
  },
  {
    "objectID": "07-theming.html#เพมเตม",
    "href": "07-theming.html#เพมเตม",
    "title": "Theming & styling",
    "section": "เพิ่มเติม",
    "text": "เพิ่มเติม\n\nChapter 6 ของ Hadley Wickham’s “Mastering Shiny”\nChapter 6 to 9 ของ David Granjon’s “Outstanding User Interfaces with Shiny”"
  },
  {
    "objectID": "07-theming.html#วธเปดตวตรวจสอบ-inspector",
    "href": "07-theming.html#วธเปดตวตรวจสอบ-inspector",
    "title": "Theming & styling",
    "section": "วิธีเปิดตัวตรวจสอบ inspector",
    "text": "วิธีเปิดตัวตรวจสอบ inspector\n\nเข้าชมเว็บไซต์ (เช่นเปิดแอป Shiny ในเบราว์เซอร์)\nคลิกขวาบนหน้าเว็บ (เช่น ตรงต้องการตรวจสอบ)\nเลือก “Inspect”\n\n\nหน้าต่างจะเปิดขึ้นมาให้ดูเหมือนตัวอย่างด้านล่างนี้\n\n\n\n\n\n\n\nTip\n\n\n\nถ้าในRStudio ก็คลิกขวาแล้วเลือก “Inspect Element”\n\n\n\n\n\nInspect tool ใน Firefox"
  },
  {
    "objectID": "07-theming.html#ใชเครองมอตรวจสอบ",
    "href": "07-theming.html#ใชเครองมอตรวจสอบ",
    "title": "Theming & styling",
    "section": "ใช้เครื่องมือตรวจสอบ",
    "text": "ใช้เครื่องมือตรวจสอบ\n\nคำถาม: จากด้านบน บอกได้ไหมว่าแต่ล่ะส่วนของเครื่องมือตรวจสอบทำอะไร\n\nแท็ก HTML\nแท็ก CSS\nแท็กเค้าโครง\nเลือกองค์ประกอบ\nเลือกสี\n\nแม้ว่าเครื่องมือตรวจสอบจะดูซับซ้อน แต่สามารถใช้ในการกำหนดธีมต่าง ๆ ได้ในทุกกรณี"
  },
  {
    "objectID": "07-theming.html#เวอรชน-bootstrap-กบ-bslib",
    "href": "07-theming.html#เวอรชน-bootstrap-กบ-bslib",
    "title": "Theming & styling",
    "section": "เวอร์ชัน Bootstrap กับ bslib",
    "text": "เวอร์ชัน Bootstrap กับ bslib\n\nในชุดโค้ดด้านล่างนี้ เราสร้างธีม bootstrap ที่ใช้งานธีมของเวอร์ชัน Bootstrap 5 ล่าสุด:\n\n\nui &lt;- fluidPage(\n    h1(\"Heading 1\"), \n    h2(\"Heading 2\"), \n    p(\"Paragraph\"), \n    selectInput(\"select\", \"Select Input\", unique(iris$Species)),\n    sliderInput(\"slider\", label = \"Slider\", 1, 5, 3),\n    checkboxInput(\"check\", \"Checkbox\"),\n    theme = bs_theme(version = 5)\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\nความแต่ต่างกับ bootstrap 3 มันน้อยมากแต่ก็ดูออก"
  },
  {
    "objectID": "07-theming.html#bootswatch",
    "href": "07-theming.html#bootswatch",
    "title": "Theming & styling",
    "section": "Bootswatch",
    "text": "Bootswatch\n\nยังมีอะไรอีกพอสมควรที่สามารถปรับเปลี่ยนได้ใน bs_theme()\nตัวอย่าง เช่น เราสามารถนำธีม Bootswatch ที่ทำไว้ก่อนแล้วมาใช้งานได้:\n\n\nui &lt;- fluidPage(\n    h1(\"Heading 1\"), \n    h2(\"Heading 2\"), \n    p(\"Paragraph\"), \n    selectInput(\"select\", \"Select Input\", unique(iris$Species)),\n    sliderInput(\"slider\", label = \"Slider\", 1, 5, 3),\n    checkboxInput(\"check\", \"Checkbox\"),\n    theme = bs_theme(version = 5, bootswatch = \"sketchy\")\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "07-theming.html#exploring-theming-options",
    "href": "07-theming.html#exploring-theming-options",
    "title": "Theming & styling",
    "section": "Exploring theming options",
    "text": "Exploring theming options\n\nYou can try out all theming options in real time by running bs_theme_preview()"
  },
  {
    "objectID": "07-theming.html#การสำรวจตวเลอกในการกำหนดธม",
    "href": "07-theming.html#การสำรวจตวเลอกในการกำหนดธม",
    "title": "Theming & styling",
    "section": "การสำรวจตัวเลือกในการกำหนดธีม",
    "text": "การสำรวจตัวเลือกในการกำหนดธีม\n\nเราลองใช้ธีมทั้งหมดได้ในแบบ real timeโดยการเรียกใช้ bs_theme_preview()\n\n\n\n\n\n\n\nแบบฝึกหัด\n\n\n\nทดลองใช้ bs_theme_preview() เพื่อเรียนรู้เกี่ยวกับอาร์กิวเมนต์ต่าง ๆ ของ bs_theme() ถ้าเจอธีมที่ชอบ ลองสร้างธีมนั้นอีกครั้งโดยใช้ bs_theme()\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\ncode สำหรับอัพเดท theme มันถูกพิมพ์แสดงทั้งหมดใน console"
  },
  {
    "objectID": "07-theming.html#เพมธมทคลายกบ-gesis",
    "href": "07-theming.html#เพมธมทคลายกบ-gesis",
    "title": "Theming & styling",
    "section": "เพิ่มธีมที่คล้ายกับ GESIS",
    "text": "เพิ่มธีมที่คล้ายกับ GESIS\n\nขั้นตอนทำงาน:\n\nสร้างธีมโดยใช้ fresh::create_theme()\nเพิ่มองค์ประกอบของธีม เช่น เค้าโครง สี และแบบอักษร\nส่งวัตถุธีมเป็นอาร์กิวเมนต์ให้กับ dashboardPage()\n\nในชุดโค้ดด้านล่างนี้ เราเพิ่มธีมที่คล้ายกับสไตล์เว็บของ GESIS\n\n\n\n\n\n\n\nTip\n\n\n\nพิมพ์ fresh::bs4dash_ ในคอนโซลของ RStudio และลองสำรวจองค์ประกอบในการกำหนดธีมของ fresh\n\n\n\ndash_theme &lt;- create_theme(\n  bs4dash_status(\n    primary = \"#58748f\",\n    secondary = \"#666666\",\n    info = \"#E6EAEE\",\n    danger = \"#BF616A\",\n    warning = \"#F06400\",\n    light = \"#F4F4F2\",\n    dark = \"#2c2c25\"\n  ),\n  bs4dash_layout(\n    font_size_root = \"5rem\",\n    main_bg = \"#FDFDFD\",\n    sidebar_width = \"350px\"\n  ),\n  bs4dash_sidebar_light(bg = \"#F4F4F2\", color = \"#000\"),\n  bs4dash_sidebar_dark(bg = \"#2c2c25\", color = \"#FFF\"),\n  bs4dash_color(\n    orange = \"#F06400\",\n    white = \"#E6EAEE\",\n    black = \"#000\",\n    gray_600 = \"#666\",\n    gray_800 = \"#333\",\n    gray_900 = \"#000\",\n    blue = \"#58748f\"\n  ),\n  bs4dash_font(\n    family_sans_serif = \"Verdana\",\n    family_base = \"Georgia\",\n    family_monospace = \"Courier New\"\n  )\n)\n\n\n\n\n\n\n\nแบบฝึกหัด\n\n\n\nใช้เครื่องมือที่เรียกว่า “pipette” จากเครื่องมือตรวจสอบ เพื่อหารูปแบบสีจากเว็บไซต์ที่สนใจ สร้างธีมโดยใช้สีที่เหมาะสม (และองค์ประกอบอื่น ๆ ในการกำหนดธีม) และส่งต่อไปยังแดชบอร์ด Shiny"
  },
  {
    "objectID": "07-theming.html#css",
    "href": "07-theming.html#css",
    "title": "Theming & styling",
    "section": "CSS",
    "text": "CSS\n\nCSS (Cascading Style Sheets) เป็นชุดคำสั่งที่ใช้ในการกำหนดสไตล์ของเอกสาร HTML\nHTML จะจัดการการแสดงข้อมูล ส่วน CSS จะให้การจัดสไตล์ รูปแบบ\nเราสามารถเขียน HTML และ CSS ได้อย่างง่ายด้วยภายใน R โดยใช้แพคเกจ htmltools (ดู ?builder และ ?browsable)\n\n\nbrowsable(div(\n    div(\n        \"This is an HTML container without styling\"\n    ),\n    div(\n        \"This is an HTML container with CSS styling\",\n        style = \"\n            background-color: green;\n            color: white;\n            border-radius: 10px;\n            display: inline-block;\n            padding: 5px;\n            transform: rotate(5deg);\n            margin-top: 15px;\n            font-family: Verdana;\n        \"\n    )\n))\n\n\nThis is an HTML container without styling\nThis is an HTML container with CSS styling"
  },
  {
    "objectID": "07-theming.html#classes-and-ids",
    "href": "07-theming.html#classes-and-ids",
    "title": "Theming & styling",
    "section": "Classes and IDs",
    "text": "Classes and IDs\n\nCSS is usually defined using classes or IDs\n\nIDs are unique identifiers for a single UI elements and are specified using a hashtag #\nClasses can be given to multiple UI elements and are specified using a dot ."
  },
  {
    "objectID": "07-theming.html#คลาสและไอด",
    "href": "07-theming.html#คลาสและไอด",
    "title": "Theming & styling",
    "section": "คลาสและไอดี",
    "text": "คลาสและไอดี\n\nปกติ CSS จะถูกกำหนดโดยใช้คลาสหรือไอดี\n\nไอดี จะมีความจำเพาะกับแต่ล่ะองค์ประกอบ UI และถูกระบุโดยใช้เครื่องหมาย #\nคลาสสามารถให้กับองค์ประกอบUIหลายตัว และถูกระบุโดยใช้จุด .\n\n\n\nbrowsable(div(\n    tags$style(\n        \"\n        #id {\n            color: red;\n        }\n        \n        .cls {\n            color: green;\n        }\n        \"\n    ),\n    div(\"This div has an id\", id = \"id\"),\n    div(\"This div has a class\", class = \"cls\")\n))\n\n\n\nThis div has an id\nThis div has a class"
  },
  {
    "objectID": "07-theming.html#องคประกอบ-html-และ-css",
    "href": "07-theming.html#องคประกอบ-html-และ-css",
    "title": "Theming & styling",
    "section": "องค์ประกอบ HTML และ CSS",
    "text": "องค์ประกอบ HTML และ CSS\n\nเราสามารถเปลี่ยนคุณสมบัติ CSS ขององค์ประกอบ HTML ทั้งหมดได้:\n\n\nbrowsable(div(\n    tags$style(\n        \"\n        p.cls {\n            color: blue;\n        }\n        \"\n    ),\n    p(\"Blue his house\", class = \"cls\"),\n    p(\"With a blue little window\", class = \"cls\"),\n    p(\"And a blue corvette\", class = \"cls\"),\n    div(\"Green??\", class = \"cls\"),\n    style = \"border-style: dotted; display: inline-block;\"\n))\n\n\n\nBlue his house\nWith a blue little window\nAnd a blue corvette\nGreen??\n\n\n\n\nคำถาม: ทำไม div.cls เป็นสีเขียวไม่ใช่สีน้ำเงินหรือสีดำ?\nความรู้จากข้างต้น:\n\np.cls เปลี่ยนคุณสมบัติของแท็ก p ทั้งหมดที่มีคลาส cls\n#id .cls เปลี่ยนคุณสมบัติขององค์ประกอบทั้งหมดที่มีคลาส cls ภายในองค์ประกอบที่มี ID id\n\n\n\nคุณสมบัติของ CSS\n\nCSS สร้างขึ้นตามคุณสมบัติ\nคุณสมบัติ CSS ทั้งหมดสามารถหาได้ในเอกสาร Mozilla developer\n\n\nรายการของคุณสมบัติ CSS บางส่วน\n\n\n\n\n\n\n\nคุณสมบัติ\nคำอธิบาย\nค่าตัวอย่าง\n\n\n\n\ncolor\nกำหนดสีขององค์ประกอบ\n#000, สีดำ\n\n\nbackground-color\nกำหนดสีพื้นหลังขององค์ประกอบ\n#000, สีดำ\n\n\ndisplay\nกำหนดวิธีที่องค์ประกอบจะแสดง\ninline, block, flex, grid\n\n\nwidth\nกำหนดความกว้างขององค์ประกอบ\n10px, 100%, 2em, 1vh\n\n\nheight\nกำหนดความสูงขององค์ประกอบ\n10px, 100%, 2em, 1vh\n\n\nmargin\nระยะขอบระหว่างองค์ประกอบและองค์ประกอบหลัก\n10px, 100%, 2em, 1vh\n\n\npadding\nระยะขอบในองค์ประกอบ\n10px, 100%, 2em, 1vh\n\n\nborder-color\nกำหนดสีของเส้นขอบขององค์ประกอบ\n#000, สีดำ\n\n\nborder-width\nกำหนดความกว้างของเส้นขอบขององค์ประกอบ\n10px, 100%, 2em, 1vh\n\n\nborder-style\nกำหนดสไตล์ของเส้นขอบขององค์ประกอบ\nจุด, ขีดเขียน, ตรง, คู่\n\n\nborder-radius\nกำหนดมุมที่สวมใส\n10px, 100%, 2em, 1vh\n\n\nfont-family\nกำหนดตระกูลฟอนต์\nArial, Verdana\n\n\nfont-style\nกำหนดสไตล์ฟอนต์\nปกติ, ตัวเอียง, ตัวเอียงเอน\n\n\nfont-weight\nกำหนดความหนาของฟอนต์\nปกติ, หนา, 700\n\n\nfont-size\nกำหนดขนาดฟอนต์\n10px, 100%, 2em, 1vh\n\n\nposition\nกำหนดตำแหน่งทั่วไปขององค์ประกอบ\nAbsolute, relative, fixed\n\n\nz-index\nกำหนดลำดับการซ้อนทับ\nลำดับ, เช่น 1000 &gt; 1 &gt; 0 &gt; -1"
  },
  {
    "objectID": "07-theming.html#การรวม-css-ใน-r",
    "href": "07-theming.html#การรวม-css-ใน-r",
    "title": "Theming & styling",
    "section": "การรวม CSS ใน R",
    "text": "การรวม CSS ใน R\n\nCSS สามารถกำหนดได้ทั้งในรูปแบบของ CSS แบบอินไลน์ (tags$style) หรือไฟล์ CSS ภายนอก\nในแอป Guerry เราใช้ไฟล์ CSS ซึ่งจัดการบางส่วนของการจัดรูปแบบ:\n\nเพิ่มโฟลเดอร์ที่เรียกว่า “www” ในไดเรกทอรีของแอป\nเพิ่มไฟล์ที่เรียกว่า “styles.css” เข้าไปในโฟลเดอร์นั้น\nใน R เพิ่ม: tags$head(includeCSS(\"www/styles.css\")) เข้าไปในส่วน dashboardBody"
  },
  {
    "objectID": "07-theming.html#ตวอยาง-การลบชองวาง",
    "href": "07-theming.html#ตวอยาง-การลบชองวาง",
    "title": "Theming & styling",
    "section": "ตัวอย่าง: การลบช่องว่าง",
    "text": "ตัวอย่าง: การลบช่องว่าง\n\nในหัวข้อที่ 6: การทำแผนที่ เราอาจจะสังเกตเห็นพื้นที่ว่างจำนวนมากเมื่อทำแผนที่ Leaflet\nไม่ได้เป็นเรื่องร้ายแรง แต่เราเสียพื้นที่ที่ใช้งาน \n\n\nการวินิจฉัย\n\nสาเหตุ: bs4Dash::box() สงวนพื้นที่บางส่วนในส่วนหัวและส่วนbodyของมัน\nเราทราบอย่างไร\n\nคลิกขวาที่พื้นที่ว่าง\nเปิดตัวตรวจสอบ\nมองหาคุณสมบัติ “padding” หรือ “margin” ซึ่งเป็นตัวเกี่ยวข้องพื้นที่ว่าง\nปิดใช้งานเพื่อดูว่าจะเปลี่ยนแปลงอย่างไร\n\n\n\n\n\nการแก้ไข\n\nข่าวร้าย: เราไม่สามารถแก้ไขปัญหานี้โดยใช้ R เพียงอย่างเดียว เนื่องจากค่าพวกนี้มาจาก AdminLTE, เฟรมเวิร์ก CSS ของ bs4Dash\nข่าวดี: เป็นตัวอย่างสำหรับการปรับแต่ง CSS เอง\nเราเพิ่ม padding: 0px; เข้าไปในส่วนหัวของกล่องและส่วนตัวโดยตรงด้วยการใช้เครื่องมือตรวจสอบ\n\n\n\n\nการแก้ไขถาวร\n\nการแก้ไขของเราด้วยเครื่องมือตรวจสอบจะหายไปเมื่อเราปิดหรือโหลดแท็บใหม่\nเพื่อแก้ไขถาวร เราจำเป็นต้องทำการเปลี่ยนแปลงที่ไฟล์ในคลาส HTML\nคำถาม: เราต้องแก้ไขคลาส HTML อันไหน องค์ประกอบ HTML ไหนที่รับผิดชอบในการเว้นช่องว่างที่ไม่ถูกต้อง\n\n\n\n\n\n\n\nTip\n\n\n\nหากไม่แน่ใจว่าองค์ประกอบไหนทำหน้าที่อะไร ลองเลื่อนเมาส์ไปที่องค์ประกอบในแท็บ HTML แล้วจะเห็นไฮไลต์ส่วน ที่เกี่ยวข้องในที่เว็บไซต์โดยตรง\n\n\n\n\n\nEmbedding CSS\n\nNow that we know what properties to change and where, we can start writing CSS\nEither in a dedicated styles.css file or using tags$style inside the UI code, we put the following CSS lines:\n\n\n\nการฝัง CSS\n\nตอนนี้ที่เรารู้ว่าคุณสมบัติที่จะเปลี่ยนและที่จะแก้ไขอยู่ตรงไหน ก็เริ่มเขียน CSS ได้\nไม่ว่าจะอยู่ในไฟล์ styles.css หรือใช้ tags$style ภายในโค้ด UI เราเพียงเพิ่มบรรทัด CSS ต่อไปนี้:\n\n\n\nstyles.css\n\n/* remove white space around maps in boxes */\n#exp_box .card-header, #exp_box .card-body {\n  padding: 0em;\n}\n\n\nอีกนัยหนึ่ง: สำหรับคลาส card-header และ card-body ภายในองค์ประกอบที่มี ID exp_box ให้ตั้งค่าขอบเขต (padding) เป็น 0 พิกเซล\n\n\n\n\n\n\n\nแบบฝึกหัด\n\n\n\nเปลี่ยนการจัดรูปแบบ CSS ของย่อหน้าข้อความในแท็บ “หน้าหลัก” สร้างคลาส CSS ที่ชื่อว่า par และเปลี่ยนตัวแปรฟอนต์, ขนาด, น้ำหนัก, ประเภท, การจัดวางและการชิดขอบ:\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nบางส่วนของคุณสมบัติ CSS ดูได้ในหัวข้อ “คุณสมบัติ CSS” แต่บางส่วนก็ใหม่ อย่างไรก็ตามแนะนำให้ดูตามแหล่งข้อมูลตามเว็บอื่นๆดูครับ ลองค้นดู\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nใส่ code CSS นี้ ใน styles.css หรือในแบบ inline:\n/* text formatting */\np.par {\n  font-family: Arial;\n  font-weight: 500;\n  font-size: 12px;\n  font-type: italic;\n  text-indent: 10px;\n  text-align: justify;\n  text-justify: inter-word;\n}\nใน R เราต้องเพิ่ม class par ในทุก paragraphs ใน UI tab:\n\np(\"text\", class = \"par\")"
  },
  {
    "objectID": "09-guerry-app-all-code.html",
    "href": "09-guerry-app-all-code.html",
    "title": "Guerry app",
    "section": "",
    "text": "Guerry app code\n\ncode ที่ใช้ในการสร้าง Guerry app\n\n\n\nWarning in readLines(\"shinyapps/guerry/app.R\"): incomplete final line found on\n'shinyapps/guerry/app.R'\n\n\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\nlibrary(see)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km^2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = as.factor(case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  ))) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n  .cols = all_of(names(variable_names)),\n  function(x) {\n    if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n      sum(x)\n    } else {\n      mean(x)\n    }\n  }\n))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n    \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n    \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n# 2 Create theme & preload ----\ndash_theme &lt;- create_theme(\n  bs4dash_status(\n    primary = \"#58748f\",\n    secondary = \"#666666\",\n    info = \"#E6EAEE\",\n    danger = \"#BF616A\",\n    warning = \"#FF6100\",\n    light = \"#F4F4F2\",\n    dark = \"#2c2c25\"\n  ),\n  bs4dash_layout(\n    font_size_root = \"5rem\",\n    main_bg = \"#FDFDFD\",\n    sidebar_width = \"350px\"\n  ),\n  bs4dash_sidebar_light(bg = \"#F4F4F2\", color = \"#000\"),\n  bs4dash_sidebar_dark(bg = \"#2c2c25\", color = \"#FFF\"),\n  bs4dash_color(\n    orange = \"#F06400\",\n    white = \"#FDFDFD\",\n    black = \"#000\",\n    gray_600 = \"#666\",\n    gray_800 = \"#333\",\n    gray_900 = \"#000\",\n    blue = \"#58748f\"\n  ),\n  bs4dash_font(\n    family_sans_serif = \"Verdana\",\n    family_base = \"Georgia\",\n    family_monospace = \"Courier New\"\n  )\n)\n\n## Preloader ----\npreloader &lt;- list(\n  html = tagList(spin_6(), \"Loading ...\"),\n  color = \"#B3DDFE\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  freshTheme = dash_theme,\n  preloader = preloader,\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    tags$style(\"\n      /* remove white space from header */\n      .navbar {\n        padding-top: 0em;\n        padding-bottom: 0em;\n        padding-right: 0em;\n      }\n    \"),\n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://gesis.org/\",\n      img(src = \"gesis-logo.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    ),\n    skin = \"light\",\n    sidebarIcon = tags$i(class = \"fa fa-bars\", style = \"color: black;\")\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tags$head(\n      waiter::use_waiter(),\n      includeCSS(\"www/styles.css\")\n    ),\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n            title = \"The Guerry Dashboard\",\n            lead = \"A Shiny app to explore the classic Guerry dataset.\",\n            status = \"info\",\n            btnName = NULL\n        ),\n        fluidRow(\n            column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                                 color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                    title = \"References\",\n                    status = \"primary\",\n                    solidHeader = FALSE,\n                    \"The following sources are referenced in this app:\",\n                    tags$ul(\n                        class = \"list-style: none\",\n                        style = \"margin-left: -30px;\",\n                        p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                        p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                        p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                        p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                    )\n                ),\n                accordionItem(\n                    title = \"Details\",\n                    status = \"primary\",\n                    solidHeader = FALSE,\n                    p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                    p(\"Last update: June 2023\"),\n                    p(\"Further information about the data can be found\",\n                        a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              shinyWidgets::pickerInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              shinyWidgets::radioGroupButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\",\n                individual = TRUE,\n                checkIcon = list(\n                  yes = tags$i(class = \"fa fa-circle\", style = \"color: #58748f;\"),\n                  no = tags$i(class = \"fa fa-circle-o\", style = \"color: #58748f;\")\n                )\n              ),\n              shinyWidgets::pickerInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n\n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n        \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n        a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n        \"It is based on data from the\",\n        a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, c(\"Region\", \"Department\",var)]\n    }\n\n    data_table\n  })\n  \n\n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\",\n      output = \"html\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n\n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    reg &lt;- poly[[\"Region\"]]\n    dep &lt;- poly[[\"Department\"]]\n    val &lt;- poly[[var]]\n    \n    if (is.null(dep)) {\n      dep &lt;- rep(NA, nrow(poly))\n    }\n\n    # Create labels that are nicely aligned in a grid\n    labels &lt;- mapply(\n      function(reg, dep, val) {\n        HTML(as.character(tags$table(\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Region: \")),\n            tags$td(reg)\n          ),\n          if (!is.na(dep)) {\n            tags$tr(\n              style = \"line-height: 10px\",\n              tags$td(tags$b(\"Department: \")),\n              tags$td(dep)\n            )\n          },\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(paste0(variable_desc[[var]]$lgd, \": \"))),\n            tags$td(round(val, 2))\n          )\n        )))\n      },\n      reg = reg, dep = dep, val = val,\n      SIMPLIFY = FALSE,\n      USE.NAMES = FALSE\n    )\n\n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values,\n      labels = labels\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    # Isolate call to params() to prevent render function to be executed\n    # every time params() is invalidated. No dependency is made.\n    params &lt;- isolate(params())\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  # Create a leaflet proxy. Proxies update map values without re-rendering the\n  # entire map, thus increasing performance.\n  observe({\n    params &lt;- params()\n    leafletProxy(\"tab_map_map\", data = params$poly) %&gt;%\n      clearShapes() %&gt;%\n      clearControls() %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        na.label = \"No data\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  \n\n}\n\nshinyApp(ui, server)"
  }
]